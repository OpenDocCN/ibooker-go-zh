- en: 'Chapter 9\. you’re my type: Defined Types'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 你是我的类型：定义类型
- en: '![image](assets/f0265-01.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0265-01.png)'
- en: '**There’s more to learn about defined types.** In the previous chapter, we
    showed you how to define a type with a struct underlying type. What we *didn’t*
    show you was that you can use *any* type as an underlying type.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**还有更多关于定义类型的知识需要学习。** 在前一章中，我们向您展示了如何定义一个以结构体为基础类型的类型。但我们*没有*向您展示您可以使用*任何*类型作为基础类型。'
- en: And do you remember methods—the special kind of function that’s associated with
    values of a particular type? We’ve been calling methods on various values throughout
    the book, but we haven’t shown you how to define your *own* methods. In this chapter,
    we’re going to fix all of that. Let’s get started!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你还记得方法——那种与特定类型的值相关联的特殊函数吗？我们在整本书中一直在对各种值调用方法，但我们还没有向你展示如何定义*自己的*方法。在本章中，我们将解决这一切。让我们开始吧！
- en: Type errors in real life
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现实生活中的类型错误
- en: If you live in the US, you are probably used to the quirky system of measurement
    used there. At gas stations, for example, fuel is sold by the gallon, a volume
    nearly four times the size of the liter used in much of the rest of the world.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你住在美国，你可能习惯了那里使用的古怪计量系统。例如，在加油站，燃料是按加仑出售的，这是大部分世界其余地区使用的升的近四倍体积单位。
- en: Steve is an American, renting a car in another country. He pulls into a gas
    station to refuel. He intends to purchase 10 gallons, figuring that will be enough
    to reach his hotel in another city.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Steve是一个美国人，在另一个国家租车。他驶入加油站加油。他打算购买10加仑，以为这将足够到达另一个城市的酒店。
- en: '![image](assets/f0266-01.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0266-01.png)'
- en: He gets back on the road, but only gets one-fourth of the way to his destination
    before running out of fuel.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 他重新上路，但在到达目的地的四分之一路程后燃料用尽。
- en: If Steve had looked at the labels on the gas pump more closely, he would have
    realized that it was measuring the fuel in liters, not gallons, and that he needed
    to purchase 37.85 liters to get the equivalent of 10 gallons.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Steve仔细看了加油站泵上的标签，他会意识到它是用升来测量燃料，而不是加仑，他需要购买37.85升才能相当于10加仑。
- en: '![image](assets/f0266-02.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0266-02.png)'
- en: '**10 gallons**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**10加仑**'
- en: When you have a number, it’s best to be certain what that number is measuring.
    You want to know if it’s liters or gallons, kilograms or pounds, dollars or yen.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有一个数字时，最好确定这个数字测量的是什么。你想知道它是升还是加仑，千克还是磅，美元还是日元。
- en: '![image](assets/f0266-03.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0266-03.png)'
- en: '**10 liters**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**10升**'
- en: Defined types with underlying basic types
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以基础基本类型定义的类型
- en: 'If you have the following variable:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有以下变量：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '...does that represent 10 gallons or 10 liters? The person who wrote that declaration
    knows, but no one else does, not for sure.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '...那表示10加仑还是10升？写下这个声明的人知道，但其他人不知道，不确定。'
- en: You can use Go’s defined types to make it clear what a value is to be used for.
    Although defined types most commonly use structs as their underlying types, they
    *can* be based on `int`, `float64`, `string`, `bool`, or any other type.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用Go的定义类型来明确值的用途。虽然定义类型最常使用结构体作为其基础类型，但它们*可以*基于`int`、`float64`、`string`、`bool`或任何其他类型。
- en: '**Go defined types most often use structs as their underlying types, but they
    can also be based on ints, strings, booleans, or any other type.**'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Go定义类型最常使用结构体作为其基础类型，但也可以基于int、string、boolean或任何其他类型。**'
- en: Here’s a program that defines two new types, `Liters` and `Gallons`, both with
    an underlying type of `float64`. These are defined at the package level, so that
    they’re available within any function in the current package.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个定义了两种新类型`Liters`和`Gallons`的程序，它们都有一个基础类型为`float64`。它们在包级别定义，因此它们在当前包的任何函数中都可以使用。
- en: Within the `main` function, we declare a variable with a type of `Gallons`,
    and another with a type of `Liters`. We assign values to each variable, and then
    print them out.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main`函数中，我们声明了一个类型为`Gallons`的变量，另一个为`Liters`的变量。我们为每个变量赋值，然后将它们打印出来。
- en: '![image](assets/f0267-01.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0267-01.png)'
- en: Once you’ve defined a type, you can do a conversion to that type from any value
    of the underlying type. As with any other conversion, you write the type you want
    to convert to, followed by the value you want to convert in parentheses.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你定义了一个类型，你就可以对该类型的任何基础类型的值进行转换。与其他任何转换一样，你需要在想要转换的类型后面写上要转换的值，用括号括起来。
- en: 'If we had wanted, we could have written short variable declarations in the
    code above using type conversions:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们愿意，我们可以在上述代码中使用类型转换写出简短的变量声明：
- en: '![image](assets/f0267-02.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0267-02.png)'
- en: If you have a variable that uses a defined type, you *cannot* assign a value
    of a different defined type to it, even if the other type has the same underlying
    type. This helps protect developers from confusing the two types.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个使用定义类型的变量，你*不能*将不同定义类型的值赋给它，即使另一种类型具有相同的基础类型。这有助于防止开发人员混淆这两种类型。
- en: '![image](assets/f0268-01.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0268-01.png)'
- en: But you can *convert* between types that have the same underlying type. So `Liters`
    can be converted to `Gallons` and vice versa, because both have an underlying
    type of `float64`. But Go only considers the value of the underlying type when
    doing a conversion; there is no difference between `Gallons(Liters(240.0))` and
    `Gallons(240.0)`. Simply converting raw values from one type to another defeats
    the protection against conversion errors that types are supposed to provide.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 但是你可以*转换*具有相同基础类型的类型。因此，`Liters`可以转换为`Gallons`，反之亦然，因为两者的基础类型都是`float64`。但是在进行转换时，Go语言只考虑基础类型的值；`Gallons(Liters(240.0))`和`Gallons(240.0)`之间没有区别。简单地从一种类型转换为另一种类型的原始值，会破坏类型应提供的转换错误保护。
- en: '![image](assets/f0268-02.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0268-02.png)'
- en: Instead, you’ll want to perform whatever operations are necessary to convert
    the underlying type value to a value appropriate for the type you’re converting
    to.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，你应该执行必要的操作，以将基础类型的值转换为适合转换为的类型的值。
- en: A quick web search shows that one liter equals roughly 0.264 gallons, and that
    one gallon equals roughly 3.785 liters. We can multiply by these conversion rates
    to convert from `Gallons` to `Liters`, and vice versa.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 快速的网络搜索显示，1升大约等于0.264加仑，1加仑大约等于3.785升。我们可以通过这些换算率相乘来从`Gallons`转换为`Liters`，反之亦然。
- en: '![image](assets/f0268-03.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0268-03.png)'
- en: Defined types and operators
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义类型和运算符
- en: A defined type supports all the same operations as its underlying type. Types
    based on `float64`, for example, support arithmetic operators like `+`, `-`, `*`,
    and `/`, as well as comparison operators like `==`, `>`, and `<`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 定义类型支持与其基础类型相同的所有操作。例如，基于`float64`的类型支持诸如`+`、`-`、`*`和`/`的算术运算符，以及`==`、`>`和`<`等比较运算符。
- en: '![image](assets/f0269-01.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0269-01.png)'
- en: A type based on an underlying type of `string`, however, would support `+`,
    `==`, `>`, and `<`, but not `-`, because `-` is not a valid operator for strings.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 基于`string`的类型将支持`+`、`==`、`>`和`<`等操作，但不支持`-`，因为`-`不是字符串的有效运算符。
- en: '![image](assets/f0269-02.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0269-02.png)'
- en: 'A defined type can be used in operations together with literal values:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 定义类型可以与字面值一起使用：
- en: '![image](assets/f0269-03.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0269-03.png)'
- en: But defined types *cannot* be used in operations together with values of a different
    type, even if the other type has the same underlying type. Again, this is to protect
    developers from accidentally mixing the two types.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但是定义的类型*不能*与不同类型的值一起使用，即使另一种类型具有相同的基础类型。这样做是为了防止开发人员意外混合这两种类型。
- en: '![image](assets/f0269-04.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0269-04.png)'
- en: If you want to add a value in `Liters` to a value in `Gallons`, you’ll need
    to convert one type to match the other first.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要将`Liters`中的值添加到`Gallons`中的值，你需要首先将一种类型转换以匹配另一种类型。
- en: Pool Puzzle
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 池子谜题
- en: '![image](assets/f0270-01.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0270-01.png)'
- en: Your **job** is to take code snippets from the pool and place them into the
    blank lines in this code. **Don’t** use the same snippet more than once, and you
    won’t need to use all the snippets. Your **goal** is to make a program that will
    run and produce the output shown.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你的**任务**是从池中提取代码片段，并将它们放入此代码中的空白行。**不要**重复使用相同的片段，而且你不需要使用所有的片段。你的**目标**是编写一个能运行并产生所示输出的程序。
- en: '![image](assets/f0270-02.png)![image](assets/f0270-03.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0270-02.png)![image](assets/f0270-03.png)'
- en: '**Note: each snippet from the pool can only be used once!**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：池中的每个片段只能使用一次！**'
- en: '![image](assets/arrow.png) Answers in [“Pool Puzzle Solution”](#pool_puzzle_solution_6).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](assets/arrow.png) 答案在[“池子谜题解答”](#pool_puzzle_solution_6)中。'
- en: Converting between types using functions
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用函数进行类型转换
- en: 'Suppose we wanted to take a car whose fuel level is measured in `Gallons` and
    refill it at a gas pump that measures in `Liters`. Or take a bus whose fuel is
    measured in `Liters` and refill it at a gas pump that measures in `Gallons`. To
    protect us from inaccurate measurements, Go will give us a compile error if we
    try to combine values of different types:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要拿一辆以`Gallons`为单位测量燃料的汽车，在`Liters`单位的加油站加油。或者拿一辆以`Liters`为单位测量燃料的公共汽车，在`Gallons`单位的加油站加油。为了防止不准确的测量，Go语言会在我们尝试组合不同类型的值时给出编译错误：
- en: '![image](assets/f0271-01.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0271-01.png)'
- en: In order to do operations with values of different types, we need to convert
    the types to match first. Previously, we demonstrated multiplying a `Liters` value
    by 0.264 and converted the result to `Gallons`. We also multiplied a `Gallons`
    value by 3.785 and converted the result to `Liters`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理不同类型的值，我们需要首先进行类型转换以匹配。之前，我们演示了将`Liters`值乘以0.264，并将结果转换为`Gallons`。我们还将`Gallons`值乘以3.785，并将结果转换为`Liters`。
- en: '![image](assets/f0271-02.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0271-02.png)'
- en: 'We can create `ToGallons` and `ToLiters` functions that do the same thing,
    then call them to perform the conversion for us:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建`ToGallons`和`ToLiters`函数来执行相同的操作，然后调用它们来进行转换：
- en: Gasoline isn’t the only liquid we need to measure the volume of. There’s cooking
    oil, bottles of soda, and juice, to name a few. And so there are many more measures
    of volume than just liters and gallons. In the US there are teaspoons, cups, quarts,
    and more. The metric system has other units of measure as well, but the milliliter
    (1/1000 of a liter) is the most commonly used.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 汽油不是我们需要测量体积的唯一液体。还有食用油、汽水瓶和果汁等。因此，除了升和加仑之外，还有许多体积单位。在美国有茶匙、杯子、夸脱等等。度量衡系统也有其他单位，但毫升（升的1/1000）是最常用的单位。
- en: Let’s add a new type, `Milliliters`. Like the others, it will use `float64`
    as an underlying type.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个新类型，`Milliliters`。像其他类型一样，它将使用`float64`作为基础类型。
- en: '![image](assets/f0272-01.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0272-01.png)'
- en: 'We’re also going to want a way to convert from `Milliliters` to the other types.
    But if we start adding a function to convert from `Milliliters` to `Gallons`,
    we run into a problem: we can’t have two `ToGallons` functions in the same package!'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一种方法来将`Milliliters`转换为其他类型。但是，如果我们开始添加一个从`Milliliters`到`Gallons`的转换函数，我们会遇到一个问题：我们不能在同一个包中拥有两个`ToGallons`函数！
- en: '![image](assets/f0272-02.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0272-02.png)'
- en: 'We could rename the two `ToGallons` functions to include the type they’re converting
    from: `LitersToGallons` and `MillilitersToGallons`, respectively. But those names
    would be a pain to write out all the time, and as we start adding functions to
    convert between the other types, it becomes clear this isn’t sustainable.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这两个`ToGallons`函数重命名为包含它们所转换的类型的函数：`LitersToGallons`和`MillilitersToGallons`。但是每次写出这些名称都很麻烦，而且随着我们开始添加其他类型之间的转换函数，很明显这是不可持续的。
- en: '![image](assets/f0272-03.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0272-03.png)'
- en: there are no Dumb Questions
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 没有愚蠢的问题
- en: '**Q: I’ve seen other languages that support function *overloading*: they allow
    you to have multiple functions with the same name, as long as their parameter
    types are different. Doesn’t Go support that?**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q: 我看过其他支持函数*重载*的语言：它们允许您拥有多个函数具有相同的名称，只要它们的参数类型不同。Go语言不支持这种功能吗？**'
- en: '**A:** The Go maintainers get this question frequently too, and they answer
    it at *[https://golang.org/doc/faq#overloading](https://golang.org/doc/faq#overloading)*:
    “Experience with other languages told us that having a variety of methods with
    the same name but different signatures was occasionally useful but that it could
    also be confusing and fragile in practice.” The Go language is simplified by *not*
    supporting overloading, and so it doesn’t support it. As you’ll see later in the
    book, the Go team made similar decisions in other areas of the language, too;
    when they have to choose between simplicity and adding more features, they generally
    choose simplicity. But that’s okay! As we’ll see shortly, there are other ways
    to get the same benefits...'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**A:** Go语言的维护者们也经常遇到这个问题，并在*[https://golang.org/doc/faq#overloading](https://golang.org/doc/faq#overloading)*上回答：“通过其他语言的经验，我们知道具有相同名称但不同签名的多种方法有时很有用，但在实践中可能会令人困惑和脆弱。”
    Go语言通过*不*支持函数重载来简化语言，因此不支持它。正如您将在本书后面看到的，Go团队在语言的其他领域也做出了类似的决策；当他们在简单性和添加更多功能之间需要做出选择时，他们通常选择简单性。但这没关系！很快我们会看到，还有其他方法可以获得相同的好处……'
- en: '![image](assets/f0273-01.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0273-01.png)'
- en: Fixing our function name conflict using methods
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过方法修复我们的函数名冲突
- en: Remember way back in [Chapter 2](ch02.html#which_code_runs_nextquestcolon_condition),
    we introduced you to *methods*, which are functions associated with values of
    a given type? Among other things, we created a `time.Time` value and called its
    `Year` method, and we created a `strings.Replacer` value and called its `Replace`
    method.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得在[第2章](ch02.html#which_code_runs_nextquestcolon_condition)中我们向你介绍的*方法*吗？它们是与给定类型的值相关联的函数？除其他外，我们创建了一个`time.Time`值并调用了它的`Year`方法，还创建了一个`strings.Replacer`值并调用了它的`Replace`方法。
- en: '![image](assets/f0274-01.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0274-01.png)'
- en: We can define methods of our own to help with our type conversion problem.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以定义自己的方法来帮助解决类型转换问题。
- en: 'We’re not allowed to have multiple functions named `ToGallons`, so we had to
    write long, cumbersome function names that incorporated the type we were converting:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能有多个名为`ToGallons`的函数，所以我们不得不编写长而冗长的函数名，其中包含我们正在转换的类型：
- en: '[PRE1]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: But we *can* have multiple *methods* named `ToGallons`, as long as they’re defined
    on separate types. Not having to worry about name conflicts will let us make our
    method names much shorter.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们*可以*有多个名为`ToGallons`的*方法*，只要它们定义在不同的类型上。不必担心名称冲突将使我们的方法名称变得更短。
- en: '[PRE2]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: But let’s not get ahead of ourselves. Before we can do anything else, we need
    to know how to define a method...
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们不要过于急躁。在我们做任何其他事情之前，我们需要知道如何定义一个方法……
- en: Defining methods
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义方法
- en: 'A method definition is very similar to a function definition. In fact, there’s
    really only one difference: you add one extra parameter, a **receiver parameter**,
    in parentheses *before* the function name.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 方法定义与函数定义非常相似。事实上，它们只有一个区别：你需要在函数名之前的括号内添加一个额外的参数，即**接收者参数**。
- en: As with any function parameter, you need to provide a name for the receiver
    parameter, followed by a type.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何函数参数一样，你需要为方法定义中的接收者参数提供一个名称，后面跟着一个类型。
- en: '![image](assets/f0275-01.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0275-01.png)'
- en: To call a method you’ve defined, you write the value you’re calling the method
    on, a dot, and the name of the method you’re calling, followed by parentheses.
    The value you’re calling the method on is known as the method **receiver**.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用你定义的方法，你需要写出你调用方法的值，加一个点，然后是你调用的方法名称，后面跟上括号。你调用方法的值称为方法的**接收者**。
- en: 'The similarity between method calls and method definitions can help you remember
    the syntax: the receiver is listed first when you’re *calling* a method, and the
    receiver parameter is listed first when you’re *defining* a method.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法调用和方法定义之间的相似性可以帮助你记住语法：*调用*方法时，接收者首先列出，而*定义*方法时，接收者参数首先列出。
- en: '![image](assets/f0275-02.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0275-02.png)'
- en: The name of the receiver parameter in the method definition isn’t important,
    but its type is; the method you’re defining becomes associated with all values
    of that type.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 方法定义中接收者参数的名称并不重要，但其类型是重要的；你正在定义的方法将与该类型的所有值相关联。
- en: Below, we define a type named `MyType`, with an underlying type of `string`.
    Then, we define a method named `sayHi`. Because `sayHi` has a receiver parameter
    with a type of `MyType`, we’ll be able to call the `sayHi` method on any `MyType`
    value. (Most developers would say that `sayHi` is defined “on” `MyType`.)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 下面，我们定义了一个名为`MyType`的类型，其基础类型为`string`。然后，我们定义了一个名为`sayHi`的方法。因为`sayHi`有一个类型为`MyType`的接收者参数，我们将能够在任何`MyType`值上调用`sayHi`方法。（大多数开发人员会说`sayHi`是在`MyType`上定义的。）
- en: '![image](assets/f0275-03.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0275-03.png)'
- en: Once a method is defined on a type, it can be called on any value of that type.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在类型上定义了方法，就可以在该类型的任何值上调用它。
- en: Here, we create two different `MyType` values, and call `sayHi` on each of them.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建两个不同的`MyType`值，并在每个值上调用`sayHi`。
- en: The receiver parameter is (pretty much) just another parameter
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接收者参数（基本上）只是另一个参数
- en: The type of the receiver parameter is the type that the method becomes associated
    with. But aside from that, the receiver parameter doesn’t get special treatment
    from Go. You can access its contents within the method block just like you would
    any other function parameter.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接收者参数的类型是该方法关联的类型。但除此之外，接收者参数在Go中并没有特殊待遇。你可以像处理任何其他函数参数一样，在方法块内部访问其内容。
- en: The code sample below is almost identical to the previous one, except that we’ve
    updated it to print the value of the receiver parameter. You can see the receivers
    in the resulting output.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码示例与前一个几乎相同，只是我们更新了它以打印接收者参数的值。你可以在输出结果中看到这些接收者。
- en: '![image](assets/f0276-01.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0276-01.png)'
- en: Go lets you name a receiver parameter whatever you want, but it’s more readable
    if all the methods you define for a type have receiver parameters with the same
    name.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Go 允许你随意命名接收者参数，但如果你为一个类型定义的所有方法都使用相同名称的接收者参数，那会更易读。
- en: By convention, Go developers usually use a name consisting of a single letter—the
    first letter of the receiver’s type name, in lowercase. (This is why we used `m`
    as the name for our `MyType` receiver parameter.)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，Go 开发者通常使用由接收者类型名称的第一个字母小写组成的名称。（这就是我们将`m`作为`MyType`接收者参数名称的原因。）
- en: '**Go uses receiver parameters instead of the “self” or “this” values seen in
    other languages.**'
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Go 使用接收者参数而不是其他语言中看到的“self”或“this”值。**'
- en: there are no Dumb Questions
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 没有愚蠢的问题
- en: '**Q: Can I define new methods on *any* type?**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q: 我可以为*任何*类型定义新方法吗？**'
- en: '**A:** Only types that are defined in the same package where you define the
    method. That means no defining methods for types from someone else’s `security`
    package from your `hacking` package, and no defining new methods on universal
    types like `int` or `string`.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**A:** 只能为与方法定义在同一包中的类型定义方法。这意味着不能在你的`hacking`包中为别人的`security`包中的类型定义方法，也不能在通用类型如`int`或`string`上定义新方法。'
- en: '**Q: But I need to be able to use methods of my own with someone else’s type!**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q: 但我需要能够使用自己的方法来处理别人的类型！**'
- en: '**A:** First you should consider whether a function would work well enough;
    a function can take any type you want as a parameter. But if you *really* need
    a value that has some methods of your own, plus some methods from a type in another
    package, you can make a struct type that embeds the other package’s type as an
    anonymous field. We’ll look at how that works in the next chapter.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**A:** 首先你应该考虑是否一个函数就足够了；函数可以接受任何你想要的类型作为参数。但如果你*确实*需要一个同时具有自己方法和其他包类型方法的值，你可以定义一个结构体类型，匿名地嵌入其他包的类型。我们将在下一章中看看这是如何工作的。'
- en: '**Q: I’ve seen other languages where a method receiver was available in a method
    block in a special variable named `self` or `this`. Does Go do that?**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q: 我在其他语言中看到方法接收者在方法块中作为特殊变量命名为`self`或`this`。Go 是否也这样做？**'
- en: '**A:** Go uses receiver parameters instead of `self` and `this`. The big difference
    is that `self` and `this` are set *implicitly*, whereas you *explicitly* declare
    a receiver parameter. Other than that, receiver parameters are used in the same
    way, and there’s no need for Go to reserve `self` or `this` as keywords! (You
    could even name your receiver parameter `this` if you wanted, but don’t do that;
    the convention is to use the first letter of the receiver’s type name instead.)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**A:** Go 使用接收者参数而不是`self`和`this`。主要区别在于，`self`和`this`是*隐式*设置的，而你需要*显式*声明一个接收者参数。除此之外，接收者参数的使用方式相同，Go
    不需要将`self`或`this`保留为关键字！（如果你愿意，甚至可以将接收者参数命名为`this`，但不要这样做；惯例是使用接收者类型名称的首字母。）'
- en: A method is (pretty much) just like a function
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法（几乎）与函数完全一样
- en: Aside from the fact that they’re called on a receiver, methods are otherwise
    pretty similar to any other function.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 除了它们在接收者上被调用之外，方法与任何其他函数基本相似。
- en: As with any other function, you can define additional parameters within parentheses
    following the method name. These parameter variables can be accessed in the method
    block, along with the receiver parameter. When you call the method, you’ll need
    to provide an argument for each parameter.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何其他函数一样，你可以在方法名后的括号中定义额外的参数。这些参数变量可以在方法块中访问，连同接收者参数一起。当你调用方法时，你需要为每个参数提供一个实参。
- en: '![image](assets/f0277-01.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0277-01.png)'
- en: 'As with any other function, you can declare one or more return values for a
    method, which will be returned when the method is called:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何其他函数一样，你可以为方法声明一个或多个返回值，在调用方法时返回这些值：
- en: '![image](assets/f0277-02.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0277-02.png)'
- en: As with any other function, a method is considered exported from the current
    package if its name begins with a capital letter, and it’s considered unexported
    if its name begins with a lowercase letter. If you want to use your method outside
    the current package, be sure its name begins with a capital letter.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何其他函数一样，如果方法名称以大写字母开头，则认为该方法从当前包中导出，如果方法名称以小写字母开头，则认为该方法未导出。如果希望在当前包之外使用你的方法，请确保其名称以大写字母开头。
- en: '![image](assets/f0277-03.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0277-03.png)'
- en: Pointer receiver parameters
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指针接收器参数
- en: Here’s an issue that may look familiar by now. We’ve defined a new `Number`
    type with an underlying type of `int`. We’ve given `Number` a `double` method
    that is supposed to multiply the underlying value of its receiver by two and then
    update the receiver. But we can see from the output that the method receiver isn’t
    actually getting updated.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个可能看起来很熟悉的问题。我们定义了一个新的`Number`类型，其基础类型为`int`。我们给`Number`定义了一个`double`方法，该方法应该将其接收器的基础值乘以两倍，然后更新接收器。但从输出中我们可以看到，方法接收器实际上并没有被更新。
- en: '![image](assets/f0279-01.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0279-01.png)'
- en: Back in [Chapter 3](ch03.html#call_mecolon_functions), we had a `double` *function*
    with a similar problem. Back then, we learned that function parameters receive
    a copy of the values the function is called with, not the original values, and
    that any updates to the copy would be lost when the function exited. To make the
    `double` function work, we had to pass a *pointer* to the value we wanted to update,
    and then update the value at that pointer within the function.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 回到[第3章](ch03.html#call_mecolon_functions)，我们曾经有一个带有类似问题的`double` *函数*。那时，我们学到函数参数接收的是函数调用时的值的副本，而不是原始值，并且在函数退出时，对副本的任何更新都将丢失。为了使`double`函数工作，我们必须传递一个我们想要更新的值的*指针*，然后在函数内部更新该指针处的值。
- en: '![image](assets/f0279-02.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0279-02.png)'
- en: We’ve said that receiver parameters are treated no differently than ordinary
    parameters. And like any other parameter, a receiver parameter receives a *copy*
    of the receiver value. If you make changes to the receiver within a method, you’re
    changing the copy, not the original.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经说过，接收器参数与普通参数没有任何区别。与任何其他参数一样，接收器参数接收接收器值的*副本*。如果在方法内部对接收器进行更改，则更改的是副本，而不是原始值。
- en: 'As with the `double` function in [Chapter 3](ch03.html#call_mecolon_functions),
    the solution is to update our `Double` method to use a pointer for its receiver
    parameter. This is done in the same way as any other parameter: we place a `*`
    in front of the receiver type to indicate it’s a pointer type. We’ll also need
    to modify the method block so that it updates the value at the pointer. Once that’s
    done, when we call `Double` on a `Number` value, the `Number` should be updated.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 与[第3章](ch03.html#call_mecolon_functions)中的`double`函数类似，解决方案是更新我们的`Double`方法以使用指针作为其接收器参数。这与任何其他参数一样：我们在接收器类型前面加上`*`表示它是一个指针类型。我们还需要修改方法块，以便更新指针处的值。完成后，当我们对`Number`值调用`Double`时，应该会更新`Number`。
- en: '![image](assets/f0280-01.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0280-01.png)'
- en: Notice that we *didn’t* have to change the method call at all. When you call
    a method that requires a pointer receiver on a variable with a nonpointer type,
    Go will automatically convert the receiver to a pointer for you. The same is true
    for variables with pointer types; if you call a method requiring a value receiver,
    Go will automatically get the value at the pointer for you and pass that to the
    method.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们*不需要*改变方法调用。当您在具有非指针类型的变量上调用需要指针接收器的方法时，Go会自动将接收器转换为指针。对于具有指针类型的变量也是如此；如果调用需要值接收器的方法，Go会自动获取指针处的值，并将其传递给方法。
- en: You can see this at work in the code at right. The method named `method` takes
    a value receiver, but we can call it using both direct values and pointers, because
    Go autoconverts if needed. And the method named `pointerMethod` takes a pointer
    receiver, but we can call it on both direct values and pointers, because Go will
    autoconvert if needed.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在右侧的代码中看到其工作原理。名为`method`的方法采用值接收器，但我们可以使用直接值和指针调用它，因为如果需要，Go会自动转换。名为`pointerMethod`的方法采用指针接收器，但我们可以在直接值和指针上调用它，因为如果需要，Go会自动转换。
- en: '![image](assets/f0280-02.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0280-02.png)'
- en: 'By the way, the code at right breaks a convention: for consistency, all of
    your type’s methods can take value receivers, or they can all take pointer receivers,
    but you should avoid mixing the two. We’re only mixing the two kinds here for
    demonstration purposes.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，右侧的代码打破了一个惯例：为了一致性，您类型的所有方法可以接受值接收器，或者可以全部接受指针接收器，但应避免混合使用这两种。我们在这里只是为了演示目的而混合了这两种。
- en: Breaking Stuff is Educational!
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 破坏性的事情是有教育意义的！
- en: '![image](assets/f0282-01.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0282-01.png)'
- en: Here is our `Number` type again, with definitions for a couple methods. Make
    one of the changes below and try to compile the code. Then undo your change and
    try the next one. See what happens!
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们的`Number`类型，再次定义了几个方法。进行以下一种更改并尝试编译代码。然后撤消您的更改并尝试下一步。看看会发生什么！
- en: '[PRE3]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '| If you do this... | ...the code will break because... |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 如果您这样做... | ...代码会因为... |'
- en: '| --- | --- |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Change a receiver parameter to a type not defined in this package: `func
    (n *~~Number~~int) Double() { *n *= 2 }` | You can only define new methods on
    types that were declared in the current package. Defining a method on a globally
    defined type like `int` will result in a compile error. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 将接收器参数更改为此包中未定义的类型：`func (n *~~Number~~int) Double() { *n *= 2 }` | 您只能在当前包中声明的类型上定义新方法。在全局定义类型（如`int`）上定义方法将导致编译错误。
    |'
- en: '| Change the receiver parameter for `Double` to a nonpointer type: `func (n
    ~~*~~Number) Double() { ~~*~~n *= 2 }` | Receiver parameters receive a copy of
    the value the method was called on. If the `Double` function only modifies the
    copy, the original value will be unchanged when `Double` exits. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 将`Double`的接收器参数更改为非指针类型：`func (n ~~*~~Number) Double() { ~~*~~n *= 2 }` |
    接收器参数接收调用方法的值的副本。如果`Double`函数仅修改副本，则在`Double`退出时原始值将保持不变。 |'
- en: '| Call a method that requires a pointer receiver on a value that’s not in a
    variable: `Number(4).Double()` | When calling a method that takes a pointer receiver,
    Go can automatically convert a value to a pointer to a receiver *if* it’s stored
    in a variable. If it’s not, you’ll get an error. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 调用需要指针接收器的方法，但值未存储在变量中：`Number(4).Double()` | 在调用需要指针接收器的方法时，Go 可以自动将值转换为接收器的指针，*如果*它存储在变量中。如果没有，您将会收到一个错误。
    |'
- en: '| Change the receiver parameter for `Display` to a nonpointer type: `func (n
    ~~*~~Number) Display() { fmt.Println(~~*~~n) }` | The code will actually still
    *work* after making this change, but it breaks convention! Receiver parameters
    in the methods for a type can be all pointers, or all values, but it’s best to
    avoid mixing the two. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| 将`Display`的接收器参数更改为非指针类型：`func (n ~~*~~Number) Display() { fmt.Println(~~*~~n)
    }` | 在做出这个更改后，代码实际上仍然会*工作*，但它打破了惯例！对于类型的方法，接收器参数可以全部是指针，或者全部是值，但最好避免混合两者。 |'
- en: Converting Liters and Milliliters to Gallons using methods
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用方法将升和毫升转换为加仑
- en: 'When we added a `Milliliters` type to our defined types for measuring volume,
    we discovered we couldn’t have `ToGallons` functions for both `Liters` and `Milliliters`.
    To work around this, we had to create functions with lengthy names:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在我们定义的体积测量类型中添加了`Milliliters`类型时，我们发现无法为`Liters`和`Milliliters`都创建`ToGallons`函数。为了解决这个问题，我们不得不创建具有较长名称的函数：
- en: '[PRE4]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: But unlike functions, method names don’t have to be unique, as long as they’re
    defined on different types.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 但与函数不同的是，方法名称不必唯一，只要它们定义在不同的类型上。
- en: Let’s try implementing a `ToGallons` method on the `Liters` type. The code will
    be almost identical to the `LitersToGallons` function, but we’ll make the `Liters`
    value a receiver parameter rather than an ordinary parameter. Then we’ll do the
    same for the `Milliliters` type, converting the `MillilitersToGallons` function
    to a `ToGallons` method.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试在`Liters`类型上实现一个`ToGallons`方法。代码几乎与`LitersToGallons`函数相同，但我们将`Liters`值作为接收器参数而不是普通参数。然后我们将对`Milliliters`类型执行相同操作，将`MillilitersToGallons`函数转换为`ToGallons`方法。
- en: Notice that we’re not using pointer types for the receiver parameters. We’re
    not modifying the receivers, and the values don’t consume much memory, so it’s
    fine for the parameter to receive a copy of the value.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们并未对接收器参数使用指针类型。我们没有修改接收器，并且这些值不会占用太多内存，因此参数接收副本是可以的。
- en: '![image](assets/f0283-01.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0283-01.png)'
- en: In our `main` function, we create a `Liters` value, then call `ToGallons` on
    it. Because the receiver has the type `Liters`, the `ToGallons` method for the
    `Liters` type is called. Likewise, calling `ToGallons` on a `Milliliters` value
    causes the `ToGallons` method for the `Milliliters` type to be called.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`main`函数中，我们创建一个`Liters`值，然后调用其`ToGallons`方法。因为接收器的类型是`Liters`，所以调用`Liters`类型的`ToGallons`方法。同样地，在`Milliliters`值上调用`ToGallons`会导致调用`Milliliters`类型的`ToGallons`方法。
- en: Converting Gallons to Liters and Milliliters using methods
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将加仑转换为升和毫升使用方法
- en: The process is similar when converting the `GallonsToLiters` and `GallonsToMilliliters`
    functions to methods. We just move the `Gallons` parameter to a receiver parameter
    in each.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当将`GallonsToLiters`和`GallonsToMilliliters`函数转换为方法时，过程类似。我们只是将`Gallons`参数移到每个接收器参数中。
- en: '![image](assets/f0284-01.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0284-01.png)'
- en: Your Go Toolbox
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您的 Go 工具箱
- en: '![image](assets/f0285-01.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0285-01.png)'
- en: '**That’s it for [Chapter 9](#yoursquore_my_typecolon_defined_types)! You’ve
    added method definitions to your toolbox.**'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**这就是对[第 9 章](#yoursquore_my_typecolon_defined_types)的全部内容！您已经向您的工具箱中添加了方法定义。**'
- en: '![image](assets/f0285-02.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0285-02.png)'
- en: Pool Puzzle Solution
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 池子难题解答
- en: '![image](assets/f0286-01.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0286-01.png)'
