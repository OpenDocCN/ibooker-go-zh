- en: 'Chapter 5\. on the list: Arrays'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：列表：数组
- en: '![image](assets/f0149-01.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0149-01.png)'
- en: '**A whole lot of programs deal with lists of things.** Lists of addresses.
    Lists of phone numbers. Lists of products. Go has *two* built-in ways of storing
    lists. This chapter will introduce the first: **arrays**. You’ll learn about how
    to create arrays, how to fill them with data, and how to get that data back out
    again. Then you’ll learn about processing all the elements in array, first the
    *hard* way with `for` loops, and then the *easy* way with `for`...`range` loops.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**许多程序处理各种列表。**地址列表。电话号码列表。产品列表。Go语言内置了*两种*存储列表的方法。本章将介绍第一种：**数组**。您将学习如何创建数组，如何填充数据以及如何再次获取这些数据。然后，您将学习如何处理数组中的所有元素，首先是*使用`for`循环的困难方式*，然后是*使用`for`...`range`循环的简单方式*。'
- en: Arrays hold collections of values
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组保存值的集合
- en: A local restaurant owner has a problem. He needs to know how much beef to order
    for the upcoming week. If he orders too much, the excess will go to waste. If
    he doesn’t order enough, he’ll have to tell his customers that he can’t make their
    favorite dishes.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一位当地餐馆老板面临一个问题。他需要知道未来一周需要订购多少牛肉。如果他订购太多，多余的将会浪费掉。如果他订购不足，他将不得不告诉顾客他无法做出他们最喜欢的菜肴。
- en: He keeps data on how much meat was used the previous three weeks. He needs a
    program that will give him some idea of how much to order.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 他会记录过去三周使用的肉量数据。他需要一个程序来帮助他大致确定需要订购多少肉。
- en: '![image](assets/f0150-01.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0150-01.png)'
- en: 'This should be simple enough: we can calculate the average by taking the three
    amounts, adding them together, and dividing by 3\. The average should offer a
    good estimate of how much to order.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该足够简单：我们可以通过将三个金额相加并除以3来计算平均值。平均值应该能很好地估计需要订购的量。
- en: '![image](assets/f0150-02.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0150-02.png)'
- en: The first issue is going to be storing the sample values. It would be a pain
    to declare three separate variables, and even more so if we wanted to average
    more values together later. But, like most programming languages, Go offers a
    data structure that’s perfect for this sort of situation...
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个问题将是存储示例值。如果我们想稍后平均更多值，声明三个单独的变量将是一种痛苦。但是，与大多数编程语言一样，Go提供了一种完美解决这种情况的数据结构...
- en: An **array** is a collection of values that all share the same type. Think of
    it like one of those pill boxes with compartments — you can store and retrieve
    pills from each compartment separately, but it’s also easy to transport the container
    as a whole.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**数组**是一组共享相同类型的值。将其视为一个有隔间的药盒 —— 您可以分别存储和检索每个隔间中的药丸，但也很容易将整个容器一起携带。'
- en: The values an array holds are called its **elements**. You can have an array
    of strings, an array of booleans, or an array of any other Go type (even an array
    of arrays). You can store an entire array in a single variable, and then access
    any element within the array that you need.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 数组保存的值称为其**元素**。您可以有一个字符串数组，一个布尔数组，或者任何其他Go类型的数组（甚至是数组的数组）。您可以将整个数组存储在单个变量中，然后访问您需要的数组中的任何元素。
- en: '![image](assets/f0150-03.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0150-03.png)'
- en: An array holds a specific number of elements, and it cannot grow or shrink.
    To declare a variable that holds an array, you need to specify the number of elements
    it holds in square brackets (`[]`), followed by the type of elements the array
    holds.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 数组保存特定数量的元素，不能增长或缩小。要声明一个变量来保存数组，您需要在方括号（`[]`）中指定它保存的元素数，然后是数组保存的元素类型。
- en: '![image](assets/f0151-01.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0151-01.png)'
- en: To set the array elements’ values or to retrieve values later, you’ll need a
    way to specify which element you mean. Elements in an array are numbered, starting
    with 0\. An element’s number is called its **index**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置数组元素的值或稍后检索值，您需要一种指定您要的元素的方法。数组中的元素从0开始编号。元素的编号称为其**索引**。
- en: '![image](assets/f0151-02.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0151-02.png)'
- en: If you wanted to make an array with the names of notes on a musical scale, for
    example, the first note would be assigned to index `0`, the second note would
    be at index `1`, and so forth. The index is specified in square brackets.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您想制作一个音阶上音符名称的数组，第一个音符将分配给索引`0`，第二个音符将在索引`1`处，依此类推。索引在方括号中指定。
- en: '![image](assets/f0151-03.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0151-03.png)'
- en: 'Here’s an array of integers:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个整数数组：
- en: '![image](assets/f0151-04.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0151-04.png)'
- en: 'And an array of `time.Time` values:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个`time.Time`值的数组：
- en: '![image](assets/f0151-05.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0151-05.png)'
- en: Zero values in arrays
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组中的零值
- en: 'As with variables, when an array is created, all the values it contains are
    initialized to the zero value for the type that array holds. So an array of `int`
    values is filled with zeros by default:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 和变量一样，当创建数组时，它所包含的所有值都会被初始化为该数组所持有类型的零值。因此，一个包含`int`值的数组默认填充为零：
- en: '![image](assets/f0152-01.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0152-01.png)'
- en: 'The zero value for strings, however, is an empty string, so an array of `string`
    values is filled with empty strings by default:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，字符串的零值是一个空字符串，因此一个包含`string`值的数组默认填充为空字符串：
- en: '![image](assets/f0152-02.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0152-02.png)'
- en: Zero values can make it safe to manipulate an array element even if you haven’t
    explicitly assigned a value to it. For example, here we have an array of integer
    counters. We can increment any of them without explicitly assigning a value first,
    because we know they will all start from `0`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你没有显式地为其分配一个值，零值也可以确保安全地操作数组元素。例如，在这里我们有一个整数计数器数组。我们可以增加任何一个计数器而无需先显式分配一个值，因为我们知道它们都将从`0`开始。
- en: '![image](assets/f0152-03.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0152-03.png)'
- en: '**When an array is created, all the values it contains are initialized to the
    zero value for the type the array holds.**'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**当创建数组时，它所包含的所有值都会被初始化为该数组所持有类型的零值。**'
- en: Array literals
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组字面值
- en: If you know in advance what values an array should hold, you can initialize
    the array with those values using an **array literal**. An array literal starts
    just like an array type, with the number of elements it will hold in square brackets,
    followed by the type of its elements. This is followed by a list in curly braces
    of the initial values each element should have. The element values should be separated
    by commas.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你事先知道数组应该包含哪些值，你可以使用**数组字面值**来初始化数组。数组字面值的开始方式与数组类型相同，使用方括号表示它将包含的元素数量，然后是其元素的类型。接着是用大括号括起来的初始值列表，每个元素的初始值应该用逗号分隔。
- en: '![image](assets/f0153-01.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0153-01.png)'
- en: These examples are just like the previous ones we showed, except that instead
    of assigning values to the array elements one by one, the entire array is initialized
    using array literals.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例与我们之前展示的示例非常相似，只是不再逐个为数组元素分配值，而是使用数组字面值初始化整个数组。
- en: '![image](assets/f0153-02.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0153-02.png)'
- en: Using an array literal also allows you to do short variable declarations with
    `:=`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数组字面值还可以使用`:=`进行简短的变量声明。
- en: '![image](assets/f0153-03.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0153-03.png)'
- en: You can spread array literals over multiple lines, but you’re required to use
    a comma before each newline character in your code. You’ll even need a comma following
    the final entry in the array literal, if it’s followed by a newline. (This style
    looks awkward at first, but it makes it easier to add more elements to the code
    later.)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将数组字面值分布在多行，但在你的代码中，在每个换行字符之前必须使用逗号。如果在最后一个条目之后有换行符，则甚至需要在数组字面值的最后一个条目之后使用逗号。（这种风格起初看起来有些尴尬，但它使得以后添加更多元素变得更容易。）
- en: '![image](assets/f0153-04.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0153-04.png)'
- en: Functions in the “fmt” package know how to handle arrays
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: “fmt”包中的函数知道如何处理数组
- en: When you’re just trying to debug code, you don’t have to pass array elements
    to `Println` and other functions in the `fmt` package one by one. Just pass the
    entire array. There’s logic in the `fmt` package to format and print the array
    for you. (The `fmt` package can also handle slices, maps, and other data structures
    we’ll see later.)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当你只是尝试调试代码时，你不必逐个将数组元素传递给`fmt`包中的`Println`和其他函数。只需传递整个数组。`fmt`包中有逻辑来为你格式化和打印数组。（`fmt`包还可以处理我们稍后将看到的切片、映射和其他数据结构。）
- en: '![image](assets/f0154-02.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0154-02.png)'
- en: You may also remember the `"%#v"` verb used by the `Printf` and `Sprintf` functions,
    which formats values as they’d appear in Go code. When formatted by `"%#v"`, arrays
    appear in the result as Go array literals.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得`Printf`和`Sprintf`函数使用的`"%#v"`动词，它将值格式化为它们在Go代码中出现的样子。当用`"%#v"`格式化时，数组在结果中显示为Go数组字面值。
- en: '![image](assets/f0154-03.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0154-03.png)'
- en: Accessing array elements within a loop
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在循环内访问数组元素
- en: You don’t have to explicitly write the integer index of the array element you’re
    accessing in your code. You can also use the value in an integer variable as the
    array index.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的代码中，你不必显式地写出你正在访问的数组元素的整数索引。你也可以使用整数变量中的值作为数组索引。
- en: '![image](assets/f0155-01.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0155-01.png)'
- en: That means you can do things like process elements of an array using a `for`
    loop. You loop through indexes in the array, and use the loop variable to access
    the element at the current index.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你可以使用`for`循环处理数组的元素。你可以循环遍历数组中的索引，并使用循环变量访问当前索引处的元素。
- en: '![image](assets/f0155-02.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0155-02.png)'
- en: When accessing array elements using a variable, you need to be careful which
    index values you use. As we mentioned, arrays hold a specific number of elements.
    Trying to access an index that is outside the array will cause a **panic**, an
    error that occurs while your program is running (as opposed to when it’s compiling).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用变量访问数组元素时，需要小心使用哪些索引值。正如我们所述，数组包含特定数量的元素。尝试访问超出数组的索引将导致**panic**，这是程序运行时发生的错误（而不是编译时）。
- en: '![image](assets/f0155-03.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0155-03.png)'
- en: Normally, a panic causes your program to crash and display an error message
    to the user. Needless to say, panics should be avoided whenever possible.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，panic会导致程序崩溃并向用户显示错误消息。毫无疑问，应尽量避免panic。
- en: '![image](assets/f0155-04.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0155-04.png)'
- en: Checking array length with the “len” function
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用“len”函数检查数组长度
- en: Writing loops that only access valid array indexes can be somewhat error-prone.
    Fortunately, there are a couple ways to make the process easier.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 编写仅访问有效数组索引的循环可能会有些容易出错。幸运的是，有几种方法可以使这个过程更加简单。
- en: The first is to check the actual number of elements in the array before accessing
    it. You can do this with the built-in `len` function, which returns the length
    of the array (the number of elements it contains).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是在访问数组之前检查数组中的实际元素数。你可以使用内置的`len`函数来做到这一点，它返回数组的长度（即它包含的元素数）。
- en: '![image](assets/f0156-01.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0156-01.png)'
- en: When setting up a loop to process an entire array, you can use `len` to determine
    which indexes are safe to access.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置循环以处理整个数组时，可以使用`len`来确定哪些索引是安全访问的。
- en: '![image](assets/f0156-02.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0156-02.png)'
- en: This still has the potential for mistakes, though. If `len(notes)` returns `7`,
    the highest index you can access is `6` (because array indexes start at `0`, not
    `1`). If you try to access index `7`, you’ll get a panic.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这仍然存在错误的可能性。如果`len(notes)`返回`7`，则最高可访问的索引是`6`（因为数组索引从`0`开始，而不是`1`）。如果尝试访问索引`7`，将会导致panic。
- en: '![image](assets/f0156-03.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0156-03.png)'
- en: Looping over arrays safely with “for...range”
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全地使用“for...range”循环遍历数组
- en: An even safer way to process each element of an array is to use the special
    `for`...`range` loop. In the `range` form, you provide a variable that will hold
    the integer index of each element, another variable that will hold the value of
    the element itself, and the array you want to loop over. The loop will run once
    for each element in the array, assigning the element’s index to your first variable
    and the element’s value to your second variable. You can add code to the loop
    block to process those values.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 更安全的处理数组每个元素的方式是使用特殊的`for`...`range`循环。在`range`形式中，你提供一个变量来保存每个元素的整数索引，另一个变量来保存元素的值，以及你要遍历的数组。循环将针对数组中的每个元素运行一次，将元素的索引分配给你的第一个变量，将元素的值分配给你的第二个变量。你可以在循环块中添加代码来处理这些值。
- en: '![image](assets/f0157-01.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0157-01.png)'
- en: This form of the `for` loop has no messy init, condition, and post expressions.
    And because the element value is automatically assigned to a variable for you,
    there’s no risk that you’ll accidentally access an invalid array index. Because
    it’s safer and easier to read, you’ll see the `for` loop’s `range` form used most
    often when working with arrays and other collections.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这种形式的`for`循环没有杂乱的初始化、条件和后置表达式。因为元素值会自动分配给一个变量，所以不会出现意外访问无效数组索引的风险。由于更安全且易于阅读，因此在处理数组和其他集合时，你经常会看到`for`循环的`range`形式被使用。
- en: 'Here’s our previous code that prints each value in our array of musical notes,
    updated to use a `for` ... `range` loop:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们之前的代码，用`for`...`range`循环打印我们的音符数组中的每个值：
- en: '![image](assets/f0157-02.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0157-02.png)'
- en: The loop runs seven times, once for each element of the `notes` array. For each
    element, the `index` variable gets set to the element’s index, and the `note`
    variable gets set to the element’s value. Then we print the index and value.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 循环运行七次，每次针对`notes`数组的一个元素。对于每个元素，`index`变量被设置为元素的索引，`note`变量被设置为元素的值。然后我们打印索引和值。
- en: Using the blank identifier with “for...range” loops
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用“for...range”循环结合空白标识符
- en: 'As always, Go requires that you use every variable you declare. If we stop
    using the `index` variable from our `for`...`range` loop, we’ll get a compile
    error:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 与往常一样，Go要求您使用您声明的每个变量。如果我们停止使用来自我们的`for`...`range`循环的`index`变量，我们将会得到一个编译错误：
- en: '![image](assets/f0158-01.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0158-01.png)'
- en: 'And the same would be true if we didn’t use the variable that holds the element
    value:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不使用保存元素值的变量，情况也是如此：
- en: '![image](assets/f0158-02.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0158-02.png)'
- en: Remember in [Chapter 2](ch02.html#which_code_runs_nextquestcolon_condition),
    when we were calling a function with multiple return values, and we wanted to
    ignore one of them? We assigned that value to the blank identifier (`_`), which
    causes Go to discard that value, without giving a compiler error...
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 记住在[第2章](ch02.html#which_code_runs_nextquestcolon_condition)中，当我们调用一个带有多个返回值的函数，并且我们想忽略其中一个时？我们将该值分配给空白标识符（`_`），这会导致Go丢弃该值，而不会产生编译器错误...
- en: 'We can do the same with values from `for`...`range` loops. If we don’t need
    the index for each array element, we can just assign it to the blank identifier:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以对`for`...`range`循环中的值做同样的处理。如果我们不需要每个数组元素的索引，我们可以将其分配给空白标识符：
- en: '![image](assets/f0158-03.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0158-03.png)'
- en: 'And if we don’t need the value variable, we can assign that to the blank identifier
    instead:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不需要值变量，可以将其分配给空白标识符：
- en: '![image](assets/f0158-04.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0158-04.png)'
- en: Getting the sum of the numbers in an array
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取数组中数字的总和
- en: '![image](assets/f0159-01.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0159-01.png)'
- en: We finally know everything we need to create an array of `float64` values and
    calculate their average. Let’s take the amounts of beef that were used in previous
    weeks, and incorporate them into a program, named `average`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们终于知道了一切，我们需要创建一个`float64`值的数组并计算它们的平均值。让我们取过去几周使用的牛肉量，并将它们整合到一个名为`average`的程序中。
- en: '![image](assets/f0159-02.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0159-02.png)'
- en: The first thing we’ll need to do is set up a program file. In your Go workspace
    directory (the *go* directory within your user’s home directory, unless you’ve
    set the `GOPATH` environment variable), create the following nested directories
    (if they don’t already exist). Within the innermost directory, *average*, save
    a file named *main.go*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要做的是设置一个程序文件。在您的Go工作空间目录（用户主目录内的*go*目录，除非您设置了`GOPATH`环境变量），创建以下嵌套目录（如果它们不存在）。在最内层的*average*目录中，保存一个名为*main.go*的文件。
- en: '![image](assets/f0159-03.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0159-03.png)'
- en: Now let’s write our program code within the *main.go* file. Since this will
    be an executable program, our code will be part of the `main` package, and will
    reside in the `main` function.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在*main.go*文件中编写我们的程序代码。由于这将是一个可执行程序，我们的代码将属于`main`包，并位于`main`函数中。
- en: We’ll start by just calculating the total for the three sample values; we can
    go back later to calculate the average. We use an array literal to create an array
    of three `float64` values, prepopulated with the sample values from prior weeks.
    We declare a `float64` variable named `sum` to hold the total, starting with a
    value of `0`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先只计算三个样本值的总和；稍后我们可以返回计算平均值。我们使用数组字面量创建一个包含三个`float64`值的数组，预先填充了以前几周的样本值。我们声明一个名为`sum`的`float64`变量来保存总和，从`0`开始。
- en: Then we use a `for`...`range` loop to process each number. We don’t need the
    element indexes, so we discard them using the `_` blank identifier. We add each
    number to the value in `sum`. After we’ve totaled all the values, we print `sum`
    before exiting.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用`for`...`range`循环处理每个数字。我们不需要元素索引，因此使用`_`空白标识符将其丢弃。我们将每个数字添加到`sum`中。在我们计算出所有值的总和后，我们在退出前打印`sum`。
- en: '![image](assets/f0159-04.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0159-04.png)'
- en: Let’s try compiling and running our program. We’ll use the `go install` command
    to create an executable. We’re going to need to provide our executable’s import
    path to `go install`. If we used this directory structure...
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试编译和运行我们的程序。我们将使用`go install`命令创建一个可执行文件。我们将需要向`go install`提供我们可执行文件的导入路径。如果我们使用这个目录结构...
- en: '![image](assets/f0160-01.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0160-01.png)'
- en: '...that means the import path for our package will be `[github.com/headfirstgo/average](http://github.com/headfirstgo/average)`.
    So, from your terminal, type:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '...这意味着我们包的导入路径将是`[github.com/headfirstgo/average](http://github.com/headfirstgo/average)`。因此，从您的终端输入：'
- en: '`go install github.com/headfirstgo/average`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`go install github.com/headfirstgo/average`'
- en: You can do so from within any directory. The `go` tool will look for a *[github.com/headfirstgo/average](http://github.com/headfirstgo/average)*
    directory within your workspace’s *src* directory, and compile any *.go* files
    it contains. The resulting executable will be named `average`, and will be stored
    in the *bin* directory within your Go workspace.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从任何目录中执行此操作。`go`工具将在你的工作空间的*src*目录中查找*[github.com/headfirstgo/average](http://github.com/headfirstgo/average)*目录，并编译其中包含的所有*.go*文件。生成的可执行文件将命名为`average`，并存储在你的
    Go 工作空间的*bin*目录中。
- en: Then, you can use the **`cd`** command to change to the *bin* directory within
    your Go workspace. Once you’re in *bin*, you can run the executable by typing
    **`./average`** (or **`average.exe`** on Windows).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以使用**`cd`**命令切换到你的 Go 工作空间内的*bin*目录。一旦进入*bin*目录，你可以通过输入**`./average`**（或在
    Windows 上是**`average.exe`**）来运行可执行文件。
- en: '![image](assets/f0160-02.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0160-02.png)'
- en: The program will print the total of the three values from our array and exit.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序将打印出我们数组中三个值的总和并退出。
- en: Getting the average of the numbers in an array
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取数组中数字的平均值
- en: We’ve got our `average` program printing the total of the array’s values, so
    now let’s update it to print the actual average. To do that, we’ll divide the
    total by the array’s length.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`average`程序已经打印出了数组值的总和，现在让我们更新它以打印实际的平均值。为此，我们将总和除以数组的长度。
- en: Passing the array to the `len` function returns an `int` value with the array
    length. But since the total in the `sum` variable is a `float64` value, we’ll
    need to convert the length to a `float64` as well so we can use them together
    in a math operation. We store the result in the `sampleCount` variable. Once that’s
    done, all we have to do is divide `sum` by `sampleCount`, and print the result.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 将数组传递给`len`函数返回一个`int`值，表示数组的长度。但由于`sum`变量中的总数是`float64`值，我们也需要将长度转换为`float64`，这样才能在数学运算中使用。我们将结果存储在`sampleCount`变量中。完成后，我们只需将`sum`除以`sampleCount`，并打印结果即可。
- en: '![image](assets/f0161-01.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0161-01.png)'
- en: 'Once the code is updated, we can repeat the previous steps to see the new result:
    run **`go install`** to recompile the code, change to the *bin* directory, and
    run the updated `average` executable. Instead of the sum of the values in the
    array, we’ll see the average.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦代码更新完成，我们可以重复之前的步骤来查看新的结果：运行**`go install`**重新编译代码，切换到*bin*目录，并运行更新后的`average`可执行文件。现在，我们将看到数组中值的平均数，而不是它们的总和。
- en: '![image](assets/f0161-02.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0161-02.png)'
- en: Pool Puzzle
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 池谜题
- en: '![image](assets/chair.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/chair.png)'
- en: Your **job** is to take code snippets from the pool and place them into the
    blank lines in this code. **Don’t** use the same snippet more than once, and you
    won’t need to use all the snippets. Your **goal** is to make a program that will
    print the index and value of all the array elements that fall between `10` and
    `20` (it should match the output shown).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你的**工作**是从池中获取代码片段，并将它们放入这段代码中的空白行中。**不要**重复使用相同的片段，也不需要使用所有的片段。你的**目标**是创建一个程序，它将打印数组元素中介于`10`和`20`之间的索引和值（应与显示的输出匹配）。
- en: '![image](assets/f0162-01.png)![image](assets/f0162-02.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0162-01.png)![image](assets/f0162-02.png)'
- en: '**Note: each snippet from the pool can only be used once!**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：每个来自池中的片段只能使用一次！**'
- en: '![image](assets/arrow.png) Answers in [“Pool Puzzle Solution”](#pool_puzzle_Solution_3).'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](assets/arrow.png) 答案在[“池谜题解答”](#pool_puzzle_Solution_3)中。'
- en: Reading a text file
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取文本文件
- en: '![image](assets/f0163-01a.png)![image](assets/f0163-01.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0163-01a.png)![image](assets/f0163-01.png)'
- en: That’s true—a program where users have to edit and compile the source code themselves
    isn’t very user-friendly.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 那是真的 — 用户必须自行编辑和编译源代码的程序并不是很用户友好。
- en: Previously, we’ve used the standard library’s `os` and `bufio` packages to read
    data a line at a time from the keyboard. We can use the same packages to read
    data a line at a time from text files. Let’s go on a brief detour to learn how
    to do that.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，我们使用标准库的`os`和`bufio`包逐行从键盘读取数据。我们可以使用相同的包来逐行从文本文件中读取数据。让我们稍作偏离，学习如何做到这一点。
- en: Then, we’ll come back and update the `average` program to read its numbers in
    from a text file.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将回来更新`average`程序，以从文本文件中读取数值。
- en: In your favorite text editor, create a new file named *data.txt*. Save it somewhere
    *outside* of your Go workspace directory for now.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在你喜欢的文本编辑器中，创建一个名为*data.txt*的新文件。现在，将其保存在你的 Go 工作空间目录之外的某个地方。
- en: Within the file, enter our three floating-point sample values, one number per
    line.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件中，输入我们的三个浮点数样本值，每行一个数字。
- en: '![image](assets/f0163-02.png)![image](assets/f0163-01a.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0163-02.png)![image](assets/f0163-01a.png)'
- en: Before we can update our program to average numbers from a text file, we need
    to be able to read the file’s contents. To start, let’s write a program that only
    reads the file, and then we’ll incorporate what we learn into our averaging program.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们更新程序以计算文本文件中数字的平均值之前，我们需要能够读取文件的内容。首先，让我们编写一个仅读取文件的程序，然后我们将所学的内容整合到我们的平均值程序中。
- en: '![image](assets/f0164-01.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0164-01.png)'
- en: In the same directory as *data.txt*, create a new program named *readfile.go*.
    We’ll just be running *readfile.go* with `go run`, rather than installing it,
    so it’s okay to save it outside of your Go workspace directory. Save the following
    code in *readfile.go*. (We’ll take a closer look at how this code works on the
    next page.)
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在与*data.txt*相同的目录中创建一个名为*readfile.go*的新程序。我们将只用`go run`运行*readfile.go*，所以可以将它保存在Go工作区目录之外。将以下代码保存在*readfile.go*中。（我们将在下一页详细查看这段代码的工作原理。）
- en: '![image](assets/f0164-02.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0164-02.png)'
- en: Then, from your terminal, change to the directory where you saved the two files,
    and run **`go run readfile.go`**. The program will read the contents of *data.txt*,
    and print them out.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从您的终端，切换到保存了这两个文件的目录，并运行**`go run readfile.go`**。该程序将读取*data.txt*的内容，并将其打印出来。
- en: '![image](assets/f0164-03.png)![image](assets/f0163-01a.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0164-03.png)![image](assets/f0163-01a.png)'
- en: Our test *readfile.go* program is successfully reading the lines of the *data.txt*
    file and printing them out. Let’s take a closer look at how the program works.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试*readfile.go*程序成功读取了*data.txt*文件的行并将其打印出来。让我们更仔细地看看程序是如何工作的。
- en: 'We start by passing a string with the name of the file we want to open to the
    `os.Open` function. Two values are returned from `os.Open`: a pointer to an `os.File`
    value representing the opened file, and an `error` value. As we’ve seen with so
    many other functions, if the `error` value is `nil` it means the file was opened
    successfully, but any other value means there was an error. (This could happen
    if the file is missing or unreadable.) If that’s the case, we log the error message
    and exit the program.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将要打开的文件名作为字符串传递给`os.Open`函数。`os.Open`将返回两个值：指向打开文件的`os.File`值的指针，和一个`error`值。与许多其他函数一样，如果`error`值为`nil`，表示文件成功打开；否则，表示出现错误（例如文件丢失或不可读）。如果出现错误，我们将记录错误消息并退出程序。
- en: '![image](assets/f0165-01.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0165-01.png)'
- en: Then we pass the `os.File` value to the `bufio.NewScanner` function. That will
    return a `bufio.Scanner` value that reads from the file.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将`os.File`值传递给`bufio.NewScanner`函数。这将返回一个从文件中读取的`bufio.Scanner`值。
- en: '![image](assets/f0165-02.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0165-02.png)'
- en: The `Scan` method on `bufio.Scanner` is designed to be used as part of a `for`
    loop. It will read a single line of text from the file, returning `true` if it
    read data successfully and `false` if it did not. If `Scan` is used as the condition
    on a `for` loop, the loop will continue running as long as there is more data
    to be read. Once the end of the file is reached (or there’s an error), `Scan`
    will return `false`, and the loop will exit.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`bufio.Scanner`上的`Scan`方法设计成作为`for`循环的一部分使用。它将从文件中读取一行文本，如果成功读取数据则返回`true`，如果没有则返回`false`。如果在`for`循环的条件中使用`Scan`，则循环将继续运行，直到没有更多数据可读取为止。一旦到达文件的末尾（或出现错误），`Scan`将返回`false`，循环将退出。'
- en: After calling the `Scan` method on the `bufio.Scanner`, calling the `Text` method
    returns a string with the data that was read. For this program, we simply call
    `Println` within the loop to print each line out.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在`bufio.Scanner`上调用`Scan`方法后，调用`Text`方法将返回一个包含读取数据的字符串。对于这个程序，我们只需在循环内调用`Println`来打印每一行。
- en: '![image](assets/f0165-03.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0165-03.png)'
- en: Once the loop exits, we’re done with the file. Keeping files open consumes resources
    from the operating system, so files should always be closed when a program is
    done with them. Calling the `Close` method on the `os.File` will accomplish this.
    Like the `Open` function, the `Close` method returns an `error` value, which will
    be `nil` unless there was a problem. (Unlike `Open`, `Close` returns only a *single*
    value, as there is no useful value for it to return other than the error.)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 循环退出后，我们已经完成了文件的操作。保持文件打开会消耗操作系统的资源，所以当程序完成文件操作时应该关闭文件。调用`os.File`上的`Close`方法可以实现这一点。与`Open`函数不同，`Close`方法只返回一个`error`值，除非发生问题，否则该值为`nil`。（与`Open`不同，`Close`只返回一个值，因为除了错误之外没有其他有用的返回值。）
- en: '![image](assets/f0165-04.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0165-04.png)'
- en: It’s also possible that the `bufio.Scanner` encountered an error while scanning
    through the file. If it did, calling the `Err` method on the scanner will return
    that error, which we log before exiting.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当`bufio.Scanner`在扫描文件时可能会遇到错误。如果遇到错误，调用扫描器的`Err`方法将返回该错误，我们在退出前将其记录。
- en: '![image](assets/f0165-05.png)![image](assets/f0165-06.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0165-05.png)![image](assets/f0165-06.png)'
- en: Reading a text file into an array
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将文本文件读取到数组中
- en: Our *readfile.go* program worked great—we were able to read the lines from our
    *data.txt* file in as strings, and print them out. Now we need to convert those
    strings to numbers and store them in an array. Let’s create a package named `datafile`
    that will do this for us.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的*readfile.go*程序运行良好——我们能够将*data.txt*文件中的行作为字符串读取并打印出来。现在我们需要将这些字符串转换为数字并存储在数组中。让我们创建一个名为`datafile`的包来为我们完成这个任务。
- en: '![image](assets/f0166-01.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0166-01.png)'
- en: In your Go workspace directory, create a *datafile* directory within the *headfirstgo*
    directory. Within the *datafile* directory, save a file named *floats.go*. (We
    name it *floats.go* because this file will contain code that reads floating-point
    numbers from files.)
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的Go工作空间目录中，在*headfirstgo*目录下创建一个*datafile*目录。在*datafile*目录中，保存一个名为*floats.go*的文件。（我们将其命名为*floats.go*，因为此文件将包含从文件中读取浮点数的代码。）
- en: '![image](assets/f0166-02.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0166-02.png)'
- en: Within *floats.go*, save the following code. A lot of this is based on code
    from our test *readfile.go* program; we’ve grayed out the parts where the code
    is identical. We’ll explain the new code in detail on the next page.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在*floats.go*中，保存以下代码。其中很多内容基于我们测试的*readfile.go*程序中的代码；我们将代码相同的部分标记为灰色。我们将在下一页详细解释新代码。
- en: '![image](assets/f0166-03.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0166-03.png)'
- en: We want to be able to read from files other than *data.txt*, so we accept the
    name of the file we should open as a parameter. We set the function up to return
    two values, an array of `float64` values and an `error` value. Like most functions
    that return an error, the first return value should only be considered usable
    if the error value is `nil`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望能够从除了*data.txt*之外的文件中读取，因此我们将文件名作为参数接受。我们设置函数返回两个值，一个是`float64`值的数组，另一个是`error`值。像大多数返回错误的函数一样，只有当错误值为`nil`时，才应该考虑使用第一个返回值。
- en: '![image](assets/f0167-01.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0167-01.png)'
- en: Next we declare an array of three `float64` values that will hold the numbers
    we read from the file.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们声明一个包含三个`float64`值的数组，用于保存从文件中读取的数字。
- en: '![image](assets/f0167-02.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0167-02.png)'
- en: Just like in *readfile.go*, we open the file for reading. The difference is
    that instead of a hardcoded string of `"data.txt"`, we open whatever filename
    was passed to the function. If an error is encountered, we need to return an array
    along with the error value, so we just return the `numbers` array (even though
    nothing has been assigned to it yet).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在*readfile.go*中一样，我们打开文件进行读取。不同之处在于，我们不是使用硬编码的字符串`"data.txt"`，而是打开传递给函数的任何文件名。如果遇到错误，我们需要返回一个数组以及错误值，因此我们只返回`numbers`数组（即使尚未为其分配任何内容）。
- en: '![image](assets/f0167-03.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0167-03.png)'
- en: We need to know which array element to assign each line to, so we create a variable
    to track the current index.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要知道将每一行分配给哪个数组元素，因此我们创建一个变量来跟踪当前索引。
- en: '![image](assets/f0167-04.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0167-04.png)'
- en: 'The code to set up a `bufio.Scanner` and loop over the file’s lines is identical
    to the code from *readfile.go*. The code within the loop is different, however:
    we need to call `strconv.ParseFloat` on the string read from the file to convert
    it to a `float64`, and assign the result to the array. If `ParseFloat` results
    in an error, we need to return that. And if the parsing is successful, we need
    to increment `i` so that the next number is assigned to the next array element.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`bufio.Scanner`并循环遍历文件的行的代码与*readfile.go*中的代码相同。然而，循环内的代码不同：我们需要对从文件中读取的字符串调用`strconv.ParseFloat`来将其转换为`float64`，并将结果分配给数组。如果`ParseFloat`导致错误，我们需要返回该错误。如果解析成功，我们需要增加`i`，以便将下一个数字分配给下一个数组元素。
- en: '![image](assets/f0167-05.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0167-05.png)'
- en: Our code to close the file and report any errors is identical to *readfile.go*,
    except that we return any errors instead of exiting the program directly. If there
    are no errors, the end of the `GetFloats` function will be reached, and the array
    of `float64` values will be returned along with a `nil` error.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们关闭文件并报告任何错误的代码与*readfile.go*完全相同，只是我们返回任何错误而不是直接退出程序。 如果没有错误，将到达`GetFloats`函数的末尾，并将`float64`值数组与`nil`错误一起返回。
- en: '![image](assets/f0167-06.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0167-06.png)'
- en: Updating our “average” program to read a text file
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新我们的“average”程序以读取文本文件
- en: We’re ready to replace the hardcoded array in our `average` program with an
    array read in from the *data.txt* file!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备好用从*data.txt*文件中读取的数组替换`average`程序中的硬编码数组了！
- en: '![image](assets/f0168-01.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0168-01.png)'
- en: 'Writing our `datafile` package was the hard part. Here in the main program,
    we only need to do three things:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 编写我们的`datafile`包是难点所在。 在主程序中，我们只需要做三件事：
- en: Update our `import` declaration to include the `datafile` and `log` packages.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新我们的`import`声明以包括`datafile`和`log`包。
- en: Replace our array of hardcoded numbers with a call to `datafile.GetFloats("data.txt")`.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用`datafile.GetFloats("data.txt")`替换我们的硬编码数字数组。
- en: Check whether we got an error back from `GetFloats`, and log it and exit if
    so.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查我们是否从`GetFloats`得到了错误，并记录并退出。
- en: All the remaining code will be exactly the same.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 所有剩余的代码都完全相同。
- en: '![image](assets/f0168-02.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0168-02.png)'
- en: 'We can compile the program using the same terminal command as before:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用与之前相同的终端命令来编译程序：
- en: '`go install github.com/headfirstgo/average`'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`go install github.com/headfirstgo/average`'
- en: Since our program imports the `datafile` package, that will automatically be
    compiled as well.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们的程序导入了`datafile`包，所以它也会被自动编译。
- en: '![image](assets/f0169-01.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0169-01.png)'
- en: We’ll need to move the *data.txt* file to the *bin* subdirectory of the Go workspace.
    That’s because we’ll be running the `average` executable from that directory,
    and it will look for *data.txt* in the same directory. Once you’ve moved *data.txt*,
    change into that *bin* subdirectory.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将*data.txt*文件移动到Go工作区的*bin*子目录中。 这是因为我们将从该目录运行`average`可执行文件，并且它将在同一目录中寻找*data.txt*。
    移动*data.txt*后，切换到该*bin*子目录。
- en: '![image](assets/f0169-02.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0169-02.png)'
- en: When we run the `average` executable, it will load the values from *data.txt*
    into an array, and use them to calculate the average.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行`average`可执行文件时，它将从*data.txt*中加载值到一个数组中，并用它们来计算平均值。
- en: '![image](assets/f0169-03.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0169-03.png)'
- en: If we change the values in *data.txt*, the average will change as well.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们更改*data.txt*中的值，平均值也会随之改变。
- en: '![image](assets/f0169-04.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0169-04.png)'
- en: Our program can only process three values!
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的程序只能处理三个值！
- en: But there’s a problem—the `average` program only runs if there are three or
    fewer lines in *data.txt*. If there are four or more, `average` will panic and
    exit when it’s run!
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 但是有个问题——如果*data.txt*中有四行或更多行，`average`程序将会恐慌并退出！
- en: '![image](assets/f0170-01.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0170-01.png)'
- en: When a Go program panics, it outputs a report with information on the line of
    code where the problem occurred. In this case, it looks like the problem is on
    line 20 of the *floats.go* file.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个 Go 程序发生恐慌时，它会输出一个报告，其中包含问题发生的代码行的信息。 在这种情况下，问题似乎出现在*floats.go*文件的第20行。
- en: If we look at line 20 of *floats.go*, we’ll see that it’s the part of the `GetFloats`
    function where numbers from the file get added to the array!
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看*floats.go*的第20行，我们会看到那是`GetFloats`函数中将文件中的数字添加到数组的部分！
- en: '![image](assets/f0170-02.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0170-02.png)'
- en: Remember when a mistake in a previous code sample led a program to attempt to
    access an eighth element of a seven-element array? That program panicked and exited,
    too.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得之前代码示例中的错误导致程序尝试访问七元素数组的第八个元素吗？那个程序也会恐慌并退出。
- en: '![image](assets/f0171-01.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0171-01.png)'
- en: The same problem is happening in our `GetFloats` function. Because we declared
    that the `numbers` array holds three elements, that’s *all* it can hold. When
    the fourth line of the *data.txt* file is reached, it attempts to assign to a
    *fourth* element of `numbers`, which results in a panic.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`GetFloats`函数中出现了相同的问题。 因为我们声明`numbers`数组只能容纳三个元素，所以它只能容纳三个元素。 当达到*data.txt*文件的第四行时，它尝试为`numbers`的*第四个*元素赋值，结果导致恐慌。
- en: '![image](assets/f0171-02.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图像](assets/f0171-02.png)'
- en: Go arrays are fixed in size; they can’t grow or shrink. But the *data.txt* file
    can have as many lines as the user wants to add. We’ll see a solution for this
    dilemma in the next chapter!
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Go 中的数组大小固定；它们无法增长或缩小。但是 *data.txt* 文件可以添加用户想要添加的任意行数。我们将在下一章节看到解决这一困境的方法！
- en: Your Go Toolbox
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的 Go 工具箱
- en: '![image](assets/f0172-01.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0172-01.png)'
- en: '**That’s it for [Chapter 5](#on_the_listcolon_arrays)! You’ve added arrays
    to your toolbox.**'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第五章](#on_the_listcolon_arrays)就到这里！你已经把数组加入了你的工具箱。**'
- en: '![image](assets/f0172-02.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0172-02.png)'
- en: Pool Puzzle Solution
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 池谜题解答
- en: '![image](assets/f0173-02.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0173-02.png)'
