- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 序言
- en: Welcome to the pragmatic software development world, where engineers are not
    afraid of ambitious performance goals. Where the change in requirements or unexpected
    efficiency issues is handled without stress, where code is optimized tactically
    and effectively, based on data, yet the codebase is kept simple and easy to read,
    maintain, and extend. Wait, is this even possible?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到务实软件开发的世界，工程师们不会害怕雄心勃勃的性能目标。在这里，对需求变化或者意外的效率问题处理得无压力，代码优化基于数据进行战术性和有效性的提升，同时代码库保持简洁易读、易于维护和扩展。等等，这真的可能吗？
- en: Yes, and I will show you how! The good news is that if you bought this book,
    you are already halfway there—it means you acknowledge the problem and are open
    to learning more! The bad news is that, while I tried to distill the knowledge
    to only what’s necessary, there are still 11 chapters to go through. I think *Efficient
    Go* is unique in this regard as it is not a quick tutorial. Instead, it is a complete
    guide to writing efficient yet pragmatic software that goes through all aspects
    I wish I had known when I started my career.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我会告诉你如何做到！好消息是，如果你买了这本书，你已经走过了一半路——这意味着你意识到了问题，并且愿意学习更多！坏消息是，尽管我尝试将知识压缩到仅需的部分，但还有11章要阅读。我认为*Efficient
    Go*在这方面很独特，因为它不是一个快速教程，而是一本完整指南，讲述了在我职业生涯开始时我希望了解的所有高效而务实的软件编写方面。
- en: In this book, you will undoubtedly learn a lot about my favorite programming
    language, Go, and how to optimize it. But don’t let the title of this book fool
    you. While I use Go as the example language to show the optimization mindset and
    observability patterns, 8 out of 11 chapters of this book are language agnostic.
    You can use the same techniques to improve software written in any other language
    like Java, C#, Scala, Python, C++, Rust, or Haskell.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，你无疑会学到很多关于我最喜爱的编程语言Go以及如何优化它的内容。但不要让这本书的标题愚弄你。虽然我以Go语言作为示例语言展示优化思维和可观察性模式，但这本书的11章中有8章与编程语言无关。你可以使用相同的技术来改进任何其他语言编写的软件，如Java、C#、Scala、Python、C++、Rust或Haskell。
- en: Finally, if you expected a full list of low-level optimization tricks, this
    is not the right book. Firstly, optimizations do not generalize well. The fact
    that someone unrolled the loop or used a pointer in their struct field and achieved
    better efficiency does not mean it will be helpful if we do the same! We will
    go through some optimization tricks, but I emphasize complete knowledge about
    efficiency in pragmatic software development instead.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你期待看到一整套低级优化技巧的完整清单，那么这本书可能并不适合你。首先，优化并不是普适的。有人展开了循环或者在结构体字段中使用了指针并且获得了更好的效率，并不意味着我们这样做也会有帮助！我们会介绍一些优化技巧，但我更强调在实用软件开发中对效率的完整了解。
- en: Secondly, “low-level” dangerous tricks are often not needed. In most cases,
    an awareness of simple points where your program wastes time and resources is
    enough to fulfill your efficiency and scalability goals cheaply and effectively.
    Furthermore, you will learn that in most cases, there is no need to rewrite your
    program to C++, Rust, or Assembly to have an efficient solution!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，“低级”危险的技巧通常是不需要的。在大多数情况下，只需意识到程序在哪些简单的地方浪费时间和资源，就足以实现你的效率和可伸缩性目标，而且是廉价和有效的。此外，你会了解到在大多数情况下，无需将程序重写为C++、Rust或汇编语言来获得高效的解决方案！
- en: Before we start, let’s go through the main goals behind this book and why I
    found it necessary to focus my time on the subject of efficiency. You will also
    learn how to get the most out of this book and effectively use it in your software
    development tasks.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，让我们梳理一下这本书背后的主要目标以及我为何认为有必要把时间集中在效率主题上。你还将学会如何在你的软件开发任务中最大化地利用这本书。
- en: Why I Wrote This Book
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么写这本书
- en: I spent around 1,200 hours writing *Efficient Go*, so the choice to deliver
    such a book was not spur-of-the-moment. In the era of social media, YouTube, and
    TikTok, book writing and reading might feel outdated, but in my experience, modern
    media tend to oversimplify topics. You have to condense those to an absolute minimum
    not to lose viewers and monetization. It leads to [the wrong incentives](https://oreil.ly/A8dCv),
    which generally collide with what I wanted to achieve with this book.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我花了大约1200小时写作*Efficient Go*，所以决定出版这样一本书并非一时冲动。在社交媒体、YouTube和TikTok盛行的时代，书写和阅读可能显得过时，但依我看，现代媒体往往会过度简化主题。你必须将它们压缩到绝对的最低程度，以免失去观众和变现机会。这会导致[错误的激励](https://oreil.ly/A8dCv)，这与我希望通过这本书实现的目标一般相悖。
- en: 'My mission here is straightforward: I want the software I use or depend on
    to be better! I want software project contributors and maintainers to understand
    their code’s efficiency and how to assess it. I want them to reliably review my
    or others’ pull requests with efficiency improvements. I want people around me
    to know how to handle performance issues professionally instead of building a
    stressful atmosphere. I want users and stakeholders to be cautious with the benchmarks
    and cheap marketing we see in the industry. Finally, I want leaders, directors,
    and product managers to approach software efficiency topics maturely with the
    awareness of how to form pragmatic efficiency requirements that help engineers
    to deliver excellent products.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我的使命很简单：我希望我使用或依赖的软件能更好！我希望软件项目的贡献者和维护者能理解他们代码的效率以及如何评估它。我希望他们能可靠地审查我的或他人的 pull
    request，并带来效率的改进。我希望周围的人们能够专业地处理性能问题，而不是制造紧张氛围。我希望用户和利益相关者能够谨慎对待我们在行业中看到的基准测试和廉价营销。最后，我希望领导、主管和产品经理们能成熟地对待软件效率主题，并意识到如何制定有助于工程师提供优秀产品的务实效率要求。
- en: I also consider this book a small contribution toward more sustainable software.
    Every wasted CPU time and memory wastes a significant amount of your business’s
    money. However, it also wastes energy and hardware, which has a serious environmental
    effect. So saving money and the planet at the same time while enabling better
    value for your business is not a bad outcome of the skills you will learn here.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我还将这本书视为朝着更可持续软件的小贡献。每一次浪费的 CPU 时间和内存都会浪费你公司的大量资金。但同时也会浪费能源和硬件，这对环境有着严重的影响。因此，在学习这里的技能时，同时节省金钱和拯救地球，为你的业务创造更好的价值，并非是一个坏的结果。
- en: I figured out that writing a book is the best way to achieve this goal. It’s
    easier than continuously explaining the same nuances, tooling, and techniques
    in my daily work, open source, and conferences!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现写书是实现这一目标的最佳途径。它比在我的日常工作、开源项目和会议中不断解释相同的微妙之处、工具和技术要容易得多！
- en: How I Gathered This Knowledge
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我是如何获得这些知识的。
- en: I built my experience toward efficiency topics and high-quality software development
    through a lot of practice, mistakes, experiments, [implicit mentors](https://oreil.ly/7IFBd),
    and research.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通过大量实践、错误、实验、[隐性导师](https://oreil.ly/7IFBd)和研究，我积累了在效率主题和高质量软件开发方面的经验。
- en: I was 29 years old when I started writing this book. That might not feel like
    much experience, but I started a full-time, professional software development
    career when I was 19\. I did full-time computer science studies in parallel to
    work at Intel around software-defined infrastructure (SDI). I initially coded
    in Python around the [OpenStack project](https://www.openstack.org), then in C++
    including contributions to the popular-back-then [Mesos](https://mesos.apache.org)
    project under the supervision of amazing engineers from [Mesosphere](https://oreil.ly/yUHzn)
    and Twitter. Finally, I moved to develop Go around [Kubernetes](https://kubernetes.io)
    and fell in love with this language.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我在开始写这本书时29岁。这可能不算是很多经验，但我在19岁开始了全职专业软件开发职业生涯。我在 Intel 做软件定义基础设施（SDI）的工作时，也同时进行了全职的计算机科学学习。最初我在
    [OpenStack 项目](https://www.openstack.org) 中使用 Python 进行编码，然后在 [Mesos 项目](https://mesos.apache.org)
    中贡献了一些代码，这是当时很受欢迎的项目，得益于来自 [Mesosphere](https://oreil.ly/yUHzn) 和 Twitter 的优秀工程师的指导。最后，我转向了使用
    [Kubernetes](https://kubernetes.io) 开发 Go 语言，并且深深地喜爱上了这门语言。
- en: I spent a nontrivial amount of time at Intel on node [oversubscription feature](https://oreil.ly/uPnb7)
    with noisy neighbor mitigations. Generally, oversubscription allows running more
    programs on a single machine than would be otherwise possible. This can work since
    statistically, all programs rarely use all of their reserved resources simultaneously.
    Looking at this now from a later perspective, it is usually easier and more effective
    to save money by starting with software optimization than by using complex algorithms
    like this.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Intel 我花了不少时间在处理带有噪声邻居缓解的节点[超额订阅功能](https://oreil.ly/uPnb7)上。通常情况下，超额订阅允许在单台机器上运行比原本可能的程序更多。这种做法是可行的，因为统计上，所有程序很少同时使用其保留资源的全部。从后来的视角来看，通常通过软件优化来节省金钱更容易更有效，而不是使用这样的复杂算法。
- en: In 2016, I moved to London to work for a gaming start-up. I worked with past
    employees of Google, Amazon, Microsoft, and Facebook to develop and operate a
    global gaming platform. We were developing microservices, mostly in Go running
    on dozens of Kubernetes clusters worldwide. This is where I learned a lot about
    distributed systems, site reliability engineering, and monitoring. Perhaps this
    was when I got addicted to amazing tooling around observability, which is key
    to achieving pragmatic efficiency and explained in [Chapter 6](ch06.html#ch-observability).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 2016年，我搬到伦敦加入一家游戏初创公司工作。我与 Google、Amazon、Microsoft 和 Facebook 的前员工合作开发和运营全球游戏平台。我们开发了大量基于
    Go 的微服务，在全球数十个 Kubernetes 集群上运行。这是我学习分布式系统、站点可靠性工程和监控的重要时期。也许从那时起，我开始沉迷于关于观测性的惊人工具，这是实现实用效率的关键，也在《第
    6 章》中有详细解释。
- en: My passion for good visibility of the running software translated to becoming
    an expert in using and developing a popular, open source, time-series database
    for monitoring purposes called [Prometheus](https://prometheus.io). Eventually,
    I became an official maintainer and started multiple other Go open source projects
    and libraries. Finally, I had an opportunity to cocreate with Fabian Reinartz
    a large distributed time-series database in the open source called [Thanos](https://thanos.io).
    I would not be surprised if some of my code runs in your company infrastructure!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我对软件运行的良好可见性的热情转化为成为一位使用和开发流行的开源时间序列数据库用于监控的专家，该数据库称为[Prometheus](https://prometheus.io)。最终，我成为了正式的维护者，并开始多个其他
    Go 开源项目和库。最后，我与 Fabian Reinartz 共同创造了一个名为[Thanos](https://thanos.io)的大型分布式时间序列数据库的开源项目。也许我的一些代码正在您公司的基础设施中运行！
- en: In 2019, I moved to Red Hat, where I work full-time on observability systems
    in open source. This is when I also dived more into continuous profiling solutions,
    which you will learn in this book too.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 2019年，我加入了红帽公司，在开源中全职从事可观测性系统的工作。这也是我更深入研究连续性分析解决方案的时候，你也将在本书中学到这些内容。
- en: I am also active in [the Cloud Native Computing Foundation (CNCF)](https://cncf.io)
    as the ambassador and [observability Technical Advisory Group (TAG)](https://oreil.ly/f9UYG)
    tech lead. In addition, I co-organize conferences and meetups. Finally, with the
    Prometheus and Thanos projects, with the team, we mentor multiple engineers every
    year via the CNCF [mentoring initiatives](https://oreil.ly/rU0bg).^([1](preface01.html#idm45606849001040))
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我还活跃于[云原生计算基金会（CNCF）](https://cncf.io)作为大使和[可观察性技术咨询小组（TAG）](https://oreil.ly/f9UYG)的技术负责人。此外，我还共同组织会议和聚会。最后，通过
    CNCF 的[指导计划](https://oreil.ly/rU0bg)，我与 Prometheus 和 Thanos 项目团队每年指导多位工程师。
- en: I wrote or reviewed thousands of code lines for various software that had to
    run on production, be reliable, and scale. I have taught and mentored over two
    dozen engineers so far. However, perhaps the most insightful was the open source
    work. You interact with diverse people, from different companies and places worldwide,
    with different backgrounds, goals, and needs.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我为各种必须在生产环境运行、可靠且可扩展的软件编写或审查了数千行代码。到目前为止，我已经教导和指导了二十多位工程师。然而，或许最有洞察力的是开源工作。在这里，你与来自世界各地不同公司和地方、背景、目标和需求的多样化人群互动。
- en: 'Overall, I believe we achieved amazing things with the fantastic people I had
    a chance to work with. I was lucky to work in environments where high-quality
    code was more important than decreasing code review delays or reducing time spent
    addressing style issues. We thrived on good system design, code maintainability,
    and readability. We tried to bring those values to open source, and I think we
    did a good job there. However, there is one important thing I would improve if
    I had a chance to write, for instance, the Thanos project again: I would try to
    focus more on the pragmatic efficiency of my code and the algorithms we chose.
    I would focus on having clearer efficiency requirements from the start and invest
    more in benchmarking and profiling.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来看，我认为与我有幸合作的这些了不起的人们一起，我们取得了惊人的成就。我很幸运能够在重视高质量代码胜过减少代码审查延迟或减少处理风格问题花费时间的环境中工作。我们依靠良好的系统设计、代码可维护性和可读性蓬勃发展。我们尝试将这些价值观带到开源项目中，我认为我们在那里做得很好。然而，如果我有机会再次编写比如
    Thanos 项目，有一件重要的事情我会改进：我会更注重我的代码和我们选择的算法的实用效率。我会从一开始就专注于更清晰的效率要求，并投入更多精力进行基准测试和性能分析。
- en: And don’t get me wrong, the Thanos system nowadays is faster and uses much fewer
    resources than some competitors, but it took a lot of time, and there is still
    a massive amount of hardware resources we could use less. We still have many bottlenecks
    that await community attention. However, if I applied the knowledge, techniques,
    and suggestions that you will learn in this book, I believe we could have cut
    the development cost in half, if not more, to have Thanos in the state we have
    today (I hope my ex-boss who paid for this work won’t read that!).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 不要误会，如今的Thanos系统比某些竞争对手更快，且使用的资源远少于他们，但这需要大量时间，并且我们仍然有大量硬件资源可以更节约地利用。我们仍然面临许多等待社区关注的瓶颈。然而，如果我能应用本书中你们将学到的知识、技巧和建议，我相信我们本可以将开发成本减少一半，甚至更多，从而让现在的Thanos处于我们今天拥有的状态（希望我的前老板支付这项工作的人不会读到这一段！）。
- en: My journey showed me how much a book like this was needed. With more people
    programming overall, often without a computer science background, there are plenty
    of mistakes and misconceptions, especially regarding software efficiency. Not
    much literature was available to give us practical answers to our efficiency or
    scaling questions, especially for Go. Hopefully, this book fills that literature
    gap.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我的旅程向我展示了像这样的一本书是多么的必要。随着越来越多的人从事编程，尤其是没有计算机科学背景的人，错误和误解也就更加频繁，特别是关于软件效率的问题。很少有文献能够为我们提供实用的答案，解决我们关于效率或扩展问题的疑虑，尤其是针对Go语言。希望这本书能填补这一文献空白。
- en: Who This Book Is For
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书的读者对象
- en: '*Efficient Go* focuses on giving the tools and knowledge necessary to answer
    when and how to apply efficiency optimization, depending strongly on circumstances
    and your organization’s goals. As a result, the primary audience for this book
    is software developers designing, creating, or changing programs written in Go
    and any other modern language. It should be a software engineer’s job to be an
    expert on ensuring the software they create works within both functional and efficiency
    requirements. Ideally, you have some basic programming skills when starting this
    book.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 《高效Go语言》专注于提供必要的工具和知识，以便回答何时以及如何应用效率优化，这在很大程度上取决于具体情况和你的组织目标。因此，本书的主要受众是设计、创建或修改使用Go语言及其他现代语言编写的程序的软件开发人员。对于确保所创建软件在功能和效率要求内运行的专家来说，这应该是软件工程师的职责。理想情况下，在开始阅读本书时，你应具备一些基本的编程技能。
- en: I believe this book is also useful to those who primarily operate software somebody
    else writes, e.g., DevOps engineers, SRE, sysadmins, and platform teams. There
    are many optimization design levels (as discussed in [“Optimization Design Levels”](ch03.html#ch-conq-opt-levels)).
    Sometimes it makes sense to invest in software optimizations, and sometimes we
    might need to address it on other levels! Moreover, to achieve reliable efficiency,
    software engineers have to benchmark and experiment a lot with production-like
    environments (as explained in [Chapter 6](ch06.html#ch-observability)), which
    usually means close collaboration with platform teams. Finally, the observability
    practices explained in [Chapter 6](ch06.html#ch-observability) are state-of-the-art
    tools recommended for modern platform engineering. I am a strong proponent of
    avoiding differentiating between application performance monitoring (APM) and
    observability for SRE. If you hear that differentiation, it’s mostly coming from
    vendors who want you to pay more or feel like they have more features. As I will
    explain, we can reuse the same tools, instrumentations, and signals across all
    software observations.^([2](preface01.html#idm45606840126384)) Generally, we are
    on the same team—we want to build better products!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信这本书对那些主要操作其他人编写的软件的人也很有用，例如DevOps工程师、SRE、系统管理员和平台团队。优化设计有许多层次（如[《优化设计层次》](ch03.html#ch-conq-opt-levels)所讨论）。有时候在软件优化上投资是有意义的，而有时候我们可能需要在其他层次上解决这个问题！此外，为了实现可靠的效率，软件工程师必须在类似生产环境的环境中进行大量基准测试和实验（正如[第6章](ch06.html#ch-observability)中所解释的那样），这通常意味着与平台团队的紧密合作。最后，[第6章](ch06.html#ch-observability)中解释的可观察性实践是现代平台工程推荐的先进工具。我坚决主张在SRE中避免区分应用程序性能监控（APM）和可观察性。如果你听到这种区分，大多数情况下是来自希望你付更多费用或感觉他们具备更多功能的供应商。正如我将要解释的那样，我们可以在所有软件观察中重复使用相同的工具、仪器和信号。^([2](preface01.html#idm45606840126384))总的来说，我们都是一队——我们希望构建更好的产品！
- en: Finally, I would like to recommend this book to managers, product managers,
    and leaders who want to stay technical and understand how to ensure you are not
    wasting millions of dollars on easy-to-fix efficiency issues within your team!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我想向那些希望保持技术并了解如何确保团队不会因易于解决的效率问题而浪费数百万美元的经理、产品经理和领导推荐这本书！
- en: How This Book Is Organized
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书的组织结构
- en: This book is organized into 11 chapters. In [Chapter 1](ch01.html#ch-efficiency-matters),
    we discuss efficiency and why it matters. Then, in [Chapter 2](ch02.html#ch-go),
    I briefly introduce Go with efficiency in mind. Then, in [Chapter 3](ch03.html#ch-efficiency),
    we will talk about optimizations and how to think about them and approach those.
    Efficiency improvements can take enormous amounts of your time, but systematic
    approaches help you save a lot of time and effort.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本书分为11章。在[第1章](ch01.html#ch-efficiency-matters)，我们讨论效率及其重要性。然后，在[第2章](ch02.html#ch-go)，我简要介绍了Go语言并考虑了效率。然后，在[第3章](ch03.html#ch-efficiency)中，我们将讨论优化以及如何思考和处理它们。效率改进可能会花费大量时间，但系统化方法可以帮助您节省大量时间和精力。
- en: In Chapters [4](ch04.html#ch-hardware) and [5](ch05.html#ch-hardware2), I will
    explain all you need to know about latency, CPU, and memory resources, as well
    as how OS and Go abstract them.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在第[4章](ch04.html#ch-hardware)和[5章](ch05.html#ch-hardware2)中，我将解释关于延迟、CPU和内存资源的所有知识，以及OS和Go如何抽象它们。
- en: Then we will move on to what it means to perform data-driven decisions around
    software efficiency. We will start with [Chapter 6](ch06.html#ch-observability).
    Then we will discuss the reliability of experiments and complexity analysis in
    [Chapter 7](ch07.html#ch-observability2). Finally, I will explain benchmarking
    and profiling techniques in Chapters [8](ch08.html#ch-benchmarking) and [9](ch09.html#ch-observability3).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将进入关于软件效率的数据驱动决策的含义。我们将从[第6章](ch06.html#ch-observability)开始。然后我们将讨论实验的可靠性和复杂性分析在[第7章](ch07.html#ch-observability2)。最后，我将在第[8章](ch08.html#ch-benchmarking)和[9章](ch09.html#ch-observability3)中解释基准测试和性能分析技术。
- en: Last but not least, I will show you various examples of different optimization
    situations in [Chapter 10](ch10.html#ch-opt). Finally, in [Chapter 11](ch11.html#ch-opt2),
    we will take a few learnings and summarize various efficiency patterns and tricks
    we see in the Go community.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我将在[第10章](ch10.html#ch-opt)中展示各种不同优化情况的示例。最后，在[第11章](ch11.html#ch-opt2)，我们将总结Go社区中看到的各种效率模式和技巧。
- en: Conventions Used in This Book
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书使用的约定
- en: 'The following typographical conventions are used in this book:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用以下排版约定：
- en: '*Italic*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*Italic*'
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 指示新术语、URL、电子邮件地址、文件名和文件扩展名。
- en: '`Constant width`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`Constant width`'
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 用于程序清单，以及段落内引用程序元素，如变量或函数名称、数据库、数据类型、环境变量、语句和关键字。
- en: '**`Constant width bold`**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Constant width bold`**'
- en: Shows commands or other text that should be typed literally by the user.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 显示应由用户逐字输入的命令或其他文本。
- en: '*`Constant width italic`*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*`Constant width italic`*'
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 显示应由用户提供值或由上下文确定值替换的文本。
- en: This element signifies a tip or suggestion.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示提示或建议。
- en: This element signifies a general note.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示一般注意事项。
- en: This element indicates a warning or caution.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素指示警告或注意事项。
- en: Using Code Examples
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用代码示例
- en: This book contains code examples that should help you understand the tools,
    techniques, and good practices. All of them are in the Go programming language
    and work with Go version 1.18 and above.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 本书包含代码示例，这些示例应该帮助您了解工具、技术和良好实践。所有这些都是使用Go编程语言编写的，并且与Go版本1.18及以上版本兼容。
- en: You can find all the examples from this book in the executable and tested open
    source GitHub repository [`efficientgo/examples`](https://github.com/efficientgo/examples).
    You are welcome to fork it, use it, and play with the examples I share in this
    book. Everybody learns differently. For some people, it is helpful to import some
    examples into their favorite IDE and play with it by modifying it, running, testing,
    or debugging. Find the way that works for you and feel free to ask questions or
    propose improvements through [GitHub issues or pull requests](https://github.com/efficientgo/examples/issues)!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在可执行且经过测试的开源GitHub存储库[`efficientgo/examples`](https://github.com/efficientgo/examples)中找到本书中的所有示例。欢迎您fork它，使用它，并玩弄我在本书中分享的示例。每个人的学习方式都不同。对于一些人来说，将一些示例导入到他们喜欢的IDE中，并通过修改、运行、测试或调试来玩弄它是有帮助的。找到适合您的方式，并随时通过[GitHub问题或拉取请求](https://github.com/efficientgo/examples/issues)提出问题或提出改进建议！
- en: 'Note that the code examples in this book are simplified for a clear view and
    smaller size. Particularly, the following rules apply:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，本书中的代码示例被简化以便清晰查看和减小体积。特别地，以下规则适用：
- en: If the `Go` package is not specified, assume `package main`.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未指定`Go`包，请假定为`package main`。
- en: If the filename or extension of the example is not specified, assume the file
    has a *.go* extension. If it’s a functional test or microbenchmark, the file name
    has to end with *_test.go*.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未指定示例的文件名或扩展名，请假定文件具有*.go*扩展名。如果是功能测试或微基准测试，则文件名必须以*_test.go*结尾。
- en: '`import` statements are not always provided. In such cases, assume standard
    library or previously introduced packages are imported.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`import`语句并不总是提供。在这种情况下，请假设导入了标准库或先前引入的包。'
- en: Sometimes, I don’t provide imports in the `import` statement but in a comment
    (`// import <URL>`). This is when I want to explain a single nontrivial import
    out of many needed in this code example.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时，我在`import`语句的注释中提供了导入（`// import <URL>`）。这是当我想解释单个非平凡导入时使用的。
- en: A comment with three dots (`// ...`) specifies that some unrelated content was
    removed. This highlights that some logic is there for a function to make sense.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有三个点（`// ...`）的注释指定删除了一些不相关的内容。这突出显示某些逻辑存在是为了函数能够合理运行。
- en: A comment with the `handle error` statement (`// handle error`) indicates that
    error handling was removed for readability. Always handle errors in your code!
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有`handle error`语句（`// handle error`）的注释指示为了可读性已删除了错误处理。请始终在您的代码中处理错误！
- en: This book is here to help you get your job done. In general, if this book offers
    an example code, you may use it in your programs and documentation. You do not
    need to contact us for permission unless you’re reproducing a significant portion
    of the code. For example, writing a program that uses several chunks of code from
    this book does not require permission. Selling or distributing examples from O’Reilly
    books does require permission. Answering a question by citing this book and quoting
    example code does not require permission. However, incorporating a significant
    amount of example code from this book into your product’s documentation does require
    permission.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在帮助您完成工作。一般来说，如果本书提供了示例代码，您可以在自己的程序和文档中使用它。除非您复制了代码的大部分内容，否则无需联系我们请求许可。例如，编写一个使用本书多个代码片段的程序不需要许可。出售或分发O’Reilly书籍中的示例需要许可。通过引用本书并引用示例代码来回答问题不需要许可。但是，将本书中大量示例代码整合到产品文档中需要许可。
- en: We appreciate but generally do not require attribution. An attribution usually
    includes the title, author, publisher, and ISBN. For example, "*Efficient Go*
    by Bartłomiej Płotka (O’Reilly). Copyright 2023 Alloc Limited, 978-1-098-10571-6.”
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们欣赏但通常不要求归属。归属通常包括标题、作者、出版商和ISBN号码。例如，“*Efficient Go* by Bartłomiej Płotka
    (O’Reilly)。版权所有2023 Alloc Limited，978-1-098-10571-6。”
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*permissions@oreilly.com*](mailto:permissions@oreilly.com).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您觉得您对代码示例的使用超出了合理使用范围或上述许可，请随时通过[*permissions@oreilly.com*](mailto:permissions@oreilly.com)与我们联系。
- en: Acknowledgments
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 致谢
- en: As they say, [“the greatness is in the agency of others”](https://oreil.ly/owETM).
    This book is no different. Numerous people helped me directly or indirectly in
    my *Efficient Go* book-writing journey and my career.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 正如他们所说，“伟大在于他人的作为”（[https://oreil.ly/owETM](https://oreil.ly/owETM)）。本书也不例外。许多人在我编写*Efficient
    Go*书籍和我的职业生涯中直接或间接地帮助了我。
- en: First of all, I would love to thank my wife, Kasia—without her support, this
    wouldn’t be possible.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我要感谢我的妻子卡西娅——没有她的支持，这一切都不可能。
- en: 'Thanks to my main tech reviewers, Michael Bang and Saswata Mukherjee, for relentlessly
    checking all the content in detail. Thanks to others who looked at some parts
    of the early content and gave amazing feedback: Matej Gera, Felix Geisendörfer,
    Giedrius Statkevičius, Björn Rabenstein, Lili Cosic, Johan Brandhorst-Satzkorn,
    Michael Hausenblas, Juraj Michalak, Kemal Akkoyun, Rick Rackow, Goutham Veeramachaneni,
    and more!'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 特别感谢我的主要技术审阅人员，Michael Bang和Saswata Mukherjee，他们不知疲倦地详细检查了所有内容。感谢其他早期内容的部分查阅者，提供了出色的反馈：Matej
    Gera、Felix Geisendörfer、Giedrius Statkevičius、Björn Rabenstein、Lili Cosic、Johan
    Brandhorst-Satzkorn、Michael Hausenblas、Juraj Michalak、Kemal Akkoyun、Rick Rackow、Goutham
    Veeramachaneni等等！
- en: 'Furthermore, thanks to the many talented people from the open source community
    who share enormous knowledge in their public content! They might not realize it,
    but they help with such work, including my writing of this book. You will see
    quotes from some of them in this book: Chandler Carruth, Brendan Gregg, Damian
    Gryski, Frederic Branczyk, Felix Geisendörfer, Dave Cheney, Bartosz Adamczewski,
    Dominik Honnef, William (Bill) Kennedy, Bryan Boreham, Halvar Flake, Cindy Sridharan,
    Tom Wilkie, Martin Kleppmann, Rob Pike, Russ Cox, Scott Mayers, and more.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，感谢许多来自开源社区的才华横溢的人们，他们通过他们的公开内容分享了大量知识！他们可能没有意识到，但他们协助了这样的工作，包括我写这本书。您将在本书中看到一些他们的引用：Chandler
    Carruth、Brendan Gregg、Damian Gryski、Frederic Branczyk、Felix Geisendörfer、Dave
    Cheney、Bartosz Adamczewski、Dominik Honnef、William（Bill）Kennedy、Bryan Boreham、Halvar
    Flake、Cindy Sridharan、Tom Wilkie、Martin Kleppmann、Rob Pike、Russ Cox、Scott Mayers等等。
- en: Finally, thanks to the O’Reilly team, especially Melissa Potter, Zan McQuade,
    and Clare Jensen, for amazing help and understanding of delays, moving deadlines,
    and sneaking more content into this book than planned! :)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，感谢O’Reilly团队，特别是Melissa Potter、Zan McQuade和Clare Jensen，他们对推迟、移动截止日期以及将更多内容悄悄添加到本书中的理解和帮助！
    :)
- en: Feedback Is Welcome!
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 欢迎反馈意见！
- en: If you are interested in following my work or the groups I work with or want
    to learn even more in this area, follow me on [Twitter](https://twitter.com/bwplotka)
    or [check my blog](https://www.bwplotka.dev).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对关注我的工作或我所在团队的工作有兴趣，或者想在这一领域进一步学习，请关注我的[Twitter](https://twitter.com/bwplotka)或[查看我的博客](https://www.bwplotka.dev)。
- en: Do not hesitate to reach out to me if you have feedback on my work or the content
    I have produced. I am always open to learning more!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对我的工作或我制作的内容有反馈，请毫不犹豫地与我联系。我随时乐意学习更多！
- en: O’Reilly Online Learning
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: O’Reilly在线学习
- en: For more than 40 years, [*O’Reilly Media*](https://oreilly.com) has provided
    technology and business training, knowledge, and insight to help companies succeed.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 超过40年来，[*O’Reilly Media*](https://oreilly.com)提供技术和商业培训、知识和洞察，帮助公司取得成功。
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, and our online learning platform. O’Reilly’s online learning
    platform gives you on-demand access to live training courses, in-depth learning
    paths, interactive coding environments, and a vast collection of text and video
    from O’Reilly and 200+ other publishers. For more information, visit [*https://oreilly.com*](https://oreilly.com).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们独特的专家和创新者网络通过书籍、文章和我们的在线学习平台分享他们的知识和专长。O’Reilly的在线学习平台为您提供按需访问的实时培训课程、深入学习路径、交互式编码环境，以及来自O’Reilly和其他200多个出版商的广泛的文本和视频集合。欲了解更多信息，请访问[*https://oreilly.com*](https://oreilly.com)。
- en: How to Contact Us
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何联系我们
- en: 'Please address comments and questions concerning this book to the publisher:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请将有关本书的评论和问题发送至出版商：
- en: O’Reilly Media, Inc.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: O’Reilly Media, Inc.
- en: 1005 Gravenstein Highway North
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1005 Gravenstein Highway North
- en: Sebastopol, CA 95472
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sebastopol, CA 95472
- en: 800-998-9938 (in the United States or Canada)
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 800-998-9938（美国或加拿大）
- en: 707-829-0515 (international or local)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0515（国际或本地）
- en: 707-829-0104 (fax)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0104（传真）
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://oreil.ly/efficient-go*](https://oreil.ly/efficient-go).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为本书设有一个网页，列出勘误表、示例和任何额外信息。您可以访问此页面：[*https://oreil.ly/efficient-go*](https://oreil.ly/efficient-go)。
- en: Email [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com) to comment
    or ask technical questions about this book.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 发送电子邮件至[*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com)，对本书发表评论或提出技术问题。
- en: For news and information about our books and courses, visit [*https://oreilly.com*](https://oreilly.com).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 关于我们的书籍和课程的新闻和信息，请访问[*https://oreilly.com*](https://oreilly.com)。
- en: 'Find us on LinkedIn: [*https://linkedin.com/company/oreilly-media*](https://linkedin.com/company/oreilly-media).'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在LinkedIn上找到我们：[*https://linkedin.com/company/oreilly-media*](https://linkedin.com/company/oreilly-media)。
- en: 'Follow us on Twitter: [*https://twitter.com/oreillymedia*](https://twitter.com/oreillymedia).'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在Twitter上关注我们：[*https://twitter.com/oreillymedia*](https://twitter.com/oreillymedia)。
- en: 'Watch us on YouTube: [*https://www.youtube.com/oreillymedia*](https://www.youtube.com/oreillymedia).'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在YouTube上观看我们：[*https://www.youtube.com/oreillymedia*](https://www.youtube.com/oreillymedia)。
- en: ^([1](preface01.html#idm45606849001040-marker)) If you are new to software development
    or open source, talk to us, start contributing, and apply for two months paid
    mentorship. Let me know if you would like to have fun while mentoring others!
    We need good mentors too—it’s important to teach another generation of open source
    maintainers.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](preface01.html#idm45606849001040-marker)) 如果你是新手软件开发者或开源社区的成员，请与我们联系，开始贡献并申请两个月的有偿指导。如果你希望在指导他人时有所乐趣，请告诉我！我们也需要优秀的导师——教导下一代开源项目的维护者是很重要的。
- en: ^([2](preface01.html#idm45606840126384-marker)) I’ve already gotten feedback
    from some experienced people that they did not know you could use metrics to work
    on efficiency and performance improvements! It’s possible, and you will learn
    how here.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](preface01.html#idm45606840126384-marker)) 我已经收到一些经验丰富的人的反馈，他们不知道可以利用指标来提高效率和性能！这是可能的，你将在这里学习如何做到。
