- en: Table of Contents (the real thing)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录（真实版本）
- en: '[how to use this book: Intro](introduction01_split_000.html#how_to_use_this_bookcolon_intro)'
  id: totrans-1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用这本书：介绍
- en: '**Your brain on Go**.'
  id: totrans-2
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**Go语言的奥秘**。'
- en: Here *you* are trying to *learn* something, while here your *brain* is, doing
    you a favor by making sure the learning doesn’t *stick*. Your brain’s thinking,
    “Better leave room for more important things, like which wild animals to avoid
    and whether naked snowboarding is a bad idea.” So how *do* you trick your brain
    into thinking that your life depends on knowing how to program in Go?
  id: totrans-3
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里*你*试图*学习*一些东西，而你的*大脑*却在这里帮你，确保学习不*粘*。你的大脑在思考，“最好为更重要的事情留出空间，比如避免哪些野生动物以及裸体滑雪是否是个坏主意。”那么*你*如何骗过你的大脑，让它觉得你的生活取决于学会如何用Go语言编程？
- en: '[“Who is this book for?”](introduction01_split_000.html#who_is_this_book_for)'
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“这本书是为谁准备的？”](introduction01_split_000.html#who_is_this_book_for)'
- en: '[“We know what you’re thinking”](introduction01_split_001.html#we_know_what_youaposre_thinking)'
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“我们知道你在想什么”](introduction01_split_001.html#we_know_what_youaposre_thinking)'
- en: '[“We know what your brain is thinking”](introduction01_split_001.html#we_know_what_your_brain_is_thinking)'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“我们知道你的大脑在想什么”](introduction01_split_001.html#we_know_what_your_brain_is_thinking)'
- en: '[“Metacognition: thinking about thinking”](introduction01_split_001.html#metacognition_thinking_about_thinking)'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“元认知：思考思考”](introduction01_split_001.html#metacognition_thinking_about_thinking)'
- en: '[“Here’s what WE did”](introduction01_split_001.html#hereaposs_what_we_did)'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“这是我们做的”](introduction01_split_001.html#hereaposs_what_we_did)'
- en: '[“Read me”](introduction01_split_001.html#read_me)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“阅读我”](introduction01_split_001.html#read_me)'
- en: '[“Acknowledgments”](introduction01_split_001.html#acknowledgments)'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“致谢”](introduction01_split_001.html#acknowledgments)'
- en: '[Chapter 1](ch01.html#letapsos_get_going_syntax_basics)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第一章](ch01.html#letapsos_get_going_syntax_basics)'
- en: '**Are you ready to turbo-charge your software?**'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**你准备好了要为你的软件加速了吗？**'
- en: Do you want a **simple** programming language that **compiles fast**? That **runs
    fast**? That makes it **easy to distribute** your work to users? Then **you’re
    ready for Go!**
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你想要一个**简单**的编程语言，**编译快**吗？**运行快**吗？让你**轻松分发**你的工作给用户吗？那么**你已经准备好使用Go语言了！**
- en: Go is a programming language that focuses on **simplicity** and **speed**. It’s
    simpler than other languages, so it’s quicker to learn. And it lets you harness
    the power of today’s multicore computer processors, so your programs run faster.
    This chapter will show you all the Go features that will make **your life as a
    developer easier**, and make your **users happier**.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Go是一种专注于**简单性**和**速度**的编程语言。它比其他语言更简单，因此学习速度更快。它还能让你利用今天的多核处理器的强大性能，因此你的程序运行得更快。本章将向你展示所有能让**开发者生活更轻松**，使**用户更满意**的Go特性。
- en: '[“Ready, set, Go!”](ch01.html#readycomma_setcomma_go)'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“准备，开始，Go！”](ch01.html#readycomma_setcomma_go)'
- en: '[“The Go Playground”](ch01.html#the_go_playground)'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Go Playground”](ch01.html#the_go_playground)'
- en: '[“What does it all mean?”](ch01.html#what_does_it_all_mean)'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“这一切意味着什么？”](ch01.html#what_does_it_all_mean)'
- en: '[“What if something goes wrong?”](ch01.html#what_if_something_goes_wrong_1)'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“如果出了问题怎么办？”](ch01.html#what_if_something_goes_wrong_1)'
- en: '[“Calling functions”](ch01.html#calling_functions)'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“调用函数”](ch01.html#calling_functions)'
- en: '[“The Println function”](ch01.html#the_println_function)'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Println函数”](ch01.html#the_println_function)'
- en: '[“Using functions from other packages”](ch01.html#using_functions_from_other_packages)'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用其他包中的函数”](ch01.html#using_functions_from_other_packages)'
- en: '[“Function return values”](ch01.html#function_return_values)'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“函数返回值”](ch01.html#function_return_values)'
- en: '[“A Go program template”](ch01.html#a_go_program_template)'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“一个Go程序模板”](ch01.html#a_go_program_template)'
- en: '[“Strings”](ch01.html#strings)'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“字符串”](ch01.html#strings)'
- en: '[“Runes”](ch01.html#runes)'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“符文”](ch01.html#runes)'
- en: '[“Booleans”](ch01.html#booleans)'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“布尔值”](ch01.html#booleans)'
- en: '[“Numbers”](ch01.html#numbers)'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“数字”](ch01.html#numbers)'
- en: '[“Math operations and comparisons”](ch01.html#math_operations_and_comparisons)'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“数学运算和比较”](ch01.html#math_operations_and_comparisons)'
- en: '[“Types”](ch01.html#types)'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“类型”](ch01.html#types)'
- en: '[“Declaring variables”](ch01.html#declaring_variables)'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“声明变量”](ch01.html#declaring_variables)'
- en: '[“Zero values”](ch01.html#zero_values)'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“零值”](ch01.html#zero_values)'
- en: '[“Short variable declarations”](ch01.html#short_variable_declarations)'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“短变量声明”](ch01.html#short_variable_declarations)'
- en: '[“Naming rules”](ch01.html#naming_rules)'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“命名规则”](ch01.html#naming_rules)'
- en: '[“Conversions”](ch01.html#conversions)'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“类型转换”](ch01.html#conversions)'
- en: '[“Installing Go on your computer”](ch01.html#installing_go_on_your_computer)'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“在你的计算机上安装Go”](ch01.html#installing_go_on_your_computer)'
- en: '[“Compiling Go code”](ch01.html#compiling_go_code)'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Go代码的编译”](ch01.html#compiling_go_code)'
- en: '[“Go tools”](ch01.html#go_tools)'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Go工具”](ch01.html#go_tools)'
- en: '[“Try out code quickly with “go run””](ch01.html#try_out_code_quickly_with_ldquogo_runrdq)'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用“go run”快速测试代码”](ch01.html#try_out_code_quickly_with_ldquogo_runrdq)'
- en: '[“Your Go Toolbox”](ch01.html#your_go_toolbox_1)'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“你的Go工具箱”](ch01.html#your_go_toolbox_1)'
- en: '[Chapter 2](ch02.html#which_code_runs_nextquestcolon_condition)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第二章](ch02.html#which_code_runs_nextquestcolon_condition)'
- en: '**Every program has parts that apply only in certain situations.**'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**每个程序都有只在特定情况下适用的部分。**'
- en: “This code should run *if* there’s an error. Otherwise, that other code should
    run.” Almost every program contains code that should be run only when a certain
    *condition* is true. So almost every programming language provides **conditional
    statements** that let you determine whether to run segments of code. Go is no
    exception.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “当出现错误时，应运行此代码。否则，应运行其他代码。” 几乎每个程序都包含只有在特定条件为真时才应运行的代码。因此，几乎每种编程语言都提供了让你确定是否运行代码片段的**条件语句**。Go也不例外。
- en: You may also need some parts of your code to run *repeatedly*. Like most languages,
    Go provides **loops** that run sections of code more than once. We’ll learn to
    use both conditionals and loops in this chapter!
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能还需要使部分代码*重复运行*。与大多数语言一样，Go提供了能够多次运行代码段的**循环**。我们将在本章学习如何同时使用条件语句和循环！
- en: '[“Calling methods”](ch02.html#calling_methods)'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“调用方法”](ch02.html#calling_methods)'
- en: '[“Making the grade”](ch02.html#making_the_grade)'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“成绩的制作”](ch02.html#making_the_grade)'
- en: '[“Multiple return values from a function or method”](ch02.html#Multiple_return_values)'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“函数或方法的多返回值”](ch02.html#Multiple_return_values)'
- en: '[“Option 1: Ignore the error return value with the blank identifier”](ch02.html#option_1colon_ignore_the_error_return_va)'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“选项1：使用空白标识符忽略错误返回值”](ch02.html#option_1colon_ignore_the_error_return_va)'
- en: '[“Option 2: Handle the error”](ch02.html#option_2colon_handle_the_error)'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“选项2：处理错误”](ch02.html#option_2colon_handle_the_error)'
- en: '[“Conditionals”](ch02.html#conditionals)'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“条件语句”](ch02.html#conditionals)'
- en: '[“Logging a fatal error, conditionally”](ch02.html#logging_a_fatal_errorcomma_conditionally)'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“有条件地记录致命错误”](ch02.html#logging_a_fatal_errorcomma_conditionally)'
- en: '[“Avoid shadowing names”](ch02.html#avoid_shadowing_names)'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“避免名称重叠”](ch02.html#avoid_shadowing_names)'
- en: '[“Converting strings to numbers”](ch02.html#converting_strings_to_numbers)'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“将字符串转换为数字”](ch02.html#converting_strings_to_numbers)'
- en: '[“Blocks”](ch02.html#blocks)'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“区块”](ch02.html#blocks)'
- en: '[“Blocks and variable scope”](ch02.html#blocks_and_variable_scope)'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“区块和变量作用域”](ch02.html#blocks_and_variable_scope)'
- en: '[“We’ve finished the grading program!”](ch02.html#weaposve_finished_the_grading_program)'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“我们已完成评分程序！”](ch02.html#weaposve_finished_the_grading_program)'
- en: '[“Only one variable in a short variable declaration has to be new”](ch02.html#only_one_variable_in_a_short_variable_de)'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“短变量声明中只需一个变量是新的”](ch02.html#only_one_variable_in_a_short_variable_de)'
- en: '[“Let’s build a game”](ch02.html#letaposs_build_a_game)'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“让我们来制作一个游戏”](ch02.html#letaposs_build_a_game)'
- en: '[“Package names vs. import paths”](ch02.html#package_names_vsdot_import_paths)'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“包名称与导入路径”](ch02.html#package_names_vsdot_import_paths)'
- en: '[“Generating a random number”](ch02.html#generating_a_random_number)'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“生成随机数”](ch02.html#generating_a_random_number)'
- en: '[“Getting an integer from the keyboard”](ch02.html#getting_an_integer_from_the_keyboard)'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“从键盘获取整数”](ch02.html#getting_an_integer_from_the_keyboard)'
- en: '[“Comparing the guess to the target”](ch02.html#comparing_the_guess_to_the_target)'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“将猜测与目标进行比较”](ch02.html#comparing_the_guess_to_the_target)'
- en: '[“Loops”](ch02.html#loops)'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“循环”](ch02.html#loops)'
- en: '[“Init and post statements are optional”](ch02.html#init_and_post_statements_are_optional)'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“初始化和后置语句是可选的”](ch02.html#init_and_post_statements_are_optional)'
- en: '[“Using a loop in our guessing game”](ch02.html#using_a_loop_in_our_guessing_game)'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“在猜数字游戏中使用循环”](ch02.html#using_a_loop_in_our_guessing_game)'
- en: '[“Breaking out of our guessing loop”](ch02.html#breaking_out_of_our_guessing_loop)'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“退出我们的猜测循环”](ch02.html#breaking_out_of_our_guessing_loop)'
- en: '[“Revealing the target”](ch02.html#Revealing_the_target)'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“揭示目标”](ch02.html#Revealing_the_target)'
- en: '[“Congratulations, your game is complete!”](ch02.html#congratulationscomma_your_game)'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“恭喜，你的游戏完成了！”](ch02.html#congratulationscomma_your_game)'
- en: '[“Your Go Toolbox”](ch02.html#your_go_toolbox_2)'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“你的Go工具箱”](ch02.html#your_go_toolbox_2)'
- en: '[Chapter 3](ch03.html#call_mecolon_functions)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第三章](ch03.html#call_mecolon_functions)'
- en: '**You’ve been missing out**.'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**你一直错过了**。'
- en: You’ve been calling functions like a pro. But the only functions you could call
    were the ones Go defined for you. Now, it’s your turn. We’re going to show you
    how to create your own functions. We’ll learn how to declare functions with and
    without parameters. We’ll declare functions that return a single value, and we’ll
    learn how to return multiple values so that we can indicate when there’s been
    an error. And we’ll learn about **pointers**, which allow us to make more memory-efficient
    function calls.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你已经像专业人士一样调用函数了。但是你只能调用Go为你定义的函数。现在轮到你了。我们将向你展示如何创建自己的函数。我们将学习如何声明带有和不带有参数的函数。我们将声明返回单个值的函数，并学习如何返回多个值以便在出现错误时进行指示。我们还将学习关于**指针**，它们允许我们进行更高效的内存管理函数调用。
- en: '[“Some repetitive code”](ch03.html#some_repetitive_code)'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“一些重复的代码”](ch03.html#some_repetitive_code)'
- en: '[“Formatting output with Printf and Sprintf”](ch03.html#formatting_output_with_printf_and_sprint)'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用Printf和Sprintf格式化输出”](ch03.html#formatting_output_with_printf_and_sprint)'
- en: '[“Formatting verbs”](ch03.html#formatting_verbs)'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“格式化动词”](ch03.html#formatting_verbs)'
- en: '[“Formatting value widths”](ch03.html#formatting_value_widths)'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“格式化值宽度”](ch03.html#formatting_value_widths)'
- en: '[“Formatting fractional number widths”](ch03.html#formatting_fractional_number_widths)'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“格式化小数数宽度”](ch03.html#formatting_fractional_number_widths)'
- en: '[“Using Printf in our paint calculator”](ch03.html#using_printf_in_our_paint_calculator)'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“在我们的油漆计算器中使用Printf”](ch03.html#using_printf_in_our_paint_calculator)'
- en: '[“Declaring functions”](ch03.html#declaring_functions)'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“声明函数”](ch03.html#declaring_functions)'
- en: '[“Declaring function parameters”](ch03.html#declaring_function_parameters)'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“声明函数参数”](ch03.html#declaring_function_parameters)'
- en: '[“Using functions in our paint calculator”](ch03.html#using_functions_in_our_paint_calculator)'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“在我们的油漆计算器中使用函数”](ch03.html#using_functions_in_our_paint_calculator)'
- en: '[“Functions and variable scope”](ch03.html#functions_and_variable_scope)'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“函数和变量作用域”](ch03.html#functions_and_variable_scope)'
- en: '[“Function return values”](ch01.html#function_return_values)'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“函数返回值”](ch01.html#function_return_values)'
- en: '[“Using a return value in our paint calculator”](ch03.html#using_a_return_value_in_our_paint_calcul)'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“在我们的油漆计算器中使用返回值”](ch03.html#using_a_return_value_in_our_paint_calcul)'
- en: '[“The paintNeeded function needs error handling”](ch03.html#the_paintneeded_function_needs_error_han)'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“paintNeeded函数需要错误处理”](ch03.html#the_paintneeded_function_needs_error_han)'
- en: '[“Error values”](ch03.html#error_values)'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“错误值”](ch03.html#error_values)'
- en: '[“Declaring multiple return values”](ch03.html#declaring_multiple_return_values)'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“声明多返回值”](ch03.html#declaring_multiple_return_values)'
- en: '[“Using multiple return values with our paintNeeded function”](ch03.html#using_multiple_return_values_with_our_pa)'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“在我们的paintNeeded函数中使用多返回值”](ch03.html#using_multiple_return_values_with_our_pa)'
- en: '[“Always handle errors!”](ch03.html#always_handle_errorsexcl)'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“始终处理错误！”](ch03.html#always_handle_errorsexcl)'
- en: '[“Function parameters receive copies of the arguments”](ch03.html#function_parameters_receive_copies_of_th)'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“函数参数接收参数的副本”](ch03.html#function_parameters_receive_copies_of_th)'
- en: '[“Pointers”](ch03.html#pointers)'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“指针”](ch03.html#pointers)'
- en: '[“Pointer types”](ch03.html#pointer_types)'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“指针类型”](ch03.html#pointer_types)'
- en: '[“Getting or changing the value at a pointer”](ch03.html#getting_or_changing_the_value_at_a_point)'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“获取或更改指针处的值”](ch03.html#getting_or_changing_the_value_at_a_point)'
- en: '[“Using pointers with functions”](ch03.html#using_pointers_with_functions)'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“在函数中使用指针”](ch03.html#using_pointers_with_functions)'
- en: '[“Fixing our “double” function using pointers”](ch03.html#fixing_our_ldquodoublerdquor_function_us)'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用指针修复我们的“double”函数”](ch03.html#fixing_our_ldquodoublerdquor_function_us)'
- en: '[“Your Go Toolbox”](ch03.html#your_go_toolbox_3)'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“你的Go工具箱”](ch03.html#your_go_toolbox_3)'
- en: '[Chapter 4](ch04.html#bundles_of_codecolon_packages)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第4章](ch04.html#bundles_of_codecolon_packages)'
- en: '**It’s time to get organized**.'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**现在是组织的时候**。'
- en: So far, we’ve been throwing all our code together in a single file. As our programs
    grow bigger and more complex, that’s going to quickly become a mess.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到目前为止，我们把所有的代码都混在一个文件里。随着程序变得越来越大和复杂，这很快会变得一团糟。
- en: In this chapter, we’ll show you how to create your own **packages** to help
    keep related code together in one place. But packages are good for more than just
    organization. Packages are an easy way to *share code between your programs*.
    And they’re an easy way to *share code with other developers*.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在本章中，我们将向您展示如何创建自己的**包**，以帮助将相关代码集中在一个地方。但包不仅仅是组织代码的好方法。包还是在您的程序之间*共享代码*的简便方式。它们还是*与其他开发者共享代码*的简便方式。
- en: '[“Different programs, same function”](ch04.html#different_programscomma_same_function)'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“不同的程序，相同的函数”](ch04.html#different_programscomma_same_function)'
- en: '[“Sharing code between programs using packages”](ch04.html#sharing_code_between_programs_using_pack)'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Sharing code between programs using packages”](ch04.html#sharing_code_between_programs_using_pack)'
- en: '[“The Go workspace directory holds package code”](ch04.html#the_go_workspace_directory_holds_package)'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“The Go workspace directory holds package code”](ch04.html#the_go_workspace_directory_holds_package)'
- en: '[“Creating a new package”](ch04.html#creating_a_new_package)'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Creating a new package”](ch04.html#creating_a_new_package)'
- en: '[“Importing our package into a program”](ch04.html#Importing_our_package_into_a_program)'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Importing our package into a program”](ch04.html#Importing_our_package_into_a_program)'
- en: '[“Packages use the same file layout”](ch04.html#packages_use_the_same_file_layout)'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Packages use the same file layout”](ch04.html#packages_use_the_same_file_layout)'
- en: '[“Package naming conventions”](ch04.html#package_naming_conventions)'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Package naming conventions”](ch04.html#package_naming_conventions)'
- en: '[“Package qualifiers”](ch04.html#package_qualifiers)'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Package qualifiers”](ch04.html#package_qualifiers)'
- en: '[“Moving our shared code to a package”](ch04.html#moving_our_shared_code_to_a_package)'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Moving our shared code to a package”](ch04.html#moving_our_shared_code_to_a_package)'
- en: '[“Constants”](ch04.html#constants)'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Constants”](ch04.html#constants)'
- en: '[“Nested package directories and import paths”](ch04.html#nested_package_directories)'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Nested package directories and import paths”](ch04.html#nested_package_directories)'
- en: '[“Installing program executables with “go install””](ch04.html#installing_program_executables_with)'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Installing program executables with “go install””](ch04.html#installing_program_executables_with)'
- en: '[“Changing workspaces with the GOPATH environment variable”](ch04.html#changing_workspaces_with_the_gopath)'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Changing workspaces with the GOPATH environment variable”](ch04.html#changing_workspaces_with_the_gopath)'
- en: '[“Setting GOPATH”](ch04.html#setting_gopath)'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Setting GOPATH”](ch04.html#setting_gopath)'
- en: '[“Publishing packages”](ch04.html#publishing_packages)'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Publishing packages”](ch04.html#publishing_packages)'
- en: '[“Downloading and installing packages with “go get””](ch04.html#downloading_and_installing_packages_with)'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Downloading and installing packages with “go get””](ch04.html#downloading_and_installing_packages_with)'
- en: '[“Reading package documentation with “go doc””](ch04.html#reading_package_documentation_with)'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Reading package documentation with “go doc””](ch04.html#reading_package_documentation_with)'
- en: '[“Documenting your packages with doc comments”](ch04.html#documenting_your_packages_with_doc_comme)'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Documenting your packages with doc comments”](ch04.html#documenting_your_packages_with_doc_comme)'
- en: '[“Viewing documentation in a web browser”](ch04.html#viewing_documentation_in_a_web_browser)'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Viewing documentation in a web browser”](ch04.html#viewing_documentation_in_a_web_browser)'
- en: '[“Serving HTML documentation to yourself with “godoc””](ch04.html#serving_html_documentation_to_yourself_w)'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Serving HTML documentation to yourself with “godoc””](ch04.html#serving_html_documentation_to_yourself_w)'
- en: '[“The “godoc” server includes YOUR packages!”](ch04.html#the_ldquogodocrdquo_server_includes_your)'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“The “godoc” server includes YOUR packages!”](ch04.html#the_ldquogodocrdquo_server_includes_your)'
- en: '[“Your Go Toolbox”](ch04.html#your_go_toolbox_4)'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Your Go Toolbox”](ch04.html#your_go_toolbox_4)'
- en: '[Chapter 5](ch05.html#on_the_listcolon_arrays)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Chapter 5](ch05.html#on_the_listcolon_arrays)'
- en: '**A whole lot of programs deal with lists of things**.'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**有许多程序处理各种列表**。'
- en: 'Lists of addresses. Lists of phone numbers. Lists of products. Go has *two*
    built-in ways of storing lists. This chapter will introduce the first: **arrays**.
    You’ll learn about how to create arrays, how to fill them with data, and how to
    get that data back out again. Then you’ll learn about processing all the elements
    in array, first the *hard* way with `for` loops, and then the *easy* way with
    `for`...`range` loops.'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '-   列表的地址。电话号码的列表。产品的列表。Go 有*两种*内置的列表存储方式。本章将介绍第一种：**数组**。您将学习如何创建数组，如何向数组填充数据以及如何再次获取这些数据。然后您将学习如何处理数组中的所有元素，首先是用`for`循环的*繁琐*方法，然后是用`for`…`range`循环的*简单*方法。'
- en: '[“Arrays hold collections of values”](ch05.html#arrays_hold_collections_of_values)'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Arrays hold collections of values”](ch05.html#arrays_hold_collections_of_values)'
- en: '[“Zero values in arrays”](ch05.html#zero_values_in_arrays)'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Zero values in arrays”](ch05.html#zero_values_in_arrays)'
- en: '[“Array literals”](ch05.html#array_literals)'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Array literals”](ch05.html#array_literals)'
- en: '[“Functions in the “fmt” package know how to handle arrays”](ch05.html#functions_in_the_ldquofmtrdquor_package)'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Functions in the “fmt” package know how to handle arrays”](ch05.html#functions_in_the_ldquofmtrdquor_package)'
- en: '[“Accessing array elements within a loop”](ch05.html#accessing_array_elements_within_a_loop)'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Accessing array elements within a loop”](ch05.html#accessing_array_elements_within_a_loop)'
- en: '[“Checking array length with the “len” function”](ch05.html#checking_array_length_with_the_ldquolenr)'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Checking array length with the “len” function”](ch05.html#checking_array_length_with_the_ldquolenr)'
- en: '[“Looping over arrays safely with “for...range””](ch05.html#looping_over_arrays_safely_with_ldquofor)'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Looping over arrays safely with “for...range””](ch05.html#looping_over_arrays_safely_with_ldquofor)'
- en: '[“Using the blank identifier with “for...range” loops”](ch05.html#using_the_blank_identifier_with_ldquofor)'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Using the blank identifier with “for...range” loops”](ch05.html#using_the_blank_identifier_with_ldquofor)'
- en: '[“Getting the sum of the numbers in an array”](ch05.html#getting_the_sum_of_the_numbers_in_an_arr)'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“计算数组中数字的总和”](ch05.html#getting_the_sum_of_the_numbers_in_an_arr)'
- en: '[“Getting the average of the numbers in an array”](ch05.html#getting_the_average_of_the_numbers_in_an)'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“计算数组中数字的平均值”](ch05.html#getting_the_average_of_the_numbers_in_an)'
- en: '[“Reading a text file”](ch05.html#reading_a_text_file)'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“读取文本文件”](ch05.html#reading_a_text_file)'
- en: '[“Reading a text file into an array”](ch05.html#reading_a_text_file_into_an_array)'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“将文本文件读入数组”](ch05.html#reading_a_text_file_into_an_array)'
- en: '[“Updating our “average” program to read a text file”](ch05.html#updating_our_ldquoaveragerdquor_program)'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“更新我们的“average”程序以读取文本文件”](ch05.html#updating_our_ldquoaveragerdquor_program)'
- en: '[“Our program can only process three values!”](ch05.html#our_program_can_only_process_three_value)'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“我们的程序只能处理三个值！”](ch05.html#our_program_can_only_process_three_value)'
- en: '[“Your Go Toolbox”](ch05.html#your_go_toolbox_5)'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“你的Go工具箱”](ch05.html#your_go_toolbox_5)'
- en: '[Chapter 6](ch06.html#appending_issuecolon_slices)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第6章](ch06.html#appending_issuecolon_slices)'
- en: '**We’ve learned we can’t add more elements to an array**.'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**我们学到了，无法向数组添加更多元素**。'
- en: That’s a real problem for our program, because we don’t know in advance how
    many pieces of data our file contains. But that’s where Go **slices** come in.
    Slices are a collection type that can grow to hold additional items—just the thing
    to fix our current program! We’ll also see how slices give users an easier way
    to provide data to *all* your programs, and how they can help you write functions
    that are more convenient to call.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们程序的一个真正问题是，因为我们事先不知道文件包含多少数据片段，这对我们的程序来说是个问题。但这就是Go **切片**派上用场的地方。切片是一种集合类型，可以扩展以容纳额外的项——这正是修复当前程序的方法！我们还会看到切片如何为用户提供更轻松的方式来提供数据给*所有*你的程序，并且如何帮助你编写更方便调用的函数。
- en: '[“Slices”](ch06.html#slices)'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“切片”](ch06.html#slices)'
- en: '[“Slice literals”](ch06.html#slice_literals)'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“切片字面量”](ch06.html#slice_literals)'
- en: '[“The slice operator”](ch06.html#the_slice_operator)'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“切片操作符”](ch06.html#the_slice_operator)'
- en: '[“Underlying arrays”](ch06.html#underlying_arrays)'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“底层数组”](ch06.html#underlying_arrays)'
- en: '[“Change the underlying array, change the slice”](ch06.html#change_the_underlying_arraycomma_change)'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“更改基础数组，更改切片”](ch06.html#change_the_underlying_arraycomma_change)'
- en: '[“Add onto a slice with the “append” function”](ch06.html#add_onto_a_slice_with_the_ldquoappendrdq)'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用“append”函数添加到切片”](ch06.html#add_onto_a_slice_with_the_ldquoappendrdq)'
- en: '[“Slices and zero values”](ch06.html#slices_and_zero_values)'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“切片和零值”](ch06.html#slices_and_zero_values)'
- en: '[“Reading additional file lines using slices and “append””](ch06.html#reading_additional_file_lines_using_slic)'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用切片和“append”读取额外文件行”](ch06.html#reading_additional_file_lines_using_slic)'
- en: '[“Trying our improved program”](ch06.html#trying_our_improved_program)'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“尝试我们改进的程序”](ch06.html#trying_our_improved_program)'
- en: '[“Returning a nil slice in the event of an error”](ch06.html#returning_a_nil_slice_in_the_event_of_an)'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“在发生错误时返回一个空切片”](ch06.html#returning_a_nil_slice_in_the_event_of_an)'
- en: '[“Command-line arguments”](ch06.html#command-line_arguments)'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“命令行参数”](ch06.html#command-line_arguments)'
- en: '[“Getting command-line arguments from the os.Args slice”](ch06.html#getting_command-line_arguments_from_the)'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“从os.Args切片获取命令行参数”](ch06.html#getting_command-line_arguments_from_the)'
- en: '[“The slice operator can be used on other slices”](ch06.html#the_slice_operator_can_be_used_on_other)'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“切片操作符可以用在其他切片上”](ch06.html#the_slice_operator_can_be_used_on_other)'
- en: '[“Updating our program to use command-line arguments”](ch06.html#updating_our_program_to_use_command-line)'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“更新我们的程序以使用命令行参数”](ch06.html#updating_our_program_to_use_command-line)'
- en: '[“Variadic functions”](ch06.html#variadic_functions)'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“可变参数函数”](ch06.html#variadic_functions)'
- en: '[“Using variadic functions”](ch06.html#using_variadic_functions)'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用可变参数函数”](ch06.html#using_variadic_functions)'
- en: '[“Using a variadic function to calculate averages”](ch06.html#using_a_variadic_function_to_calculate_a)'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用可变参数函数计算平均值”](ch06.html#using_a_variadic_function_to_calculate_a)'
- en: '[“Passing slices to variadic functions”](ch06.html#passing_slices_to_variadic_functions)'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“向可变参数函数传递切片”](ch06.html#passing_slices_to_variadic_functions)'
- en: '[“Slices have saved the day!”](ch06.html#slices_have_saved_the_dayexcl)'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“切片拯救了全局！”](ch06.html#slices_have_saved_the_dayexcl)'
- en: '[“Your Go Toolbox”](ch06.html#your_go_toolbox_6)'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“你的Go工具箱”](ch06.html#your_go_toolbox_6)'
- en: '[Chapter 7](ch07_split_000.html#labeling_datacolon_maps)'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第7章](ch07_split_000.html#labeling_datacolon_maps)'
- en: '**Throwing things in piles is fine, until you need to find something again**.'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**把东西扔到一堆里没问题，直到你需要再找出来**。'
- en: You’ve already seen how to create lists of values using *arrays* and *slices*.
    You’ve seen how to apply the same operation to *every value* in an array or slice.
    But what if you need to work with a *particular* value? To find it, you’ll have
    to start at the beginning of the array or slice, and *look through Every. Single.
    Value.*
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你已经学会如何使用*数组*和*切片*创建值列表。你也学会了如何对数组或切片中的*每个值*应用相同的操作。但是如果你需要处理一个*特定的*值呢？你需要从数组或切片的开头开始，逐个查找每个值。
- en: What if there were a kind of collection where every value had a label on it?
    You could quickly find just the value you needed! In this chapter, we’ll look
    at **maps**, which do just that.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果有一种集合，每个值上都有一个标签，你可以快速找到你需要的值！本章我们将介绍**映射**，它正是做这件事情的。
- en: '[“Counting votes”](ch07_split_000.html#counting_votes)'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“计数投票”](ch07_split_000.html#counting_votes)'
- en: '[“Reading names from a file”](ch07_split_000.html#reading_names_from_a_file)'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“从文件中读取名字”](ch07_split_000.html#reading_names_from_a_file)'
- en: '[“Counting names the hard way, with slices”](ch07_split_000.html#counting_names_the_hard_waycomma_with_sl)'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“以切片方式艰难计数名字”](ch07_split_000.html#counting_names_the_hard_waycomma_with_sl)'
- en: '[“Maps”](ch07_split_000.html#maps)'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“映射”](ch07_split_000.html#maps)'
- en: '[“Map literals”](ch07_split_000.html#map_literals)'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“映射字面量”](ch07_split_000.html#map_literals)'
- en: '[“Zero values within maps”](ch07_split_000.html#zero_values_within_maps)'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“映射内的零值”](ch07_split_000.html#zero_values_within_maps)'
- en: '[“The zero value for a map variable is nil”](ch07_split_000.html#the_zero_value_for_a_map_variable_is_nil)'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“映射变量的零值是 nil”](ch07_split_000.html#the_zero_value_for_a_map_variable_is_nil)'
- en: '[“How to tell zero values apart from assigned values”](ch07_split_000.html#how_to_tell_zero_values_apart_from_assig)'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“如何区分零值和已赋值的值”](ch07_split_000.html#how_to_tell_zero_values_apart_from_assig)'
- en: '[“Removing key/value pairs with the “delete” function”](ch07_split_001.html#removing_keysolvalue_pairs_with_the_ldqu)'
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用‘delete’函数删除键/值对”](ch07_split_001.html#removing_keysolvalue_pairs_with_the_ldqu)'
- en: '[“Updating our vote counting program to use maps”](ch07_split_001.html#updating_our_vote_counting_program_to_us)'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“更新我们的投票计数程序以使用映射”](ch07_split_001.html#updating_our_vote_counting_program_to_us)'
- en: '[“Using for...range loops with maps”](ch07_split_001.html#using_forhelliprange_loops_with_maps)'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用 for...range 循环处理映射”](ch07_split_001.html#using_forhelliprange_loops_with_maps)'
- en: '[“The for...range loop handles maps in random order!”](ch07_split_001.html#the_forhelliprange_loop_handles_maps_in)'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“for...range 循环处理映射时会随机顺序处理！”](ch07_split_001.html#the_forhelliprange_loop_handles_maps_in)'
- en: '[“Updating our vote counting program with a for...range loop”](ch07_split_001.html#updating_our_vote_counting_program_with)'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用 for...range 循环更新我们的投票计数程序”](ch07_split_001.html#updating_our_vote_counting_program_with)'
- en: '[“The vote counting program is complete!”](ch07_split_001.html#the_vote_counting_program_is_completeexc)'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“投票计数程序已完成！”](ch07_split_001.html#the_vote_counting_program_is_completeexc)'
- en: '[“Your Go Toolbox”](ch07_split_001.html#your_go_toolbox_7)'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“你的 Go 工具箱”](ch07_split_001.html#your_go_toolbox_7)'
- en: '[Chapter 8](ch08.html#building_storagecolon_structs)'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 8 章](ch08.html#building_storagecolon_structs)'
- en: '**Sometimes you need to store more than one type of data**.'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**有时你需要存储不止一种类型的数据**。'
- en: We learned about slices, which store a list of values. Then we learned about
    maps, which map a list of keys to a list of values. But both of these data structures
    can only hold values of *one* type. Sometimes, you need to group together values
    of *several* types. Think of mailing addresses, where you have to mix street names
    (strings) with postal codes (integers). Or student records, where you have to
    mix student names (strings) with grade point averages (floating-point numbers).
    You can’t mix value types in slices or maps. But you *can* if you use another
    type called a **struct**. We’ll learn all about structs in this chapter!
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们学习了切片，它们存储一系列的值。然后我们学习了映射，它们将一系列的键映射到一系列的值。但是这两种数据结构只能存储*一种*类型的值。有时候，你需要将*多种*类型的值组合在一起。比如邮寄地址，你需要将街道名称（字符串）和邮政编码（整数）混合在一起。或者学生档案，你需要将学生姓名（字符串）和平均学分绩点（浮点数）混合在一起。在切片或映射中无法混合值类型。但是如果使用另一种叫做**结构体**的类型，是可以的。本章我们将详细学习结构体！
- en: '[“Slices and maps hold values of ONE type”](ch08.html#slices_and_maps_hold_values_of_one_type)'
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“切片和映射只能持有一种类型的值”](ch08.html#slices_and_maps_hold_values_of_one_type)'
- en: '[“Structs are built out of values of MANY types”](ch08.html#structs_are_built_out_of_values_of_many)'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“结构体由许多类型的值构建而成”](ch08.html#structs_are_built_out_of_values_of_many)'
- en: '[“Access struct fields using the dot operator”](ch08.html#access_struct_fields_using_the_dot_opera)'
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用点运算符访问结构字段”](ch08.html#access_struct_fields_using_the_dot_opera)'
- en: '[“Storing subscriber data in a struct”](ch08.html#storing_subscriber_data_in_a_struct)'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“在结构体中存储订阅者数据”](ch08.html#storing_subscriber_data_in_a_struct)'
- en: '[“Defined types and structs”](ch08.html#defined_types_and_structs)'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“定义类型和结构体”](ch08.html#defined_types_and_structs)'
- en: '[“Using a defined type for magazine subscribers”](ch08.html#using_a_defined_type_for_magazine_subscr)'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用定义类型来管理杂志订阅者”](ch08.html#using_a_defined_type_for_magazine_subscr)'
- en: '[“Using defined types with functions”](ch08.html#using_defined_types_with_functions)'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用定义类型与函数”](ch08.html#using_defined_types_with_functions)'
- en: '[“Modifying a struct using a function”](ch08.html#modifying_a_struct_using_a_function)'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用函数修改结构体”](ch08.html#modifying_a_struct_using_a_function)'
- en: '[“Accessing struct fields through a pointer”](ch08.html#accessing_struct_fields_through_a_pointe)'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“通过指针访问结构体字段”](ch08.html#accessing_struct_fields_through_a_pointe)'
- en: '[“Pass large structs using pointers”](ch08.html#pass_large_structs_using_pointers)'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用指针传递大型结构体”](ch08.html#pass_large_structs_using_pointers)'
- en: '[“Moving our struct type to a different package”](ch08.html#moving_our_struct_type_to_a_different_pa)'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“将我们的结构体类型移动到另一个包中”](ch08.html#moving_our_struct_type_to_a_different_pa)'
- en: '[“A defined type’s name must be capitalized to be exported”](ch08.html#a_defined_typersquos_name_must_be_capita)'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“定义类型的名称必须大写才能导出”](ch08.html#a_defined_typersquos_name_must_be_capita)'
- en: '[“Struct field names must be capitalized to be exported”](ch08.html#struct_field_names_must_be)'
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“结构体字段名称必须大写才能导出”](ch08.html#struct_field_names_must_be)'
- en: '[“Struct literals”](ch08.html#struct_literals)'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“结构体字面量”](ch08.html#struct_literals)'
- en: '[“Creating an Employee struct type”](ch08.html#creating_an_employee_struct_type)'
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“创建雇员结构体类型”](ch08.html#creating_an_employee_struct_type)'
- en: '[“Creating an Address struct type”](ch08.html#creating_an_address_struct_type)'
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“创建地址结构体类型”](ch08.html#creating_an_address_struct_type)'
- en: '[“Adding a struct as a field on another type”](ch08.html#adding_a_struct_as_a_field_on_another_ty)'
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“将结构体作为另一种类型的字段添加”](ch08.html#adding_a_struct_as_a_field_on_another_ty)'
- en: '[“Setting up a struct within another struct”](ch08.html#setting_up_a_struct_within_another_struc)'
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“在另一个结构体中设置结构体”](ch08.html#setting_up_a_struct_within_another_struc)'
- en: '[“Anonymous struct fields”](ch08.html#anonymous_struct_fields)'
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“匿名结构字段”](ch08.html#anonymous_struct_fields)'
- en: '[“Embedding structs”](ch08.html#embedding_structs)'
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“嵌入结构体”](ch08.html#embedding_structs)'
- en: '[“Our defined types are complete!”](ch08.html#our_defined_types_are_completeexcl)'
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“我们的定义类型已经完成！”](ch08.html#our_defined_types_are_completeexcl)'
- en: '[“Your Go Toolbox”](ch08.html#your_go_toolbox_8)'
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“你的 Go 工具箱”](ch08.html#your_go_toolbox_8)'
- en: '[Chapter 9](ch09.html#yoursquore_my_typecolon_defined_types)'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第九章](ch09.html#yoursquore_my_typecolon_defined_types)'
- en: '**There’s more to learn about defined types**.'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**关于定义类型，还有更多知识等待学习**。'
- en: In the previous chapter, we showed you how to define a type with a struct underlying
    type. What we *didn’t* show you was that you can use *any* type as an underlying
    type.
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上一章中，我们向你展示了如何定义一个带有结构体底层类型的类型。但是我们*没有*向你展示的是，你可以使用*任何*类型作为底层类型。
- en: And do you remember methods—the special kind of function that’s associated with
    values of a particular type? We’ve been calling methods on various values throughout
    the book, but we haven’t shown you how to define your *own* methods. In this chapter,
    we’re going to fix all of that. Let’s get started!
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 并且你还记得方法吗——那种特殊类型的函数，与特定类型的值相关联？我们在整本书中一直在各种值上调用方法，但我们还没有向你展示如何定义*自己的*方法。在本章中，我们将解决这一切。让我们开始吧！
- en: '[“Type errors in real life”](ch09.html#type_errors_in_real_life)'
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“真实生活中的类型错误”](ch09.html#type_errors_in_real_life)'
- en: '[“Defined types with underlying basic types”](ch09.html#defined_types_with_underlying_basic_type)'
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“带有基础类型的定义类型”](ch09.html#defined_types_with_underlying_basic_type)'
- en: '[“Defined types and operators”](ch09.html#defined_types_and_operators)'
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“定义类型和运算符”](ch09.html#defined_types_and_operators)'
- en: '[“Converting between types using functions”](ch09.html#converting_between_types_using_functions)'
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用函数进行类型转换”](ch09.html#converting_between_types_using_functions)'
- en: '[“Fixing our function name conflict using methods”](ch09.html#fixing_our_function_name_conflict_using)'
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用方法修复函数名称冲突”](ch09.html#fixing_our_function_name_conflict_using)'
- en: '[“Defining methods”](ch09.html#defining_methods)'
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“定义方法”](ch09.html#defining_methods)'
- en: '[“The receiver parameter is (pretty much) just another parameter”](ch09.html#The_receiver_parameter_is_leftparenthesi)'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“接收器参数基本上就是另一个参数”](ch09.html#The_receiver_parameter_is_leftparenthesi)'
- en: '[“A method is (pretty much) just like a function”](ch09.html#a_method_is_leftparenthesispretty_muchri)'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“方法与函数基本相同”](ch09.html#a_method_is_leftparenthesispretty_muchri)'
- en: '[“Pointer receiver parameters”](ch09.html#pointer_receiver_parameters)'
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“指针接收器参数”](ch09.html#pointer_receiver_parameters)'
- en: '[“Converting Liters and Milliliters to Gallons using methods”](ch09.html#converting_liters_and_milliliters_to_gal)'
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用方法将升和毫升转换为加仑”](ch09.html#converting_liters_and_milliliters_to_gal)'
- en: '[“Converting Gallons to Liters and Milliliters using methods”](ch09.html#converting_gallons_to_liters_and_millili)'
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用方法将加仑转换为升和毫升”](ch09.html#converting_gallons_to_liters_and_millili)'
- en: '[“Your Go Toolbox”](ch09.html#your_go_toolbox_9)'
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“你的 Go 工具箱”](ch09.html#your_go_toolbox_9)'
- en: '[Chapter 10](ch10.html#keep_it_to_yourselfcolon_encapsulation_a)'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第10章](ch10.html#keep_it_to_yourselfcolon_encapsulation_a)'
- en: '**Mistakes happen**.'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**错误是难免的**。'
- en: 'Sometimes, your program will receive invalid data from user input, a file you’re
    reading in, or elsewhere. In this chapter, you’ll learn about **encapsulation**:
    a way to protect your struct type’s fields from that invalid data. That way, you’ll
    know your field data is safe to work with!'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有时，您的程序会从用户输入、读取的文件或其他地方接收到无效数据。在本章中，您将了解**封装**：一种保护结构类型字段免受无效数据影响的方式。这样，您就可以确保字段数据是安全的，可以正常使用！
- en: We’ll also show you how to **embed** other types within your struct type. If
    your struct type needs methods that already exist on another type, you don’t have
    to copy and paste the method code. You can embed the other type within your struct
    type, and then use the embedded type’s methods just as if they were defined on
    your own type!
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还会向您展示如何**嵌入**其他类型到您的结构类型中。如果您的结构类型需要其他类型已有的方法，您不需要复制和粘贴方法代码。您可以将其他类型嵌入到您的结构类型中，然后像使用自己类型上定义的方法一样使用嵌入类型的方法！
- en: '[“Creating a Date struct type”](ch10.html#creating_a_date_struct_type)'
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“创建一个日期结构类型”](ch10.html#creating_a_date_struct_type)'
- en: '[“People are setting the Date struct field to invalid values!”](ch10.html#people_are_setting_the_date_struct_field)'
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“人们正在将日期结构字段设置为无效值！”](ch10.html#people_are_setting_the_date_struct_field)'
- en: '[“Setter methods”](ch10.html#setter_methods)'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Setter 方法”](ch10.html#setter_methods)'
- en: '[“Setter methods need pointer receivers”](ch10.html#setter_methods_need_pointer_receivers)'
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Setter 方法需要指针接收器”](ch10.html#setter_methods_need_pointer_receivers)'
- en: '[“Adding the remaining setter methods”](ch10.html#adding_the_remaining_setter_methods)'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“添加其余的 setter 方法”](ch10.html#adding_the_remaining_setter_methods)'
- en: '[“Adding validation to the setter methods”](ch10.html#adding_validation_to_the_setter_methods)'
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“为 setter 方法添加验证”](ch10.html#adding_validation_to_the_setter_methods)'
- en: '[“The fields can still be set to invalid values!”](ch10.html#the_fields_can_still_be_set_to_invalid_v)'
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“字段仍然可以设置为无效值！”](ch10.html#the_fields_can_still_be_set_to_invalid_v)'
- en: '[“Moving the Date type to another package”](ch10.html#moving_the_date_type_to_another_package)'
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“将日期类型移动到另一个包”](ch10.html#moving_the_date_type_to_another_package)'
- en: '[“Making Date fields unexported”](ch10.html#making_date_fields_unexported)'
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使日期字段非公开”](ch10.html#making_date_fields_unexported)'
- en: '[“Accessing unexported fields through exported methods”](ch10.html#accessing_unexported_fields_through_expo)'
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“通过公开方法访问非公开字段”](ch10.html#accessing_unexported_fields_through_expo)'
- en: '[“Getter methods”](ch10.html#getter_methods)'
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Getter 方法”](ch10.html#getter_methods)'
- en: '[“Encapsulation”](ch10.html#encapsulation)'
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“封装”](ch10.html#encapsulation)'
- en: '[“Embedding the Date type in an Event type”](ch10.html#embedding_the_date_type_in_an_event_type)'
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“在事件类型中嵌入日期类型”](ch10.html#embedding_the_date_type_in_an_event_type)'
- en: '[“Unexported fields don’t get promoted”](ch10.html#unexported_fields_donrsquot_get_promoted)'
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“非公开字段不会被提升”](ch10.html#unexported_fields_donrsquot_get_promoted)'
- en: '[“Exported methods get promoted just like fields”](ch10.html#exported_methods_get_promoted_just_like)'
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“公开方法会像字段一样被提升”](ch10.html#exported_methods_get_promoted_just_like)'
- en: '[“Encapsulating the Event Title field”](ch10.html#encapsulating_the_event_title_field)'
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“封装事件标题字段”](ch10.html#encapsulating_the_event_title_field)'
- en: '[“Promoted methods live alongside the outer type’s methods”](ch10.html#promoted_methods_live_alongside_the_oute)'
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“提升的方法与外部类型的方法并存”](ch10.html#promoted_methods_live_alongside_the_oute)'
- en: '[“Our calendar package is complete!”](ch10.html#our_calendar_package_is_completeexcl)'
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“我们的日历包已经完成！”](ch10.html#our_calendar_package_is_completeexcl)'
- en: '[“Your Go Toolbox”](ch10.html#your_go_toolbox_10)'
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“你的 Go 工具箱”](ch10.html#your_go_toolbox_10)'
- en: '[Chapter 11](ch11_split_000.html#what_can_you_doquestcolon_interfaces)'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第11章](ch11_split_000.html#what_can_you_doquestcolon_interfaces)'
- en: '**Sometimes you don’t care about the particular type of a value**.'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**有时您不关心值的具体类型**。'
- en: You don’t care about what it *is*. You just need to know that it will be able
    to *do* certain things. That you’ll be able to call *certain methods* on it. You
    don’t care whether you have a `Pen` or a `Pencil`, you just need something with
    a `Draw` method. You don’t care whether you have a `Car` or a `Boat`, you just
    need something with a `Steer` method.
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您不关心它是*什么*。您只需要知道它将能够*做*某些事情。您只需要知道您可以在其上调用*某些方法*。您不关心是否有一支`Pen`还是一支`Pencil`，您只需要拥有一个具有`Draw`方法的东西。您不关心是否有一辆`Car`还是一艘`Boat`，您只需要拥有一个具有`Steer`方法的东西。
- en: That’s what Go **interfaces** accomplish. They let you define variables and
    function parameters that will hold *any* type, as long as that type defines certain
    methods.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Go **接口**实现了这一点。它允许您定义变量和函数参数，这些变量和参数可以持有*任何*类型，只要该类型定义了特定的方法。
- en: '[“Two different types that have the same methods”](ch11_split_000.html#two_different_types_that_have_the_same_m)'
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“具有相同方法的两种不同类型”](ch11_split_000.html#two_different_types_that_have_the_same_m)'
- en: '[“A method parameter that can only accept one type”](ch11_split_000.html#a_method_parameter_that_can_only_accept)'
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“仅接受一种类型的方法参数”](ch11_split_000.html#a_method_parameter_that_can_only_accept)'
- en: '[“Interfaces”](ch11_split_000.html#interfaces)'
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“接口”](ch11_split_000.html#interfaces)'
- en: '[“Defining a type that satisfies an interface”](ch11_split_000.html#defining_a_type_that_satisfies_an_interf)'
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“定义满足接口的类型”](ch11_split_000.html#defining_a_type_that_satisfies_an_interf)'
- en: '[“Concrete types, interface types”](ch11_split_000.html#concrete_typescomma_interface_types)'
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“具体类型，接口类型”](ch11_split_000.html#concrete_typescomma_interface_types)'
- en: '[“Assign any type that satisfies the interface”](ch11_split_000.html#assign_any_type_that_satisfies_the_inter)'
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“分配任何满足接口的类型”](ch11_split_000.html#assign_any_type_that_satisfies_the_inter)'
- en: '[“You can only call methods defined as part of the interface”](ch11_split_000.html#you_can_only_call_methods_defined_as_par)'
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“只能调用作为接口一部分定义的方法”](ch11_split_000.html#you_can_only_call_methods_defined_as_par)'
- en: '[“Fixing our playList function using an interface”](ch11_split_001.html#fixing_our_playlist_function_using_an_in)'
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用接口修复我们的 playList 函数”](ch11_split_001.html#fixing_our_playlist_function_using_an_in)'
- en: '[“Type assertions”](ch11_split_001.html#type_assertions)'
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“类型断言”](ch11_split_001.html#type_assertions)'
- en: '[“Type assertion failures”](ch11_split_001.html#type_assertion_failures)'
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“类型断言失败”](ch11_split_001.html#type_assertion_failures)'
- en: '[“Avoiding panics when type assertions fail”](ch11_split_001.html#avoiding_panics_when_type_assertions_fai)'
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“在类型断言失败时避免 panic”](ch11_split_001.html#avoiding_panics_when_type_assertions_fai)'
- en: '[“Testing TapePlayers and TapeRecorders using type assertions”](ch11_split_001.html#testing_tapeplayers_and_taperecorders_us)'
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用类型断言测试 TapePlayers 和 TapeRecorders”](ch11_split_001.html#testing_tapeplayers_and_taperecorders_us)'
- en: '[“The “error” interface”](ch11_split_001.html#the_ldquoerrorrdquo_interface)'
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[““error” 接口”](ch11_split_001.html#the_ldquoerrorrdquo_interface)'
- en: '[“The Stringer interface”](ch11_split_001.html#the_stringer_interface)'
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Stringer 接口”](ch11_split_001.html#the_stringer_interface)'
- en: '[“The empty interface”](ch11_split_001.html#the_empty_interface)'
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“空接口”](ch11_split_001.html#the_empty_interface)'
- en: '[“Your Go Toolbox”](ch11_split_001.html#your_go_toolbox_11)'
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“您的 Go 工具箱”](ch11_split_001.html#your_go_toolbox_11)'
- en: '[Chapter 12](ch12.html#back_on_your_feetcolon_recovering_from_f)'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 12 章](ch12.html#back_on_your_feetcolon_recovering_from_f)'
- en: '**Every program encounters errors. You should plan for them**.'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**每个程序都会遇到错误。您应该为它们做好准备**。'
- en: Sometimes handling an error can be as simple as reporting it and exiting the
    program. But other errors may require additional action. You may need to close
    opened files or network connections, or otherwise clean up, so your program doesn’t
    leave a mess behind. In this chapter, we’ll show you how to **defer** cleanup
    actions so they happen even when there’s an error. We’ll also show you how to
    make your program **panic** in those (rare) situations where it’s appropriate,
    and how to **recover** afterward.
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有时候处理错误可能就像报告并退出程序那样简单。但是其他错误可能需要额外的操作。您可能需要关闭已打开的文件或网络连接，或者进行其他清理工作，以确保您的程序不会留下混乱。在本章中，我们将向您展示如何**延迟**清理操作，以便即使出现错误，也能执行这些操作。我们还将向您展示如何在适当的情况下使您的程序**panic**，以及如何在之后**recover**。
- en: '[“Reading numbers from a file, revisited”](ch12.html#reading_numbers_from_a_filecomma_revisit)'
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“重新访问从文件读取数字”](ch12.html#reading_numbers_from_a_filecomma_revisit)'
- en: '[“Any errors will prevent the file from being closed!”](ch12.html#any_errors_will_prevent_the_file_from_be)'
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“任何错误都将阻止文件关闭！”](ch12.html#any_errors_will_prevent_the_file_from_be)'
- en: '[“Deferring function calls”](ch12.html#deferring_function_calls)'
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“延迟函数调用”](ch12.html#deferring_function_calls)'
- en: '[“Recovering from errors using deferred function calls”](ch12.html#recovering_from_errors_using_deferred_fu)'
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用延迟函数调用从错误中恢复”](ch12.html#recovering_from_errors_using_deferred_fu)'
- en: '[“Ensuring files get closed using deferred function calls”](ch12.html#ensuring_files_get_closed_using_deferred)'
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用延迟函数调用确保文件被关闭”](ch12.html#ensuring_files_get_closed_using_deferred)'
- en: '[“Listing the files in a directory”](ch12.html#listing_the_files_in_a_directory)'
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“列出目录中的文件”](ch12.html#listing_the_files_in_a_directory)'
- en: '[“Listing the files in subdirectories (will be trickier)”](ch12.html#listing_the_files_in_subdirectories_left)'
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“列出子目录中的文件（将更加棘手）”](ch12.html#listing_the_files_in_subdirectories_left)'
- en: '[“Recursive function calls”](ch12.html#recursive_function_calls)'
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“递归函数调用”](ch12.html#recursive_function_calls)'
- en: '[“Recursively listing directory contents”](ch12.html#recursively_listing_directory_contents)'
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“递归列出目录内容”](ch12.html#recursively_listing_directory_contents)'
- en: '[“Error handling in a recursive function”](ch12.html#error_handling_in_a_recursive_function)'
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“递归函数中的错误处理”](ch12.html#error_handling_in_a_recursive_function)'
- en: '[“Starting a panic”](ch12.html#starting_a_panic)'
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“引发panic”](ch12.html#starting_a_panic)'
- en: '[“Stack traces”](ch12.html#stack_traces)'
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“堆栈跟踪”](ch12.html#stack_traces)'
- en: '[“Deferred calls completed before crash”](ch12.html#deferred_calls_completed_before_crash)'
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“在崩溃前完成延迟调用”](ch12.html#deferred_calls_completed_before_crash)'
- en: '[“Using “panic” with scanDirectory”](ch12.html#using_ldquopanicrdquo_with_scandirectory)'
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“在scanDirectory中使用“panic””](ch12.html#using_ldquopanicrdquo_with_scandirectory)'
- en: '[“When to panic”](ch12.html#when_to_panic)'
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“何时使用panic”](ch12.html#when_to_panic)'
- en: '[“The “recover” function”](ch12.html#the_ldquorrecoverrdquor_function)'
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[““recover”函数”](ch12.html#the_ldquorrecoverrdquor_function)'
- en: '[“The panic value is returned from recover”](ch12.html#the_panic_value_is_returned_from_recover)'
  id: totrans-285
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“从recover中返回panic值”](ch12.html#the_panic_value_is_returned_from_recover)'
- en: '[“Recovering from panics in scanDirectory”](ch12.html#recovering_from_panics_in_scandirectory)'
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“在scanDirectory中从panic中恢复”](ch12.html#recovering_from_panics_in_scandirectory)'
- en: '[“Reinstating a panic”](ch12.html#reinstating_a_panic)'
  id: totrans-287
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“重新引发panic”](ch12.html#reinstating_a_panic)'
- en: '[“Your Go Toolbox”](ch12.html#your_go_toolbox_12)'
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“你的Go工具箱”](ch12.html#your_go_toolbox_12)'
- en: '[Chapter 13](ch13.html#sharing_workcolon_goroutines_and_channel)'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第13章](ch13.html#sharing_workcolon_goroutines_and_channel)'
- en: '**Working on one thing at a time isn’t always the fastest way to finish a task**.'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**一次只处理一件事情并不总是完成任务的最快方式**。'
- en: Some big problems can be broken into smaller tasks. **Goroutines** let your
    program work on several different tasks at once. Your goroutines can coordinate
    their work using **channels**, which let them send data to each other *and* synchronize
    so that one goroutine doesn’t get ahead of another. Goroutines let you take full
    advantage of computers with multiple processors, so that your programs run as
    fast as possible!
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些大问题可以分解成更小的任务。**Goroutines** 让你的程序可以同时处理几个不同的任务。你的goroutines可以使用**channels**来协调它们的工作，这使它们可以向彼此发送数据
    *并且* 同步，以确保一个goroutine不会领先于另一个。Goroutines让你充分利用具有多个处理器的计算机，从而使你的程序运行速度尽可能快！
- en: '[“Retrieving web pages”](ch13.html#retrieving_web_pages)'
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“检索网页”](ch13.html#retrieving_web_pages)'
- en: '[“Multitasking”](ch13.html#multitasking)'
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“多任务”](ch13.html#multitasking)'
- en: '[“Concurrency using goroutines”](ch13.html#concurrency_using_goroutines)'
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用goroutines进行并发”](ch13.html#concurrency_using_goroutines)'
- en: '[“Using goroutines”](ch13.html#using_goroutines)'
  id: totrans-295
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用goroutine”](ch13.html#using_goroutines)'
- en: '[“Using goroutines with our responseSize function”](ch13.html#using_goroutines_with_our_responsesize_f)'
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“在我们的responseSize函数中使用goroutines”](ch13.html#using_goroutines_with_our_responsesize_f)'
- en: '[“We don’t directly control when goroutines run”](ch13.html#we_donrsquot_directly_control_when_gorou)'
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“我们不能直接控制goroutines何时运行”](ch13.html#we_donrsquot_directly_control_when_gorou)'
- en: '[“Go statements can’t be used with return values”](ch13.html#go_statements_canrsquot_be_used_with_ret)'
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“无法在return语句中使用Go语句返回值”](ch13.html#go_statements_canrsquot_be_used_with_ret)'
- en: '[“Sending and receiving values with channels”](ch13.html#sending_and_receiving_values_with_channe)'
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用channels发送和接收值”](ch13.html#sending_and_receiving_values_with_channe)'
- en: '[“Synchronizing goroutines with channels”](ch13.html#synchronizing_goroutines_with_channels)'
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用channels同步goroutines”](ch13.html#synchronizing_goroutines_with_channels)'
- en: '[“Observing goroutine synchronization”](ch13.html#observing_goroutine_synchronization)'
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“观察goroutine同步”](ch13.html#observing_goroutine_synchronization)'
- en: '[“Fixing our web page size program with channels”](ch13.html#fixing_our_web_page_size_program_with_ch)'
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用channels修复我们的网页大小程序”](ch13.html#fixing_our_web_page_size_program_with_ch)'
- en: '[“Updating our channel to carry a struct”](ch13.html#updating_our_channel_to_carry_a_struct)'
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“更新我们的channel以传递一个结构体”](ch13.html#updating_our_channel_to_carry_a_struct)'
- en: '[“Your Go Toolbox”](ch13.html#your_go_toolbox_13)'
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“你的Go工具箱”](ch13.html#your_go_toolbox_13)'
- en: '[Chapter 14](ch14.html#code_quality_assurancecolon_automated_te)'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 14 章
- en: '**Are you sure your software is working right now? Really sure?**'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '-   您确定您的软件现在正常工作吗？真的确定吗？'
- en: Before you sent that new version to your users, you presumably tried out the
    new features to ensure they all worked. But did you try the *old* features to
    ensure you didn’t break any of them? *All* the old features? If that question
    makes you worry, your program needs **automated testing**. Automated tests ensure
    your program’s components work correctly, even after you change your code. Go’s
    `testing` package and `go test` tool make it easy to write automated tests, using
    the skills that you’ve already learned!
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在将新版本发送给用户之前，您可能已经尝试过新功能，以确保它们都正常工作。但是您有没有尝试过*旧*功能，以确保没有破坏其中任何一个？*所有*的旧功能？如果这个问题让您担心，那么您的程序需要**自动化测试**。自动化测试确保您程序的组件在您修改代码后仍然正常工作。Go语言的`testing`包和`go
    test`工具使编写自动化测试变得轻松，利用您已经学到的技能！
- en: '[“Automated tests find your bugs before someone else does”](ch14.html#automated_tests_find_your_bugs_before_so)'
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“自动化测试在其他人发现之前找到您的 bug”](ch14.html#automated_tests_find_your_bugs_before_so)'
- en: '[“A function we should have had automated tests for”](ch14.html#a_function_we_should_have_had_automated)'
  id: totrans-309
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“我们本应该为之编写自动化测试的函数”](ch14.html#a_function_we_should_have_had_automated)'
- en: '[“We’ve introduced a bug!”](ch14.html#wersquove_introduced_a_bugexcl)'
  id: totrans-310
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“我们引入了一个 bug！”](ch14.html#wersquove_introduced_a_bugexcl)'
- en: '[“Writing tests”](ch14.html#writing_tests)'
  id: totrans-311
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“编写测试”](ch14.html#writing_tests)'
- en: '[“Running tests with the “go test” command”](ch14.html#running_tests_with_the_ldquogo_testrdquo)'
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用“go test”命令运行测试”](ch14.html#running_tests_with_the_ldquogo_testrdquo)'
- en: '[“Testing our actual return values”](ch14.html#testing_our_actual_return_values)'
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“测试我们实际返回的值”](ch14.html#testing_our_actual_return_values)'
- en: '[“More detailed test failure messages with the “Errorf” method”](ch14.html#more_detailed_test_failure_messages_with)'
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用“Errorf”方法获取更详细的测试失败消息”](ch14.html#more_detailed_test_failure_messages_with)'
- en: '[“Test “helper” functions”](ch14.html#test_ldquohelperrdquor_functions)'
  id: totrans-315
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“测试“助手”函数”](ch14.html#test_ldquohelperrdquor_functions)'
- en: '[“Getting the tests to pass”](ch14.html#getting_the_tests_to_pass)'
  id: totrans-316
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“通过“go test”命令使测试通过”](ch14.html#getting_the_tests_to_pass)'
- en: '[“Test-driven development”](ch14.html#testhyphendriven_development)'
  id: totrans-317
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“测试驱动开发”](ch14.html#testhyphendriven_development)'
- en: '[“Another bug to fix”](ch14.html#another_bug_to_fix)'
  id: totrans-318
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“另一个要修复的 bug”](ch14.html#another_bug_to_fix)'
- en: '[“Running specific sets of tests”](ch14.html#running_specific_sets_of_tests)'
  id: totrans-319
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“运行特定测试集”](ch14.html#running_specific_sets_of_tests)'
- en: '[“Table-driven tests”](ch14.html#tablehyphendriven_tests)'
  id: totrans-320
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“基于表格的测试”](ch14.html#tablehyphendriven_tests)'
- en: '[“Fixing panicking code using a test”](ch14.html#fixing_panicking_code_using_a_test)'
  id: totrans-321
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用测试修复恐慌性代码”](ch14.html#fixing_panicking_code_using_a_test)'
- en: '[“Your Go Toolbox”](ch14.html#your_go_toolbox_14)'
  id: totrans-322
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“您的 Go 工具箱”](ch14.html#your_go_toolbox_14)'
- en: '[Chapter 15](ch15.html#responding_to_requestscolon_web_apps)'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 15 章](ch15.html#responding_to_requestscolon_web_apps)'
- en: '**This is the 21st century. Users want web apps**.'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '-   这是21世纪。用户需要 Web 应用程序。'
- en: Go’s got you covered there, too! The Go standard library includes packages to
    help you host your own web applications and make them accessible from any web
    browser. So we’re going to spend the final two chapters of the book showing you
    how to build web apps.
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Go 还包括帮助您托管自己的 Web 应用程序并使其可从任何 Web 浏览器访问的包。因此，我们将在本书的最后两章中向您展示如何构建 Web 应用程序。
- en: The first thing your web app needs is the ability to respond when a browser
    sends it a request. In this chapter, we’ll learn to use the `net/http` package
    to do just that.
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您的 Web 应用程序首先需要能够在浏览器发送请求时做出响应的能力。在本章中，我们将学习使用`net/http`包来实现这一点。
- en: '[“Writing web apps in Go”](ch15.html#writing_web_apps_in_go)'
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用 Go 编写 Web 应用程序”](ch15.html#writing_web_apps_in_go)'
- en: '[“Browsers, requests, servers, and responses”](ch15.html#browserscomma_requestscomma_serverscomma)'
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“浏览器、请求、服务器和响应”](ch15.html#browserscomma_requestscomma_serverscomma)'
- en: '[“A simple web app”](ch15.html#a_simple_web_app)'
  id: totrans-329
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“一个简单的 Web 应用程序”](ch15.html#a_simple_web_app)'
- en: '[“Your computer is talking to itself”](ch15.html#your_computer_is_talking_to_itself)'
  id: totrans-330
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“您的计算机正在与自己交流”](ch15.html#your_computer_is_talking_to_itself)'
- en: '[“Our simple web app, explained”](ch15.html#our_simple_web_appcomma_explained)'
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“我们的简单 Web 应用程序，解释”](ch15.html#our_simple_web_appcomma_explained)'
- en: '[“Resource paths”](ch15.html#resource_paths)'
  id: totrans-332
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“资源路径”](ch15.html#resource_paths)'
- en: '[“Responding differently for different resource paths”](ch15.html#responding_differently_for_different_res)'
  id: totrans-333
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“针对不同资源路径作出不同响应”](ch15.html#responding_differently_for_different_res)'
- en: '[“First-class functions”](ch15.html#firsthyphenclass_functions)'
  id: totrans-334
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“一流函数”](ch15.html#firsthyphenclass_functions)'
- en: '[“Passing functions to other functions”](ch15.html#passing_functions_to_other_functions)'
  id: totrans-335
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“将函数作为类型传递给其他函数”](ch15.html#passing_functions_to_other_functions)'
- en: '[“Functions as types”](ch15.html#functions_as_types)'
  id: totrans-336
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“将函数作为类型”](ch15.html#functions_as_types)'
- en: '[“What’s next”](ch15.html#whatrsquos_next)'
  id: totrans-337
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“接下来的步骤”](ch15.html#whatrsquos_next)'
- en: '[“Your Go Toolbox”](ch15.html#your_go_toolbox_15)'
  id: totrans-338
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“您的Go工具箱”](ch15.html#your_go_toolbox_15)'
- en: '[Chapter 16](ch16_split_000.html#a_pattern_to_follow_html_templates)'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“更新我们的模板以包含我们的签名”](ch16_split_001.html#updating_our_template_to_include_our_sig)'
- en: '**Your web app needs to respond with HTML, not plain text.**'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“从文件中读取签名片段的切片”](ch16_split_001.html#reading_a_slice_of_signatures_in_from_a)'
- en: Plain text is fine for emails and social media posts. But your pages need to
    be formatted. They need headings and paragraphs. They need forms where your users
    can submit data to your app. To do any of that, you need HTML code.
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 电子邮件和社交媒体帖子可以使用纯文本。但是您的页面需要格式化。它们需要标题和段落。它们需要表单，让用户向您的应用程序提交数据。要做到这些，您需要HTML代码。
- en: And eventually, you’ll need to insert data into that HTML code. That’s why Go
    offers the `html/template` package, a powerful way to include data in your app’s
    HTML responses. Templates are key to building bigger, better web apps, and in
    this final chapter, we’ll show you how to use them!
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最终，您需要在HTML代码中插入数据。这就是为什么Go提供了`html/template`包的原因，这是在您的应用程序HTML响应中包含数据的强大方法。模板是构建更大更好的Web应用程序的关键，在这一最后一章中，我们将向您展示如何使用它们！
- en: '[“A guestbook app”](ch16_split_000.html#a_guestbook_app)'
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“留言板应用程序”](ch16_split_000.html#a_guestbook_app)'
- en: '[“Functions to handle a request and check errors”](ch16_split_001.html#functions_to_handle_a_request_and_check)'
  id: totrans-344
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“处理请求并检查错误的函数”](ch16_split_001.html#functions_to_handle_a_request_and_check)'
- en: '[“Setting up a project directory and trying the app”](ch16_split_001.html#setting_up_a_project_directory_and_tryin)'
  id: totrans-345
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“建立项目目录并尝试应用程序”](ch16_split_001.html#setting_up_a_project_directory_and_tryin)'
- en: '[“Making a signature list in HTML”](ch16_split_001.html#making_a_signature_list_in_html)'
  id: totrans-346
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“在HTML中制作签名列表”](ch16_split_001.html#making_a_signature_list_in_html)'
- en: '[“Making our app respond with HTML”](ch16_split_001.html#making_our_app_respond_with_html)'
  id: totrans-347
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使我们的应用程序响应HTML”](ch16_split_001.html#making_our_app_respond_with_html)'
- en: '[“The “text/template” package”](ch16_split_001.html#the_ldquotextsoltemplaterdquo_package)'
  id: totrans-348
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[““text/template”包”](ch16_split_001.html#the_ldquotextsoltemplaterdquo_package)'
- en: '[“Using the io.Writer interface with a template’s Execute method”](ch16_split_001.html#using_the_iodotdotwriter_interface_with)'
  id: totrans-349
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用模板的Execute方法和io.Writer接口”](ch16_split_001.html#using_the_iodotdotwriter_interface_with)'
- en: '[“ResponseWriters and os.Stdout both satisfy io.Writer”](ch16_split_001.html#responsewriters_and_osdotdotstdout_both)'
  id: totrans-350
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“ResponseWriters和os.Stdout都满足io.Writer接口”](ch16_split_001.html#responsewriters_and_osdotdotstdout_both)'
- en: '[“Inserting data into templates using actions”](ch16_split_001.html#inserting_data_into_templates_using_acti)'
  id: totrans-351
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用操作将结构体字段插入模板”](ch16_split_001.html#inserting_struct_fields_into_a_template)'
- en: '[“Making parts of a template optional with “if” actions”](ch16_split_001.html#making_parts_of_a_template_optional_with)'
  id: totrans-352
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“通过“if”操作使模板的部分内容可选”](ch16_split_001.html#making_parts_of_a_template_optional_with)'
- en: '[“Repeating parts of a template with “range” actions”](ch16_split_001.html#repeating_parts_of_a_template_with_ldquo)'
  id: totrans-353
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“通过“range”操作重复模板的部分内容”](ch16_split_001.html#repeating_parts_of_a_template_with_ldquo)'
- en: '[“Inserting struct fields into a template with actions”](ch16_split_001.html#inserting_struct_fields_into_a_template)'
  id: totrans-354
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“从请求中获取表单字段的值”](ch16_split_001.html#getting_values_of_form_fields_from_the_r)'
- en: '[“Reading a slice of signatures in from a file”](ch16_split_001.html#reading_a_slice_of_signatures_in_from_a)'
  id: totrans-355
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**您的Web应用程序需要以HTML方式响应，而不是纯文本。**'
- en: '[“A struct to hold the signatures and signature count”](ch16_split_001.html#a_struct_to_hold_the_signatures_and_sign)'
  id: totrans-356
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“用于保存签名和签名计数的结构体”](ch16_split_001.html#a_struct_to_hold_the_signatures_and_sign)'
- en: '[“Updating our template to include our signatures”](ch16_split_001.html#updating_our_template_to_include_our_sig)'
  id: totrans-357
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第16章](ch16_split_000.html#a_pattern_to_follow_html_templates)'
- en: '[“Letting users add data with HTML forms”](ch16_split_001.html#letting_users_add_data_with_html_forms)'
  id: totrans-358
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“让用户使用HTML表单添加数据”](ch16_split_001.html#letting_users_add_data_with_html_forms)'
- en: '[“Form submission requests”](ch16_split_001.html#form_submission_requests)'
  id: totrans-359
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“表单提交请求”](ch16_split_001.html#form_submission_requests)'
- en: '[“Path and HTTP method for form submissions”](ch16_split_001.html#path_and_http_method_for_form_submission)'
  id: totrans-360
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“表单提交的路径和HTTP方法”](ch16_split_001.html#path_and_http_method_for_form_submission)'
- en: '[“Getting values of form fields from the request”](ch16_split_001.html#getting_values_of_form_fields_from_the_r)'
  id: totrans-361
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用操作将数据插入模板”](ch16_split_001.html#inserting_data_into_templates_using_acti)'
- en: '[“Saving the form data”](ch16_split_001.html#saving_the_form_data)'
  id: totrans-362
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“保存表单数据”](ch16_split_001.html#saving_the_form_data)'
- en: '[“HTTP redirects”](ch16_split_001.html#http_redirects)'
  id: totrans-363
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“HTTP重定向”](ch16_split_001.html#http_redirects)'
- en: '[“Our complete app code”](ch16_split_001.html#our_complete_app_code)'
  id: totrans-364
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“我们完整的应用程序代码”](ch16_split_001.html#our_complete_app_code)'
- en: '[“Your Go Toolbox”](ch16_split_001.html#your_go_toolbox_16)'
  id: totrans-365
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“你的Go工具箱”](ch16_split_001.html#your_go_toolbox_16)'
- en: '[Appendix A](app01.html#understanding_osdotopenfile_opening_file)'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附录A](app01.html#understanding_osdotopenfile_opening_file)
- en: '**Some programs need to write data to files, not just read data.**'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**有些程序需要将数据写入文件，而不仅仅是读取数据。**'
- en: Throughout the book, when we’ve wanted to work with files, you had to create
    them in your text editor for your programs to read. But some programs *generate*
    data, and when they do, they need to be able to *write* data to a file.
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在整本书中，当我们想要处理文件时，你必须在文本编辑器中创建它们，以便你的程序读取。但是一些程序会*生成*数据，当它们这样做时，它们需要能够*写入*数据到文件中。
- en: We used the `os.OpenFile` function to open a file for writing earlier in the
    book. But we didn’t have space then to fully explore how it worked. In this appendix,
    we’ll show you everything you need to know in order to use `os.OpenFile` effectively!
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们之前在书中使用了`os.OpenFile`函数来打开一个文件进行写入。但当时我们没有足够的空间来全面探讨它的工作原理。在这个附录中，我们将向你展示一切你需要了解的内容，以便有效地使用`os.OpenFile`！
- en: '[“Understanding os.OpenFile”](app01.html#understanding_osdotopenfile)'
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“理解os.OpenFile”](app01.html#understanding_osdotopenfile)'
- en: '[“Passing flag constants to os.OpenFile”](app01.html#passing_flag_constants_to_osdotopenfile)'
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“向os.OpenFile传递标志常量”](app01.html#passing_flag_constants_to_osdotopenfile)'
- en: '[“Binary notation”](app01.html#binary_notation)'
  id: totrans-372
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“二进制表示法”](app01.html#binary_notation)'
- en: '[“Bitwise operators”](app01.html#bitwise_operators)'
  id: totrans-373
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“按位运算符”](app01.html#bitwise_operators)'
- en: '[“The bitwise AND operator”](app01.html#the_bitwise_and_operator)'
  id: totrans-374
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“按位与运算符”](app01.html#the_bitwise_and_operator)'
- en: '[“The bitwise OR operator”](app01.html#the_bitwise_or_operator)'
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“按位或运算符”](app01.html#the_bitwise_or_operator)'
- en: '[“Using bitwise OR on the “os” package constants”](app01.html#using_bitwise_or_on_the)'
  id: totrans-376
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“在“os”包常量上使用按位或”](app01.html#using_bitwise_or_on_the)'
- en: '[“Using bitwise OR to fix our os.OpenFile options”](app01.html#using_bitwise_or_to_fix_our_osdotopenfil)'
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“使用按位或来修复我们的os.OpenFile选项”](app01.html#using_bitwise_or_to_fix_our_osdotopenfil)'
- en: '[“Unix-style file permissions”](app01.html#unixhyphenstyle_file_permissions)'
  id: totrans-378
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“类Unix文件权限”](app01.html#unixhyphenstyle_file_permissions)'
- en: '[“Representing permissions with the os.FileMode type”](app01.html#representing_permissions_with_the_osdotf)'
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“用os.FileMode类型表示权限”](app01.html#representing_permissions_with_the_osdotf)'
- en: '[“Octal notation”](app01.html#octal_notation)'
  id: totrans-380
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“八进制表示法”](app01.html#octal_notation)'
- en: '[“Converting octal values to FileMode values”](app01.html#converting_octal_values_to_filemode_valu)'
  id: totrans-381
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“将八进制值转换为FileMode值”](app01.html#converting_octal_values_to_filemode_valu)'
- en: '[“Calls to os.OpenFile, explained”](app01.html#calls_to_osdotopenfile_explained)'
  id: totrans-382
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“对os.OpenFile的调用，解释”](app01.html#calls_to_osdotopenfile_explained)'
- en: '[Appendix B](app02.html#six_things_we_didnapost_covercolon_Lefto)'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附录B](app02.html#six_things_we_didnapost_covercolon_Lefto)
- en: '**We’ve covered a lot of ground, and you’re almost finished with this book**.'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**我们已经覆盖了很多内容，你也快完成这本书了**。'
- en: We’ll miss you, but before we let you go, we wouldn’t feel right about sending
    you out into the world without a *little* more preparation. We’ve saved six important
    topics for this appendix.
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们会想念你，但在让你离开之前，我们觉得还是有必要给你一点*额外的*准备。我们在这个附录中保存了六个重要的主题。
- en: '[“#1 Initialization statements for “if””](app02.html#initialization_statements_for)'
  id: totrans-386
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“#1 “if”语句的初始化语句”](app02.html#initialization_statements_for)'
- en: '[“#2 The switch statement”](app02.html#the_switch_statement)'
  id: totrans-387
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“#2 switch语句”](app02.html#the_switch_statement)'
- en: '[“#3 More basic types”](app02.html#more_basic_types)'
  id: totrans-388
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“#3 更多基本类型”](app02.html#more_basic_types)'
- en: '[“#4 More about runes”](app02.html#more_about_runes)'
  id: totrans-389
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“#4 关于符文的更多信息”](app02.html#more_about_runes)'
- en: '[“#5 Buffered channels”](app02.html#buffered_channels)'
  id: totrans-390
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“#5 缓冲通道”](app02.html#buffered_channels)'
- en: '[“#6 Further reading”](app02.html#further_reading)'
  id: totrans-391
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“#6 进一步阅读”](app02.html#further_reading)'
