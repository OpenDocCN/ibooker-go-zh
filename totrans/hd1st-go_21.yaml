- en: 'Appendix B. six things we didn’t cover: Leftovers'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录B. 我们没有涵盖的六件事：剩余内容
- en: '![image](assets/f0495-01.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0495-01.png)'
- en: '**We’ve covered a lot of ground, and you’re almost finished with this book.**
    We’ll miss you, but before we let you go, we wouldn’t feel right about sending
    you out into the world without a *little* more preparation. We’ve saved six important
    topics for this appendix.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们已经覆盖了很多内容，你离完成这本书只剩一点了。** 我们会想念你，但在让你离开去面对这个世界之前，我们觉得还是应该给你*一点*额外的准备。我们为这个附录留了六个重要的话题。'
- en: '#1 Initialization statements for “if”'
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '#1 “if”语句的初始化语句'
- en: 'Here we have a `saveString` function that returns a single `error` value (or
    `nil` if there was no error). In our `main` function, we might store that return
    value in an `err` variable before handling it:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个`saveString`函数，它返回一个单一的`error`值（或者如果没有错误则为`nil`）。在我们的`main`函数中，我们可能会在处理之前将该返回值存储在一个`err`变量中：
- en: '![image](assets/f0496-01.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0496-01.png)'
- en: Now suppose we added another call to `saveString` in `main` that also uses an
    `err` variable. We have to remember to make the first use of `err` a short variable
    declaration, and change later uses to assignments. Otherwise, we’ll get a compile
    error for attempting to redeclare a variable.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们在`main`函数中添加了另一个对`saveString`的调用，也使用了一个`err`变量。我们必须记住将第一次对`err`的使用作为短变量声明，并将后续的使用改为赋值语句。否则，由于尝试重新声明变量，我们将会得到编译错误。
- en: '![image](assets/f0496-02.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0496-02.png)'
- en: But really, we’re only using the `err` variable within the `if` statement and
    its block. What if there was a way to limit the scope of the variable, so that
    we could treat each occurrence as a separate variable?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但实际上，我们只在`if`语句及其块内使用`err`变量。如果有一种方法可以限制变量的作用域，使得我们可以将每个出现视为一个单独的变量，那该有多好呢？
- en: Remember when we first covered `for` loops, back in [Chapter 2](ch02.html#which_code_runs_nextquestcolon_condition)?
    We said they could include an initialization statement, where you initialize variables.
    Those variables were only in scope within the `for` loop’s block.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们在[第2章](ch02.html#which_code_runs_nextquestcolon_condition)中首次介绍`for`循环时吗？我们说它们可以包含初始化语句，用于初始化变量。那些变量只在`for`循环的块内部有效。
- en: '![image](assets/f0496-03.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0496-03.png)'
- en: Similar to `for` loops, Go allows you to add an initialization statement before
    the condition in `if` statements. Initialization statements are usually used to
    initialize one or more variables for use within the `if` block.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于`for`循环，Go语言允许在`if`语句中的条件之前添加初始化语句。初始化语句通常用于初始化一个或多个变量，以便在`if`块中使用。
- en: '![image](assets/f0497-01.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0497-01.png)'
- en: The scope of variables declared within an initialization statement is limited
    to that `if` statement’s conditional expression and its block. If we rewrite our
    previous sample to use `if` initialization statements, the scope of each `err`
    variable will be limited to the `if` statement conditional and block, meaning
    we’ll have two completely separate `err` variables. We won’t have to worry about
    which one is defined first.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化语句内声明的变量的作用域仅限于`if`语句的条件表达式及其块中。如果我们重新编写之前的示例以使用`if`初始化语句，每个`err`变量的作用域将限制在`if`语句的条件和块内，这意味着我们将有两个完全独立的`err`变量。我们不需要担心哪个变量是首次定义的问题。
- en: '![image](assets/f0497-02.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0497-02.png)'
- en: This limitation on scope cuts both ways. If a function has multiple return values,
    and you need one of them *inside* the `if` statement and one *outside*, you probably
    won’t be able to call it in an `if` initialization statement. If you try, you’ll
    find the value you need outside the `if` block is out of scope.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这种对范围的限制两面性很明显。如果一个函数有多个返回值，并且你需要其中一个*在*`if`语句内部和一个*在*外部，你可能无法在`if`初始化语句中调用它。如果尝试这样做，你会发现你需要的值在`if`块外部是不在范围内的。
- en: '![image](assets/f0497-03.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0497-03.png)'
- en: 'Instead, you’ll need to call the function prior to the `if` statement, as normal,
    so that its return values are in scope both inside *and* outside the `if` statement:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，你需要在`if`语句之前像往常一样调用函数，以便它的返回值在`if`语句内部*和*外部都在范围内：
- en: '![image](assets/f0497-04.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0497-04.png)'
- en: '#2 The switch statement'
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '#2 `switch`语句'
- en: When you need to take one of several actions based on the value of an expression,
    it can lead to a mess of `if` statements and `else` clauses. The `switch` statement
    is a more efficient way to express these choices.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当你根据表达式的值来执行多种操作时，会导致一堆`if`语句和`else`子句的混乱。`switch`语句是表达这些选择的更高效方式。
- en: You write the `switch` keyword, followed by a condition expression. Then you
    add several `case` expressions, each with a possible value the condition expression
    could have. The first `case` whose value matches the condition expression is selected,
    and the code it contains is run. The other `case` expressions are ignored. You
    can also provide a `default` statement which will be run if no `case` matches.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你写下`switch`关键字，后面跟上条件表达式。然后你可以添加几个`case`表达式，每个都是条件表达式可能具有的值。第一个与条件表达式匹配的`case`被选择，并且运行其包含的代码。其他的`case`表达式被忽略。你也可以提供一个`default`语句，如果没有`case`匹配，则运行该语句。
- en: Here’s a reimplementation of a code sample that we wrote with `if` and `else`
    statements in [Chapter 12](ch12.html#back_on_your_feetcolon_recovering_from_f).
    This version requires significantly less code. For our `switch` condition, we
    select a random number from `1` to `3`. We provide `case` expressions for each
    of those values, each of which prints a different message. To alert us to the
    theoretically impossible situation where no `case` matches, we also provide a
    `default` statement that panics.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在[第12章](ch12.html#back_on_your_feetcolon_recovering_from_f)中使用`if`和`else`语句编写的代码示例的重新实现。这个版本需要的代码明显更少。对于我们的`switch`条件，我们从`1`到`3`中选择一个随机数。我们为每个值提供了`case`表达式，每个表达式打印不同的消息。为了提醒我们理论上不可能的情况，即没有一个`case`匹配，我们还提供了一个`default`语句，它会导致panic。
- en: '![image](assets/f0498-01.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0498-01.png)'
- en: there are no Dumb Questions
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 没有愚蠢的问题
- en: '**Q: I’ve seen other languages where you have to provide a “break” statement
    at the end of each `case`, or it will run the next `case`’s code as well. Does
    Go not require this?**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q: 我看过其他语言，那里你必须在每个`case`的末尾提供“break”语句，否则会运行下一个`case`的代码。Go语言不需要这样吗？**'
- en: '**A:** Developers have a history of forgetting the “break” statement in other
    languages, resulting in bugs. To help avoid this, Go automatically exits the `switch`
    at the end of a `case`’s code.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**A:** 开发人员在其他语言中经常忘记“break”语句，导致bug。为了避免这种情况，Go语言会在`case`代码的末尾自动退出`switch`语句。'
- en: There’s a `fallthrough` keyword you can use in a case, if you *do* want the
    next case’s code to run as well.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个`fallthrough`关键字，你可以在一个`case`中使用，如果你确实希望继续执行下一个`case`的代码。
- en: '#3 More basic types'
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '#3 更多基本类型'
- en: Go has additional basic types that we haven’t had space to talk about. You probably
    won’t have reason to use these in your own projects, but you’ll encounter them
    in some libraries, so it’s best to be aware they exist.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Go语言还有其他基本类型我们没有讨论到。你可能不会在自己的项目中使用这些类型，但在一些库中会遇到，所以最好知道它们的存在。
- en: '| Types | Description |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `int8 int16 int32 int64` | These hold integers, just like `int`, but they’re
    a specific size in memory (the number in the type name specifies the size in bits).
    Fewer bits consume less RAM or other storage; more bits mean larger numbers can
    be stored. You should use `int` unless you have a specific reason to use one of
    these; it’s more efficient. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `int8 int16 int32 int64` | 这些类型与`int`一样，但它们在内存中有特定的大小（类型名称中的数字指定了位数）。较少的位数消耗更少的RAM或其他存储空间；更多的位数意味着可以存储更大的数值。除非有特定原因需要使用其中之一，否则应该使用`int`，这样更高效。
    |'
- en: '| `uint` | This is just like `int`, but it holds only *unsigned* integers;
    it can’t hold negative numbers. This means you can fit larger numbers into the
    same amount of memory, as long as you’re certain the values will never be negative.
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `uint` | 这与`int`类似，但它只能存储*无符号*整数；不能存储负数。这意味着你可以在相同内存空间中存储更大的数值，前提是你确保这些值永远不会是负数。
    |'
- en: '| `uint8 uint16 uint32 uint64` | These also hold unsigned integers, but like
    the `int` variants, they consume a specific number of bits in memory. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `uint8 uint16 uint32 uint64` | 这些也是无符号整数，但像`int`变体一样，在内存中占用特定位数。 |'
- en: '| `float32` | The `float64` type holds floating-point numbers and consumes
    64 bits of memory. This is its smaller 32-bit cousin. (There are no 8-bit or 16-bit
    variants for floating-point numbers.) |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `float32` | `float64`类型表示浮点数，占用64位内存。这是其更小的32位版本。（浮点数没有8位或16位的变体。） |'
- en: '#4 More about runes'
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '#4 关于符文的更多信息'
- en: We introduced runes very briefly back in [Chapter 1](ch01.html#letapsos_get_going_syntax_basics),
    and we haven’t talked about them since. But we don’t want to end the book without
    going into a little more detail about them...
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第1章](ch01.html#letapsos_get_going_syntax_basics)中简要介绍了符文，之后就没有再详细讨论了。但是我们不希望结束本书而不多谈一点关于它们的细节...
- en: Back in the days before modern operating systems, most computing was done using
    the unaccented English alphabet, with its 26 letters (in upper- and lowercase).
    There were so few of them, a character could be represented by a single byte (with
    1 bit to spare). A standard called ASCII was used to ensure the same byte value
    was converted to the same letter on different systems.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代操作系统出现之前，大多数计算都是使用没有重音的英文字母表完成的，包括其大小写形式在内共 26 个字母。由于数量太少，每个字符可以由单个字节表示（还有
    1 位空余）。一个名为 ASCII 的标准被用来确保在不同系统上相同的字节值转换为相同的字母。
- en: But of course, the English alphabet isn’t the only writing system in the world;
    there are many others, some with thousands of different characters. The Unicode
    standard is an attempt to create one set of *4-byte* values that can represent
    every character in every one of these different writing systems (and many other
    characters besides).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，英文字母表并不是世界上唯一的书写系统；还有许多其他书写系统，有些拥有数千个不同的字符。Unicode 标准尝试创建一组可以表示每个不同书写系统中的每个字符（以及许多其他字符）的
    *4 字节* 值。
- en: Go uses values of the `rune` type to represent Unicode values. Usually, one
    rune represents one character. (There are exceptions, but those are beyond the
    scope of this book.)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Go 使用 `rune` 类型的值来表示 Unicode 值。通常，一个 `rune` 表示一个字符。（当然，也有例外情况，但这超出了本书的范围。）
- en: Go uses UTF-8, a standard that represents Unicode characters using 1 to 4 bytes
    each. Characters from the old ASCII set can still be represented using a single
    byte; other characters may require anywhere from 2 to 4 bytes.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Go 使用 UTF-8，这是一种标准，用于表示每个 Unicode 字符，每个字符使用 1 至 4 个字节。旧的 ASCII 集中的字符仍然可以使用单个字节表示；其他字符可能需要
    2 至 4 个字节。
- en: Here are two strings, one with letters from the English alphabet, and one with
    letters from the Russian alphabet.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个字符串，一个是包含英文字母的，另一个是包含俄语字母的。
- en: '![image](assets/f0500-01.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0500-01.png)'
- en: 'Generally, you don’t need to worry about the details of how characters are
    stored. That is, *until* you try to convert strings to their component bytes and
    back. If we try to call the `len` function with our two strings, for example,
    we get very different results:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您不需要担心字符存储的详细信息。也就是说，*直到* 您尝试将字符串转换为其组成的字节并返回。例如，如果我们尝试使用 `len` 函数来调用我们的两个字符串，则会得到非常不同的结果：
- en: '![image](assets/f0500-02.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0500-02.png)'
- en: When you pass a string to the `len` function, it returns the length in *bytes*,
    not *runes*. The English alphabet string fits into 5 bytes—each rune requires
    just 1 byte because it’s from the old ASCII character set. But the Russian alphabet
    string takes 10 bytes—each rune requires 2 bytes to store.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将字符串传递给 `len` 函数时，它会返回 *字节* 长度，而不是 *rune* 长度。英文字母表字符串适合 5 个字节 - 每个 `rune`
    仅需要 1 个字节，因为它来自旧的 ASCII 字符集。但俄语字母表字符串却需要 10 个字节 - 每个 `rune` 需要 2 个字节来存储。
- en: If you want the length of a string in *characters*, you should instead use the
    `unicode/utf8` package’s `RuneCountInString` function. This function will return
    the correct number of characters, regardless of the number of bytes used to store
    each one.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想获得字符串的 *字符* 长度，您应该使用 `unicode/utf8` 包的 `RuneCountInString` 函数。此函数将返回正确的字符数，无论用于存储每个字符的字节数。
- en: '![image](assets/f0500-03.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0500-03.png)'
- en: '**Working with partial strings safely means converting the string to runes,
    not bytes.**'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**安全地处理部分字符串意味着将字符串转换为 `rune`，而不是字节。**'
- en: Previously in the book, we’ve had to convert strings to slices of bytes so we
    could write them to an HTTP response or to the terminal. This works fine, as long
    as you make sure to write *all* the bytes in the resulting slice. But if you try
    to work with just *part* of the bytes, you’re asking for trouble.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书之前，我们不得不将字符串转换为字节切片，以便将它们写入 HTTP 响应或终端。只要确保写入结果切片中的 *所有* 字节，这种方法就可以正常工作。但如果你试图处理结果切片中的
    *部分* 字节，那就会麻烦不断。
- en: Here’s some code that attempts to strip the first three characters from the
    previous strings. We convert each string to a slice of bytes, then use the slice
    operator to gather everything from the fourth element to the end of the slice.
    Then we convert the partial byte slices back to strings and print them.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些试图从前面字符串中剥离前三个字符的代码。我们将每个字符串转换为字节切片，然后使用切片操作符收集从第四个元素到切片末尾的所有内容。然后，我们将部分字节切片再转换回字符串并打印出来。
- en: '![image](assets/f0501-01.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0501-01.png)'
- en: This works fine with the English alphabet characters, which each take up 1 byte.
    But the Russian characters each take *2 bytes*. Cutting off the first 3 bytes
    of that string omits only the first character, and “half” of the second, resulting
    in an unprintable character.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这在处理英文字母字符时效果很好，每个字符占用1字节。但是俄语字符每个占用*2字节*。截取该字符串的前3个字节只会省略第一个字符和第二个字符的“一半”，导致一个不可打印字符。
- en: Go supports converting from strings to slices of `rune` values, and from slices
    of runes back to strings. To work with partial strings, you should convert them
    to a slice of `rune` values rather than a slice of `byte` values. That way, you
    won’t accidentally grab just part of the bytes for a rune.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Go支持将字符串转换为`rune`值的切片，并从rune的切片转换回字符串。要处理部分字符串，应将其转换为`rune`值的切片，而不是字节值的切片。这样，您就不会意外地只抓取rune的部分字节。
- en: Here’s an update to the previous code that converts the strings to slices of
    runes instead of slices of bytes. Our slice operators now omit the first three
    *runes* from each slice, rather than the first *3 bytes*. When we convert the
    partial slices to strings and print them, we get only the last two (complete)
    characters from each.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个更新后的代码，将字符串转换为`rune`片段而不是字节片段。我们的切片操作现在省略了每个切片的前三个*rune*，而不是前*3个字节*。当我们将部分切片转换为字符串并打印它们时，我们只得到每个切片的最后两个（完整的）字符。
- en: '![image](assets/f0501-02.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0501-02.png)'
- en: You’ll encounter similar problems if you try to use a slice of bytes to process
    each character of a string. Processing 1 byte at a time will work as long as your
    strings are all characters from the ASCII set. But as soon as a character comes
    along that requires 2 or more bytes, you’ll find yourself working with just part
    of the bytes for a rune again.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尝试使用字节片段处理字符串中的每个字符，会遇到类似的问题。只要您的字符串都是ASCII字符集中的字符，逐字节处理就可以。但是一旦出现需要2个或更多字节的字符，您将再次发现自己只处理了部分rune的字节。
- en: This code uses a `for ... range` loop to print the English alphabet characters,
    1 byte per character. Then it tries to do the same with the Russian alphabet characters,
    1 byte per character—which fails because each of these characters requires 2 bytes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码使用`for ... range`循环打印英文字母字符，每个字符1字节。然后尝试对俄文字母字符执行相同操作，每个字符1字节——但失败了，因为每个字符都需要2字节。
- en: '![image](assets/f0502-01.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0502-01.png)'
- en: Go allows you to use a `for...range` loop on a string, which will process a
    *rune* at a time, not a *byte* at a time. This is a much safer approach. The first
    variable you provide will be assigned the current byte index (not the rune index)
    within the string. The second variable will be assigned the current rune.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中，您可以在字符串上使用`for...range`循环，它将逐个处理*rune*，而不是每次处理一个*字节*。这是一种更安全的方法。您提供的第一个变量将被分配为字符串中当前字节的索引（而不是rune的索引）。第二个变量将被分配为当前rune。
- en: Here’s an update to the above code that uses a `for...range` loop to process
    the strings themselves, not their byte representations. You can see from the indexes
    in the output that 1 byte at a time is being processed for the English characters,
    but *2 bytes* at a time are being processed for the Russian characters.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是上述代码的更新版本，使用`for...range`循环处理字符串本身，而不是它们的字节表示。您可以从输出中看到，处理英文字符时每次处理1字节，但处理俄文字符时每次处理*2字节*。
- en: '![image](assets/f0502-02.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![image](assets/f0502-02.png)'
- en: Go’s runes make it easy to work with partial strings and not have to worry about
    whether they contain Unicode characters or not. Just remember, anytime you want
    to work with just part of a string, convert it to runes, not bytes!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Go的rune使得在处理部分字符串时非常方便，并且无需担心它们是否包含Unicode字符。只需记住，每当您想处理字符串的一部分时，请将其转换为rune，而不是字节！
- en: '#5 Buffered channels'
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '#5 有缓冲通道'
- en: 'There are two kinds of Go channels: *unbuffered* and *buffered*.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Go通道有两种类型：*无缓冲*和*有缓冲*。
- en: All the channels we’ve shown you so far have been unbuffered. When a goroutine
    sends a value on an unbuffered channel, it immediately blocks until another goroutine
    receives the value. Buffered channels, on the other hand, can hold a certain number
    of values before causing the sending goroutine to block. Under the right circumstances,
    this can improve a program’s performance.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们向您展示的所有通道都是无缓冲的。当一个goroutine在无缓冲通道上发送一个值时，它立即阻塞，直到另一个goroutine接收该值。另一方面，有缓冲通道可以在导致发送goroutine阻塞之前保存一定数量的值。在适当的情况下，这可以提高程序的性能。
- en: When creating a channel, you can make a buffered channel by passing a second
    argument to `make` with the number of values the channel should be able to hold
    in its buffer.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 创建通道时，可以通过向`make`传递第二个参数来创建带缓冲的通道，该参数指定通道应在其缓冲区中能够容纳的值的数量。
- en: '![image](assets/f0503-01.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0503-01.png)'
- en: When a goroutine sends a value via the channel, that value is added to the buffer.
    Instead of blocking, the sending goroutine continues running.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个 goroutine 通过通道发送一个值时，该值被添加到缓冲区中。发送 goroutine 不会阻塞，而是继续运行。
- en: '![image](assets/f0503-02.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0503-02.png)'
- en: The sending goroutine can continue sending values on the channel until the buffer
    is full; only then will an additional send operation cause the goroutine to block.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 发送 goroutine 可以继续向通道发送值，直到缓冲区满为止；只有在额外的发送操作导致 goroutine 阻塞时才会发生。
- en: '![image](assets/f0503-03.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0503-03.png)'
- en: When another goroutine receives a value from the channel, it pulls the earliest-added
    value from the buffer.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当另一个 goroutine 从通道接收一个值时，它从缓冲区中提取最早添加的值。
- en: '![image](assets/f0503-04.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0503-04.png)'
- en: Additional receive operations will continue to empty the buffer, while additional
    sends will fill the buffer back up.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 添加额外的接收操作将继续清空缓冲区，而添加额外的发送操作将重新填充缓冲区。
- en: '![image](assets/f0503-05.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0503-05.png)'
- en: Let’s try running a program with an unbuffered channel, and then change it to
    a buffered channel so you can see the difference. Below, we define a `sendLetters`
    function to run as a goroutine. It sends four values to a channel, sleeping 1
    second before each value. In `main`, we create an unbuffered channel and pass
    it to `sendLetters`. Then we put the `main` goroutine to sleep for 5 seconds.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试运行一个具有非缓冲通道的程序，然后将其更改为具有缓冲通道，以便您可以看到区别。下面，我们定义一个`sendLetters`函数作为一个 goroutine
    运行。它向一个通道发送四个值，每个值之间睡眠 1 秒。在`main`中，我们创建一个非缓冲通道并将其传递给`sendLetters`。然后我们让`main`
    goroutine 睡眠 5 秒。
- en: '![image](assets/f0504-01.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0504-01.png)'
- en: When the `main` goroutine wakes up, it receives four values from the channel.
    But the `sendLetters` goroutine was blocked, waiting for `main` to receive the
    first value. So the `main` goroutine has to wait 1 second between each remaining
    value while the `sendLetters` goroutine catches back up.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当`main` goroutine 醒来时，它从通道接收四个值。但`sendLetters` goroutine 被阻塞，等待`main`接收第一个值。因此，`main`
    goroutine 必须在每个剩余值之间等待 1 秒，直到`sendLetters` goroutine 赶上。
- en: We can speed our program up a bit simply by adding a single-value buffer to
    the channel.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过向通道添加单值缓冲区简单地加快程序运行速度。
- en: All we have to do is add a second argument when calling `make`. Interactions
    with the channel are otherwise identical, so we don’t have to make any other changes
    to the code.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`make`时，只需添加第二个参数。与通道的交互除此之外完全相同，因此我们不必对代码进行其他更改。
- en: Now, when `sendLetters` sends its first value to the channel, it doesn’t block
    until the `main` goroutine receives it. The sent value goes in the channel’s buffer
    instead. It’s only when the second value is sent (and none have yet been received)
    that the channel’s buffer is filled and the `sendLetters` goroutine blocks. Adding
    a one-value buffer to the channel shaves 1 second off the program’s run time.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当`sendLetters`向通道发送其第一个值时，它不会阻塞，直到`main` goroutine 接收它。发送的值放在通道的缓冲区中。只有当发送第二个值时（而尚未接收任何值），通道的缓冲区被填满，`sendLetters`
    goroutine 才会阻塞。向通道添加一个单值缓冲区可以减少程序运行时间 1 秒。
- en: '![image](assets/f0505-01.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0505-01.png)'
- en: Increasing the buffer size to `3` allows the `sendLetters` goroutine to send
    three values without blocking. It blocks on the final send, but this is after
    all of its 1-second `Sleep` calls have completed. So when the `main` goroutine
    wakes up after 5 seconds, it immediately receives the three values waiting in
    the buffered channel, as well as the value that caused `sendLetters` to block.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 将缓冲区大小增加到`3`允许`sendLetters` goroutine 在不阻塞的情况下发送三个值。它在最后一个发送时阻塞，但这是在其所有 1 秒的`Sleep`调用完成之后。因此，当`main`
    goroutine 在 5 秒后唤醒时，它立即接收缓冲通道中等待的三个值，以及导致`sendLetters`阻塞的值。
- en: '![image](assets/f0505-02.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图片](assets/f0505-02.png)'
- en: This allows the program to complete in only 5 seconds!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得程序仅需 5 秒完成！
- en: '#6 Further reading'
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '#6 进一步阅读'
- en: This is the end of the book. But it’s just the beginning of your journey as
    a Go programmer. We want to recommend a few resources that will help you along
    the road.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书的结尾。但这只是你作为 Go 程序员旅程的开端。我们想推荐一些资源，这些资源将帮助你在道路上前行。
- en: '***The Head First Go Website***'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '***Head First Go 网站***'
- en: '*[https://headfirstgo.com/](https://headfirstgo.com/)*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*[https://headfirstgo.com/](https://headfirstgo.com/)*  '
- en: The official website for this book. Here you can download all our code samples,
    practice with additional exercises, and learn about new topics, all written in
    the same easy-to-read, incredibly witty prose!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '这本书的官方网站。在这里，你可以下载我们所有的代码示例，练习额外的练习，并学习关于新主题的知识，所有内容都以同样易读且极具幽默感的文风编写！  '
- en: '***A Tour of Go***'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '***Go语言之旅***'
- en: '*[https://tour.golang.org](https://tour.golang.org)*'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*[https://tour.golang.org](https://tour.golang.org)*  '
- en: This is an interactive tutorial on Go’s basic features. It covers much the same
    material as this book, but includes some additional details. Examples in the Tour
    can be edited and run right from your browser (just like in the Go Playground).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '这是关于Go基本特性的互动教程。它涵盖了与本书大部分相同的内容，但包括一些额外的细节。在Tour中的示例可以直接在浏览器中编辑和运行（就像在Go Playground中一样）。  '
- en: '***Effective Go***'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '***Effective Go***  '
- en: '*[https://golang.org/doc/effective_go.html](https://golang.org/doc/effective_go.html)*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*[https://golang.org/doc/effective_go.html](https://golang.org/doc/effective_go.html)*  '
- en: A guide maintained by the Go team on how to write idiomatic Go code (that is,
    code that follows community conventions).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '由Go团队维护的关于如何编写符合社区约定的惯用Go代码的指南。  '
- en: '***The Go Blog***'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '***Go博客***  '
- en: '*[https://blog.golang.org](https://blog.golang.org)*'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '*[https://blog.golang.org](https://blog.golang.org)*  '
- en: The official Go blog. Offers helpful articles on using Go and announcements
    of new Go versions and features.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '官方的Go博客。提供有关使用Go的有用文章以及新版本和功能的公告。  '
- en: '***Package Documentation***'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '***包文档***  '
- en: '*[https://golang.org/pkg/](https://golang.org/pkg/)*'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '*[https://golang.org/pkg/](https://golang.org/pkg/)*  '
- en: Documentation on all the standard packages. These are the same docs available
    through the `go doc` command, but all the libraries are in one convenient list
    for browsing. The `encoding/json`, `image`, and `io/ioutil` packages might be
    interesting places to start.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '所有标准包的文档。这些文档与`go doc`命令提供的相同，但所有库都方便地列在一个列表中供浏览。`encoding/json`、`image` 和
    `io/ioutil` 包可能是开始的有趣地方。  '
- en: '***The Go Programming Language***'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '***Go语言编程***  '
- en: '*[https://www.gopl.io/](https://www.gopl.io/)*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*[https://www.gopl.io/](https://www.gopl.io/)*  '
- en: This book is the only resource on this page that isn’t free, but it’s worth
    it. It’s well known and widely used.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '这本书是这个页面上唯一不免费的资源，但是它是值得的。它众所周知且广泛使用。  '
- en: 'There are two kinds of technical books out there: tutorial books (like the
    one you’re holding) and reference books (like *The Go Programming Language*).
    And it’s a great reference: it covers all the topics we didn’t have room for in
    this book. If you’re going to continue using Go, this is a must-read.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '有两种技术书籍：教程类书籍（比如你手上的这本）和参考书籍（像*Go语言编程*）。而这是一个很好的参考书籍：它涵盖了我们在这本书中没有空间的所有主题。如果你打算继续使用Go，这本书是必读的。  '
