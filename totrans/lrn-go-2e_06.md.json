["```go\nvar x int32 = 10\nvar y bool = true\n```", "```go\nvar x int32 = 10\nvar y bool = true\npointerX := &x\npointerY := &y\nvar pointerZ *string\n```", "```go\nx := \"hello\"\npointerToX := &x\n```", "```go\nx := 10\npointerToX := &x\nfmt.Println(pointerToX)  // prints a memory address\nfmt.Println(*pointerToX) // prints 10\nz := 5 + *pointerToX\nfmt.Println(z)           // prints 15\n```", "```go\nvar x *int\nfmt.Println(x == nil) // prints true\nfmt.Println(*x)       // panics\n```", "```go\nx := 10\nvar pointerToX *int\npointerToX = &x\n```", "```go\nvar x = new(int)\nfmt.Println(x == nil) // prints false\nfmt.Println(*x)       // prints 0\n```", "```go\nx := &Foo{}\nvar y string\nz := &y\n```", "```go\ntype person struct {\n    FirstName  string\n    MiddleName *string\n    LastName   string\n}\n\np := person{\n  FirstName:  \"Pat\",\n  MiddleName: \"Perry\", // This line won't compile\n  LastName:   \"Peterson\",\n}\n```", "```go\ncannot use \"Perry\" (type string) as type *string in field value\n```", "```go\ncannot take the address of \"Perry\"\n```", "```go\nfunc makePointer[T any](t T) *T {\n    return &t\n}\n```", "```go\np := person{\n  FirstName:  \"Pat\",\n  MiddleName: makePointer(\"Perry\"), // This works\n  LastName:   \"Peterson\",\n}\n```", "```go\nint x = 10;\nint y = x;\ny = 20;\nSystem.out.println(x); // prints 10\n```", "```go\nclass Foo:\n    def __init__(self, x):\n        self.x = x\n\ndef outer():\n    f = Foo(10)\n    inner1(f)\n    print(f.x)\n    inner2(f)\n    print(f.x)\n    g = None\n    inner2(g)\n    print(g is None)\n\ndef inner1(f):\n    f.x = 20\n\ndef inner2(f):\n    f = Foo(30)\n\nouter()\n```", "```go\n20\n20\nTrue\n```", "```go\nfunc failedUpdate(g *int) {\n    x := 10\n    g = &x\n}\n\nfunc main() {\n    var f *int // f is nil\n    failedUpdate(f)\n    fmt.Println(f) // prints nil\n}\n```", "```go\nfunc failedUpdate(px *int) {\n    x2 := 20\n    px = &x2\n}\n\nfunc update(px *int) {\n    *px = 20\n}\n\nfunc main() {\n    x := 10\n    failedUpdate(&x)\n    fmt.Println(x) // prints 10\n    update(&x)\n    fmt.Println(x) // prints 20\n}\n```", "```go\nfunc MakeFoo(f *Foo) error {\n  f.Field1 = \"val\"\n  f.Field2 = 20\n  return nil\n}\n```", "```go\nfunc MakeFoo() (Foo, error) {\n  f := Foo{\n    Field1: \"val\",\n    Field2: 20,\n  }\n  return f, nil\n}\n```", "```go\nf := struct {\n  Name string `json:\"name\"`\n  Age int `json:\"age\"`\n}{}\nerr := json.Unmarshal([]byte(`{\"name\": \"Bob\", \"age\": 30}`), &f)\n```", "```go\nr = open_resource()\nwhile r.has_data() {\n  data_chunk = r.next_chunk()\n  process(data_chunk)\n}\nclose(r)\n```", "```go\nfile, err := os.Open(fileName)\nif err != nil {\n    return err\n}\ndefer file.Close()\ndata := make([]byte, 100)\nfor {\n    count, err := file.Read(data)\n    process(data[:count])\n    if err != nil {\n        if errors.Is(err, io.EOF) {\n            return nil\n        }\n        return err\n    }\n}\n```"]