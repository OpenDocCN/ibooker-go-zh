- en: Chapter 5\. JSON Recipes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 JSON配方
- en: 5.0 Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.0 引言
- en: JSON (JavaScript Object Notation) is a lightweight data-interchange text format.
    It’s meant to be read by humans but also easily read by machines and is based
    on a subset of JavaScript. JSON was originally defined by Douglas Crockford, but
    is currently described by RFC 7159, as well as ECMA-404\. JSON is popularly used
    in REST-based web services, although they don’t necessarily need to accept or
    return JSON data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: JSON（JavaScript对象表示法）是一种轻量级的数据交换文本格式。它旨在供人类阅读，但也易于机器读取，基于JavaScript的一个子集。JSON最初由Douglas
    Crockford定义，但目前由RFC 7159和ECMA-404描述。JSON在基于REST的Web服务中广泛使用，尽管它们不一定需要接受或返回JSON数据。
- en: JSON is really popular with RESTful web services but it’s also frequently used
    for configuration. Creating and consuming JSON is commonplace in many web applications,
    from getting data from a web service, to authenticating your web application through
    a third-party authentication service, to controlling other services.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: JSON在RESTful web服务中非常流行，但也经常用于配置。在许多Web应用程序中，从获取Web服务中的数据，到通过第三方身份验证服务验证Web应用程序，再到控制其他服务，创建和消费JSON是司空见惯的。
- en: Go supports JSON in the standard library using the `encoding/json` package.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Go使用`encoding/json`包支持标准库中的JSON。
- en: 5.1 Parsing JSON data byte arrays to structs
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.1 解析JSON数据字节数组到结构体
- en: Problem
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to read JSON data byte arrays and store it into structs.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望读取JSON数据字节数组并将其存储到结构体中。
- en: Solution
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Create structs to contain the JSON data then use `Unmarshal` in the `encoding/json`
    package to unmarshal the data into the structs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 创建结构体以包含JSON数据，然后使用`encoding/json`包中的`Unmarshal`函数将数据解封装到结构体中。
- en: Discussion
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'Parsing JSON with the the `encoding/json` package is straightforward:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`encoding/json`包解析JSON非常简单：
- en: Create structs to contain the JSON data
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建结构体以包含JSON数据。
- en: Unmarshal the JSON string into the structs
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将JSON字符串解封装为结构体
- en: Let’s take a sample JSON file, containing data on the Star Wars character Luke
    Skywalker, taken from SWAPI, the Star Wars API. You can access this here directly — [*https://swapi.dev/api/people/1*](https://swapi.dev/api/people/1).
    I have taken the data and stored it in a file named `skywalker.json`
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个示例JSON文件，包含来自SWAPI（星球大战API）的卢克·天行者角色数据。您可以直接访问此处的数据 — [*https://swapi.dev/api/people/1*](https://swapi.dev/api/people/1)。我已经将数据存储在名为`skywalker.json`的文件中。
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To store the data in the JSON, we can create a struct like this.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要将数据存储在JSON中，我们可以创建这样一个结构体。
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The string literal after the definition each field in the struct is called a
    *struct tag*. Go determines the mapping between the struct fields and the JSON
    elements using these struct tags. You don’t need them if your mapping is exactly
    the same. However as you can see, JSON normally uses snake case (variables with
    space replaced by underscoe), with lower case characters while in Go we use camel
    case (variables has no space but separation indicated by a single capitalized
    letter).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在结构体定义每个字段后的字符串字面量称为*结构标记*。Go使用这些结构标记确定结构字段与JSON元素之间的映射。如果映射完全相同，则不需要它们。然而正如你所见，JSON通常使用蛇形命名法（用下划线替换空格），使用小写字符，而在Go中我们使用驼峰命名法（变量无空格，但用一个大写字母表示分隔）。
- en: As you can see from the struct, we can define string slices to store the arrays
    in the JSON and also use something like `time.Time` as the data type as well.
    In fact we can use most Go data types, and even maps (though only maps with strings
    as keys are supported).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从结构体中看到的，我们可以定义字符串切片以存储JSON中的数组，并使用`time.Time`等数据类型。事实上，我们可以使用大多数Go数据类型，甚至是映射（尽管只支持具有字符串键的映射）。
- en: Unmarshalling the data into the struct is just a single function call, using
    `json.Unmarshal`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据解封装到结构体中只需一个函数调用，使用`json.Unmarshal`。
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the code above, after reading the data from the file, we create a `Person`
    struct and then unmarshal the data into it using `json.Unmarshal`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，从文件读取数据后，我们创建一个`Person`结构体，然后使用`json.Unmarshal`将数据解封装到其中。
- en: The JSON data came from the Star Wars API, so let’s have a bit of fun and grab
    it directly from the API. We use the `http.Get` function and pass the URL in,
    but everything else is the same.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: JSON数据来自Star Wars API，所以让我们通过API直接获取并稍作乐趣。我们使用`http.Get`函数传入URL，但其他一切都一样。
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you print out the `Person` struct this is what we should get (the output
    is prettified).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打印`Person`结构体，这就是我们应该得到的结果（输出已美化）。
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 5.2 Parsing unstructured JSON data
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.2 解析非结构化JSON数据
- en: Problem
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to parse some JSON data but you don’t know the JSON data’s structure
    or properties in advance enough to build structs or the keys to the values are
    dynamic.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您想解析一些 JSON 数据，但不知道 JSON 数据的结构或属性足够提前来构建结构体，或者键到值的映射是动态的。
- en: Solution
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: We use the same method as before but instead of pre-defined structs, we use
    a map of strings to empty interfaces to store the data.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用与之前相同的方法，但是不使用预定义的结构体，而是使用字符串映射到空接口来存储数据。
- en: Discussion
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The structure of the Star Wars API are quite clear. However this isn’t always
    the case. Sometimes we just don’t know the structure well enough to create structs
    and documentation is not available. Also, sometimes keys to the values can be
    dynamic. Take a look at this JSON.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 明确星球大战 API 的结构。但并非总是如此。有时我们根本不知道结构足够清晰以创建结构体，而且没有可用的文档。此外，有时键到值的映射可能是动态的。看看这个
    JSON。
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Obiviously from the JSON, the keys are not consistent and can change with the
    addition of a character. For such cases, how do we unmarshal the JSON data? Instead
    of predefined structs, we can use a map of strings to empty interfaces. Let’s
    look at the code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，从 JSON 中，键不一致，并且可以随着字符的添加而改变。对于这种情况，我们如何解析 JSON 数据？我们可以使用字符串映射到空接口，而不是预定义的结构体。让我们看一下代码。
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let’s take a look at the output.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看输出。
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let’s try the same code on the earlier Luke Skywalker JSON data and see the
    output.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试将同样的代码应用于早期的卢克·天行者 JSON 数据，并看看输出。
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You might be thinking that this is much easier and simpler than trying to figure
    out the structs! Also it’s a lot more forgiving and flexible, why not use this
    instead? Actually using structs has its advantages. Using empty interfaces essentially
    make the data structure untyped. Structs can catch errors in the JSON where empty
    interfaces simply let it go.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能认为这比尝试弄清楚结构体要容易和简单得多！而且它更具宽容性和灵活性，为什么不使用这个呢？实际上使用结构体具有其优势。使用空接口基本上使数据结构无类型。结构体可以捕获
    JSON 中的错误，而空接口则简单地让其通过。
- en: It’s a lot easier to retrieve data from structs than from a map because you
    know for sure what fields are available. Also you need to do type assertion in
    order to get the data out of an interface. For example, let’s say we want to get
    the films that featured Darth Vader above, so you might think you can do this.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 从结构体中检索数据比从映射中更容易，因为您确切知道哪些字段是可用的。此外，您需要进行类型断言才能从接口中获取数据。例如，假设我们想要获取上面提到的出现达斯·维达的电影，所以您可能认为可以这样做。
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can’t — you’ll see this error instead.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能 — 你会看到这个错误而不是。
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is because the variable `vader` is an empty interface, you have to type
    assert it first before you do anything.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为变量`vader`是一个空接口，您必须首先对其进行类型断言，然后才能执行任何操作。
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You should normally try to use structs and only maps to empty interfaces as
    a last resort.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，您应该尽量使用结构体，而只有在最后一种情况下才使用映射到空接口。
- en: 5.3 Parsing JSON data streams into structs
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.3 将 JSON 数据流解析为结构体
- en: Problem
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to parse JSON data from a stream.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您想从流中解析 JSON 数据。
- en: Solution
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Create structs to contain the JSON data. Create a decoder using `NewDecoder`
    in the `encoding/json` package, then call `Decode` on the decoder to decode data
    into the structs.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 创建结构体以包含 JSON 数据。在`encoding/json`包中使用`NewDecoder`创建解码器，然后在解码器上调用`Decode`将数据解码为结构体。
- en: Discussion
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Using `Unmarshal` is simple and straightforward for JSON files or API data.
    But what happens if the API is streaming JSON data? In that case we can no longer
    use `Unmarshal` because `Unmarshal` needs to read the whole file at once. Instead,
    the `encoding/json` package provides a `Decoder` function for us to handle the
    data.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 JSON 文件或 API 数据，使用`Unmarshal`简单而直接。但是如果 API 是流式 JSON 数据，会发生什么？在这种情况下，我们不能再使用`Unmarshal`，因为`Unmarshal`需要一次性读取整个文件。相反，`encoding/json`包提供了一个`Decoder`函数来处理数据。
- en: It might be difficult to understand, what’s the difference between JSON data
    and streaming JSON data so let’s take a look at the difference by comparing 2
    different JSON files.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 可能很难理解 JSON 数据和流 JSON 数据之间的区别，所以让我们通过比较两个不同的 JSON 文件来看一下它们之间的区别。
- en: In this first JSON file we have an array of 3 JSON objects (I truncated part
    of the data to make it easier to read).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个 JSON 文件中，我们有一个包含 3 个 JSON 对象的数组（我截取了部分数据以便更容易阅读）。
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To read this, we can use `Unmarshal` by unmarshalling into an array of `Person`
    structs.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要读取这个，我们可以使用`Unmarshal`将其解码为一个`Person`结构体数组。
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will result in an output like this.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致如下输出。
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This is an array of Person structs, which we get after unmarshalling a single
    JSON array. However when we get a stream of JSON objects, this is no longer possible.
    Let’s look at another JSON file, one that is representative of a JSON data stream.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Notice that this is not a single JSON object but 3 consecutive JSON objects.
    This is no longer a valid JSON file but it’s something you can get when you read
    the `Body` of a `http.Response` struct. If you try to read this using `Unmarshal`
    you will get an error output.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: However, you can parse it by decoding it using a `Decoder`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: First, we create a decoder using `json.NewDecoder` and passing it the reader,
    in this case it’s the file we read from. Then while we’re looping in the `for`
    loop, we call `Decode` on the decoder, passing it the struct we want to store
    the data in. If all goes well, every time it loops, a new `Person` struct is created
    from the data. We can use the data then. If there’s no more data in the reader,
    i.e. we hit `io.EOF`, we’ll break from the for loop.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: In the case of the code above, we pass in a channel, in which we store the `Person`
    struct every loop. When we’re done with reading all the JSON in the file, we’ll
    close the channel.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here’s the output from the code above.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can see that there are 3 `Person` structs being printed out here, one after
    another, as opposed to the earlier one where it was an array of `Person` structs.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: A question that sometimes arises is when should we use `Unmarshal` and when
    should we use `Decode`?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '`Unmarshal` is easier to use for a single JSON object but it won’t work when
    you have a stream of them coming in from a reader. Also, its simplicity means
    it’s not as flexible, you just get the whole JSON data at a go.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '`Decode` on the other hand, works well for both single JSON object or streaming
    JSON data. Also, with `Decode` you can you can do stuff with the JSON at a finer
    level without needing to get the entire JSON data out first. This is because you
    can inspect the JSON as it comes in, even at a token level. However the slight
    drawback is that it is more verbose.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: In addition, `Decode` is a bit faster. Let’s do a quick benchmarking test on
    both.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here’s we’re benchmarking `Unmarshal` and `Decode` using the standard Go benchmarking
    tool. To make sure we’re benchmarking properly we reset the timer just before
    we run the iterations that test the performance of `Unmarshal` and `Decode`. We
    place the creation of the decoder before the benchmarking because we only need
    to create the decoder once, since it’s going to wrap around the reader that’s
    streaming data in. However because once `Decode` is called, we need to move the
    offset to the start for the next benchmarking loop.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: We run this in the command line to start the benchmarking.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: And this is the result.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you can see, `Decode` is only a bit faster, taking 2258 ns/op (nanoseconds
    per operation) while `Unmarshal` takes 2418 ns/op. However, `Decode` only uses
    48 B/op (bytes per operation), considerably less than `Unmarshal` which uses 272
    B/op.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`Decode` 只快了一点点，每次操作花费 2258 纳秒（每操作纳秒），而 `Unmarshal` 则需花费 2418 纳秒。然而，`Decode`
    每次操作只使用 48 B/op（每次操作字节），比 `Unmarshal` 的 272 B/op 要少得多。
- en: 5.4 Creating JSON data byte arrays from structs
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.4 从结构体创建 JSON 数据字节数组
- en: Problem
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to create JSON data from a struct.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望从结构体创建 JSON 数据。
- en: Solution
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Create the structs then use the `json.Marshal` package to marshal the data into
    a JSON byte array.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 创建结构体，然后使用 `json.Marshal` 包将数据编组成 JSON 字节数组。
- en: Discussion
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'Creating JSON data is essentially the reverse of parsing it:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 JSON 数据本质上是其解析的反向过程：
- en: Create structs that you will use to marshal data from
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建您将从中编组数据的结构体
- en: Marshal the data into a JSON string using `json.Marshal` or `json.MarshalIndent`
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `json.Marshal` 或 `json.MarshalIndent` 将数据编组为 JSON 字符串
- en: We will be re-using the same structs as the previous recipe for parsing JSON.
    We’ll also use the function used to unmarshal JSON data from the Star Wars API.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重复使用前一个配方中相同的结构体来解析 JSON。我们还将使用用于从 Star Wars API 解析 JSON 数据的函数。
- en: '[PRE23]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `get` function returns a `Person` struct that we can use for marshalling
    to a file. The `json.Marshal` function takes the data in the struct and returns
    a byte array, `data`, containing the JSON string. If you just want it as a string,
    you can cast it to a string and use it. Here, we pass it on to `os.WriteFile`
    to create a new JSON file.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`get` 函数返回一个 `Person` 结构体，我们可以用它来将数据编组到文件中。`json.Marshal` 函数将结构体中的数据转换为包含 JSON
    字符串的字节数组 `data`。如果您只希望它作为字符串，可以将其转换为字符串并使用。在这里，我们将其传递给 `os.WriteFile` 来创建一个新的
    JSON 文件。'
- en: '[PRE24]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This is not really very readable. If you want to a more readable version, you
    can use `json.MarshalIndent` instead. You need to put in two more parameters,
    the first is the prefix, and the second is the indent. Mostly if you want to have
    a clean JSON output, the prefix is just an empty string while the indent is a
    single space.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上并不是很可读。如果您想要一个更可读的版本，可以改用 `json.MarshalIndent`。您需要添加两个额外的参数，第一个是前缀，第二个是缩进。通常，如果您想要一个干净的
    JSON 输出，前缀就是一个空字符串，而缩进则是一个空格。
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This will produce a more readable version.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生一个更可读的版本。
- en: '[PRE26]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 5.5 Creating JSON data streams from structs
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.5 从结构体创建 JSON 数据流
- en: Problem
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to create streaming JSON data from structs.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要从结构体创建流式 JSON 数据。
- en: Solution
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Create an encoder using `NewEncoder` in the `encoding/json` package, passing
    it an `io.Writer`. Then call `Encode` on the encoder to encode structs data to
    a stream.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `encoding/json` 包中使用 `NewEncoder` 创建一个编码器，传递一个 `io.Writer`。然后在编码器上调用 `Encode`
    来将结构体数据编码到流中。
- en: Discussion
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The `io.Writer` interface has a `Write` method that writes bytes to the underlying
    data stream. We use `NewEncoder` to create an encoder that wraps around a writer.
    When we call `Encode` on the encoder, it will write the JSON struct on to the
    writer.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`io.Writer` 接口有一个 `Write` 方法，用于向底层数据流写入字节。我们使用 `NewEncoder` 创建一个围绕写入器的编码器。当我们在编码器上调用
    `Encode` 时，它将将 JSON 结构写入写入器。'
- en: To show this properly we’ll need to have some JSON structs. I’ll use the same
    Star Wars people API as before to create the structs.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确显示这一点，我们需要有一些 JSON 结构体。我将使用与之前相同的 Star Wars 人物 API 来创建这些结构体。
- en: '[PRE27]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This `get` function will call the API and return the requested `Person` struct.
    We’ll need to use this `Person` struct next.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 此 `get` 函数将调用 API 并返回请求的 `Person` 结构体。接下来我们将需要使用这个 `Person` 结构体。
- en: '[PRE28]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As you can see, we’re using `os.Stdout` as the writer. Actually `os.Stdout`
    is a `os.File` struct but a `File` is also a writer so that’s fine. What this
    does is to write the encoding to `os.Stdout` one at a time. First we create an
    encoder using `json.NewEncoder`, passing it `os.Stdout` as the writer. Next, as
    we loop we get a `Person` struct and pass that to `Encode` to write to `os.Stdout`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们将 `os.Stdout` 用作写入器。实际上，`os.Stdout` 是一个 `os.File` 结构体，但 `File` 也是一个写入器，所以这没问题。它的作用是一次将编码写入
    `os.Stdout`。首先，我们使用 `json.NewEncoder` 创建一个编码器，将 `os.Stdout` 作为写入器传递。接下来，在循环中获取一个
    `Person` 结构体，并将其传递给 `Encode` 以写入 `os.Stdout`。
- en: When you run the program, you should see something like this, but each JSON
    encoding will appear one by one.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行程序时，应该会看到类似这样的东西，但每个 JSON 编码将依次出现。
- en: '[PRE29]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If you are annoyed that the untidy output here and was wondering if there is
    an equivalent of `MarshalIndent`, yes there is. Just set up the encoder with `SetIndent`
    like this and you’re good to go.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对此处的凌乱输出感到恼火，并且想知道是否有类似于`MarshalIndent`的等效方法，答案是肯定的。只需像这样设置编码器，使用`SetIndent`，您就可以开始了。
- en: '[PRE30]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: If you’re wondering what’s the difference between this and `Marshal` — you can’t
    do the above using `Marshal`. To use `Marshal` you need to put everything into
    an object and marshal it all at once — you can’t stream the JSON encodings one
    at a time.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想知道这与`Marshal`的区别是什么——使用`Marshal`您无法做到以上的操作。要使用`Marshal`，您需要将所有内容放入一个对象中，并一次性将其全部编组为
    JSON — 您无法逐个流式传输 JSON 编码。
- en: In other words, if you have JSON structs coming in to you and you either don’t
    know when it will all come in, or if you want to write the JSON encodings out
    first, then you need to use `Encode`. You can use `Marshal` only if you have all
    the JSON data available to you.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，如果有 JSON 结构数据传入，您不知道全部数据什么时候会完全传入，或者如果您想要先写出 JSON 编码，那么您需要使用`Encode`。只有当您拥有所有
    JSON 数据时，才能使用`Marshal`。
- en: And of course, `Encode` is also faster than `Marshal`. Let’s look at some benchmarking
    again.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，`Encode`也比`Marshal`快。让我们再来看看一些基准测试。
- en: '[PRE31]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We need to prepare the JSON struct before the test, so I unmarshalled the data
    into a `Person` struct as part of setting up before running the benchmark loop.
    I also used `io.Discard` as the writer instead. The `io.Discard` is a writer on
    which all write calls will succeed and is the most convenient to use here.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试之前，我们需要准备好 JSON 结构，因此我在运行基准测试循环之前将数据解组为`Person`结构。我还使用`io.Discard`作为写入器。`io.Discard`是一个写入器，其所有写入调用都将成功，并且在这里使用是最方便的。
- en: To benchmark `Marshal` I marshal the `Person` struct and then write it to `io.Discard`.
    To benchmark `Encode`, I create an encoder that wraps around `io.Discard` and
    then encode the `Person` struct to it. As in the decoder benchmarking, I placed
    the creation of the encoder before the iterations because we only need to create
    it once.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要对`Marshal`进行基准测试，我将`Person`结构编组为 JSON，然后将其写入`io.Discard`。要对`Encode`进行基准测试，我创建了一个编码器，它包裹在`io.Discard`周围，然后将`Person`结构编码到其中。与解码器的基准测试一样，我在迭代之前放置了编码器的创建，因为我们只需要创建一次。
- en: This is the results of the benchmark.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这是基准测试的结果。
- en: '[PRE32]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: As before, `Encode` is faster, and it also uses less memory, taking up less
    than half, about 128 B/op as compared to `Marshal` which takes up 288 B/op.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，`Encode`更快，而且内存使用更少，大约为128 B/op，而`Marshal`则为288 B/op。
- en: 5.6 Omitting fields in structs
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.6 在结构体中省略字段
- en: Problem
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: When marshaling JSON structs as JSON encoding, sometimes the is just no data
    for for some of the struct variables. We want to create JSON encoding that leaves
    out the variables without any data.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当将 JSON 结构编组为 JSON 编码时，有时候某些结构变量根本就没有数据。我们希望创建的 JSON 编码会省略掉那些没有任何数据的变量。
- en: Solution
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the `omitempty` tag to define struct variables can be left omitted when
    marshaling.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`omitempty`标签来定义在编组时可以省略的结构变量。
- en: Discussion
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Let’s take a look at the `Person` struct again.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再来看看`Person`结构。
- en: '[PRE33]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: You might notice that the API doesn’t specify the species when the person is
    a human and also many of the characters don’t have vehicles or starships tagged
    to them. So when we marshal the struct, it will come out as an empty array.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到，当人物是人类时，API 没有指定物种，也有许多人物没有交通工具或星际飞船的标签。因此，当我们将结构编组时，它将作为空数组输出。
- en: '[PRE34]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: If you don’t want to show the species, vehicles or starships, you can use the
    `omitempty` tag on the JSON struct tags.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想显示物种、交通工具或星际飞船，您可以在 JSON 结构标签上使用`omitempty`标签。
- en: '[PRE35]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: When you run the same code again, you will no longer these them in the output.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当您再次运行相同的代码时，输出中将不再有它们。
- en: '[PRE36]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Why would you want to do this at all? In this API height and mass are strings.
    However if they are integers, and you don’t know their height or mass, the default
    values would be 0\. In this case these values are wrong, and also sometimes they
    might be correct as well (say for example, a the Jedi Force ghost would have neither
    height nor mass) but you can’t tell which is which. In this case, not showing
    it at all is the better option.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您为什么要这样做呢？在此 API 中，身高和体重是字符串。但是，如果它们是整数，并且您不知道它们的身高或体重，那么默认值将是 0。在这种情况下，这些值是错误的，有时可能是正确的（例如，绝地武士力量的幽灵既没有身高也没有体重），但您无法分辨哪个是正确的。在这种情况下，根本不显示它可能是更好的选择。
