- en: Chapter 3\. General Input/Output Recipes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章。通用输入/输出实例
- en: 3.0 Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.0 简介
- en: Input and output (or more popularly known as I/O) is how a computer communicates
    with the external world. I/O is a key part of developing software and therefore
    most programming languages, including Go, has standard libraries that can read
    from input and write to output. Typical input into a computer refers to the keystrokes
    from a keyboard or clicks or movement from a mouse, but can also refer to other
    external sources like a camera or a microphone, or gaming joystick and so on.
    Output in many cases refer to whatever is shown on the screen (or on the terminal)
    or printed out on a printer. I/O can also refer to network connections and often
    also to files.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 输入和输出（或更普遍称为 I/O）是计算机与外部世界通信的方式。I/O 是开发软件的关键部分，因此大多数编程语言，包括 Go，都有能够读取输入和写入输出的标准库。计算机的典型输入通常指的是来自键盘的按键或鼠标的点击或移动，也可以是其他外部来源，如摄像头、麦克风，或游戏手柄等。输出在许多情况下是指显示在屏幕上（或终端上）的内容，或打印在打印机上的内容。I/O
    还可以指网络连接，通常也涉及文件。
- en: In this chapter, we’ll be exploring some common Go recipes for managing I/O.
    We’ll warm up with with some basic I/O recipes, then talk about files in general.
    In the next few chapters we’ll move on to CSV, followed by JSON and also binary
    files.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨一些用于管理 I/O 的常见 Go 示例。我们将从一些基本的 I/O 示例开始，然后讨论文件的一般情况。在接下来的几章中，我们将继续讨论
    CSV，然后是 JSON 和二进制文件。
- en: The `io` package is the base package for input and output in Go. It contains
    the main interfaces for I/O and a few convenient functions. The main and the most
    commonly used interfaces are `Reader` and `Writer` but there are a number of variants
    of these like the `ReadWriter`, `TeeReader`, `WriterTo` and many more.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`io` 包是 Go 中用于输入和输出的基本包。它包含了主要的 I/O 接口和一些便利函数。主要且最常用的接口是 `Reader` 和 `Writer`，但还有一些变体，如
    `ReadWriter`、`TeeReader`、`WriterTo` 等等。'
- en: Generally these interfaces are nothing more than a descriptor for functions,
    for example a struct that is a `Reader` is one that has a `Read` function. A struct
    that is a `WriterTo` is one with a `WriteTo` function. Some interfaces combine
    more two or more interfaces for example, the `ReadWriter` combines the `Reader`
    and `Writer` interfaces and has both the `Read` and `Write` functions.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这些接口只是一些函数的描述符，例如一个实现了 `Reader` 的结构体就是具有 `Read` 函数的结构体。一个实现了 `WriterTo` 的结构体就是具有
    `WriteTo` 函数的结构体。有些接口结合了两个或更多接口，例如 `ReadWriter` 结合了 `Reader` 和 `Writer` 接口，并拥有
    `Read` 和 `Write` 函数。
- en: This chapter explains a bit more about how these interfaces are used.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将更详细地解释这些接口的使用方式。
- en: 3.1 Reading from an input
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.1 从输入中读取数据
- en: Problem
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to read from an input.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你想从输入中读取数据。
- en: Solution
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the `io.Reader` interface to read from an input.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `io.Reader` 接口来从输入流中读取数据。
- en: Discussion
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Go uses the `io.Reader` interface to represent the ability to read from an input
    stream of data. Many packages in the Go standard library as well as 3rd party
    packages use the `Reader` interface to allow data to be read from it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Go 使用 `io.Reader` 接口来表示从数据流中读取数据的能力。Go 标准库以及第三方包中的许多包都使用 `Reader` 接口来允许从中读取数据。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Any struct that implement the `Read` function is a `Reader`. Let’s say you have
    a reader (a struct that implements the Reader interface). To read data from the
    reader, you make a slice of bytes and you pass that slice to the `Read` method.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 任何实现了 `Read` 函数的结构体都是 `Reader`。假设你有一个读取器（实现了 Reader 接口的结构体）。要从读取器中读取数据，你需要创建一个字节切片，并将该切片传递给
    `Read` 方法。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It might look counterintuitive and seems like you would want to read data from
    `bytes` into the reader, but you’re actually reading the data from the reader
    into `bytes`. Just think of it as the data flowing from left to right, from the
    reader into `bytes`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来有些反直觉，并且似乎你想从 `bytes` 中读取数据到读取器中，但实际上你是从读取器中读取数据到 `bytes` 中。只需将其想象为数据从左侧的读取器流向右侧的
    `bytes`。
- en: '`Read` will only fill up the bytes to its capacity. If you want to read everything
    from the reader, you can use the `io.ReadAll` function.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`Read` 只会填充其容量的字节。如果你想从读取器中读取所有内容，可以使用 `io.ReadAll` 函数。'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This looks more intuitive because the `ReadAll` reads from the reader passed
    into the parameter and returns the data into `bytes`. In this case, the data flows
    from the reader on the right, into the bytes on the lft.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来更直观，因为 `ReadAll` 从传递给参数的读取器中读取数据，并将数据返回到 `bytes` 中。在这种情况下，数据从右侧的读取器流向左侧的
    `bytes` 中。
- en: You will also often find functions that expect a reader as an input parameter.
    Let’s say you have a string and you want to pass the string to the function, what
    can you do? You can create a reader from the string using the `strings.NewReader`
    function then pass it into the function.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你经常会发现一些函数期望一个读取器作为输入参数。假设你有一个字符串，你想将这个字符串传递给函数，你可以怎么做呢？你可以使用`strings.NewReader`函数从字符串创建一个读取器，然后将其传递给函数。
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can now pass `reader` into functions that expect a reader.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以将`reader`传递给期望一个读取器的函数。
- en: 3.2 Writing to an output
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.2 写入到输出
- en: Problem
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to write to an output.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要写入到一个输出。
- en: Solution
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the `io.Writer` interface to write to an output.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`io.Writer`接口来写入到一个输出。
- en: Discussion
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The interface `io.Writer` works the same way as `io.Reader`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`io.Writer`接口的工作方式与`io.Reader`相同。'
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When you call `Write` on an `io.Writer` you are writing the bytes to the underlying
    data stream.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在`io.Writer`上调用`Write`时，你正在将字节写入到底层数据流中。
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You might notice that this method calling pattern is the reverse of `io.Reader`
    in recipe 8.1\. In `Reader` you call the `Read` method to read from the struct
    into the `bytes` variable, whereas here you call the `Write` method to write from
    the `bytes` variable into the struct. In this case, the data flows from right
    to left, from `bytes` into the writer.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到，这种调用模式与“io.Reader”在8.1章节中的方法相反。在“Reader”中，你调用“Read”方法将数据从结构体读取到“bytes”变量中，而在这里，你调用“Write”方法将数据从“bytes”变量写入到结构体中。在这种情况下，数据从右向左流动，从“bytes”流向写入器。
- en: A common pattern in Go is for a function to take in a writer as a parameter.
    The function then calls the `Write` function on the writer, and later you can
    extract the data from writer. Let’s take a look at an example of this.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go语言中的一个常见模式是，一个函数以写入器作为参数。该函数然后在写入器上调用`Write`函数，稍后你可以从写入器中提取数据。让我们看一个例子。
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `bytes.Buffer` struct is a `Writer` (it implements the `Write` function)
    so you can easily create one, and pass it to the `fmt.Fprintf` function, which
    takes in an `io.Writer` as its first parameter. The `fmt.Fprintf` function writes
    data on to the buffer and you can extract the data out from it later.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`bytes.Buffer`结构体是一个`Writer`（它实现了`Write`函数），因此你可以轻松地创建一个，并将其传递给`fmt.Fprintf`函数，该函数将`io.Writer`作为其第一个参数。`fmt.Fprintf`函数将数据写入到缓冲区，稍后你可以从中提取数据出来。'
- en: This pattern of using a writer to pass data around by writing to it, then extracting
    it out later is quite common in Go. Another example is in the HTTP handlers with
    the `http.ResponseWriter`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go语言中，通过向写入器写入数据并在稍后提取出来的模式非常常见。另一个例子是在HTTP处理程序中使用`http.ResponseWriter`。
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, we write to the `ResponseWriter` and the data will be taken as input to
    be sent back to the browser.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将数据写入到`ResponseWriter`，然后将数据作为输入发送回浏览器。
- en: 3.3 Copying from a Reader to a Writer
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.3 从读取器复制到写入器
- en: Problem
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to copy from a reader to a writer.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要从一个读取器复制到一个写入器。
- en: Solution
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the `io.Copy` function to copy from a reader to a writer.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`io.Copy`函数从一个读取器复制到一个写入器。
- en: Discussion
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Sometimes we read from a reader because we want to write it to a writer. The
    process can take a few steps to read everything from a reader into buffer then
    write it out to the writer again. Instead of doing this, we can use the `io.Copy`
    function instead. The `io.Copy` function takes from a reader and writes to a writer
    all in one function.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们从一个读取器中读取，因为我们想要将其写入一个写入器。这个过程可能需要几个步骤，从读取器中读取所有内容到缓冲区，然后再将其写入到写入器中。不过，我们可以使用`io.Copy`函数来简化这个过程。`io.Copy`函数一次性从读取器复制到写入器。
- en: Let’s see how `io.Copy` can be used. We want to download a file, so we use `http.Get`
    to get a reader, which we read and then we use `os.WriteFile` to write to a file.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用`io.Copy`。我们想要下载一个文件，因此我们使用`http.Get`来获取一个读取器，然后我们读取它，接着我们使用`os.WriteFile`来写入文件。
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When we use `http.Get` to download a file we get a `http.Response` struct back.
    The content of the file is in the `Body` variable of the `http.Response` struct,
    which is a `io.ReadCloser`. A `ReadCloser` is just an interface that groups a
    `Reader` and a `Closer` so we here we can treat it just like a reader. We use
    the `os.ReadAll` function to read the data from `Body` and then `os.WriteFile`
    to write it to file.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`http.Get`下载一个文件时，我们会得到一个`http.Response`结构体。文件的内容在`http.Response`结构体的`Body`变量中，这是一个`io.ReadCloser`。`ReadCloser`只是一个接口，它将`Reader`和`Closer`组合在一起，因此我们可以像对待读取器一样处理它。我们使用`os.ReadAll`函数从`Body`中读取数据，然后使用`os.WriteFile`将其写入文件。
- en: That’s simple enough but let’s take a look at the performance of the function.
    We use the benchmarking capabilities that’s part of the standard Go tools to do
    this. First we create a test file, just like any other test files.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这就足够简单了，但让我们看看函数的性能如何。我们使用标准 Go 工具的基准测试能力来完成这个任务。首先，我们创建一个测试文件，就像创建任何其他测试文件一样。
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this test file instead of a function that starts with `Testxxx` we create
    a function that starts with `Benchmarkxxx` which takes in a parameter `b` that
    is a reference to `testing.B`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试文件中，我们创建了一个以 `Benchmarkxxx` 开头的函数，而不是以 `Testxxx` 开头的函数，该函数接受一个指向 `testing.B`
    的参数 `b`。
- en: The benchmark function is very simple, we just call our `readWrite` function.
    Let’s run it from the command line and see how we perform.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 基准函数非常简单，我们只是调用我们的 `readWrite` 函数。让我们从命令行运行它，看看我们的表现如何。
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We use the `-bench=.` flag telling Go to run all the benchmark tests and `-benchmem`
    flag to show memory benchmarks. This is what you should see.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `-bench=.` 标志告诉 Go 运行所有基准测试，并使用 `-benchmem` 标志显示内存基准。这是你应该看到的内容。
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We ran a benchmark test for a function that downloaded a 1 MB file. The test
    only ran one time, and it took 1.99 seconds. It also took 5.89 MB of memory and
    219 distinct memory allocations.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为一个下载 1 MB 文件的函数运行了一个基准测试。测试只运行了一次，耗时 1.99 秒。内存占用为 5.89 MB，共进行了 219 次内存分配。
- en: As you can see, it’s quite an expensive operation just to download a 1 MB file.
    After all, it takes almost 6 MB of memory to download a 1 MB file. Alternatively
    we can use `io.Copy` to do pretty much the same thing for a lot less memory.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 可见，下载 1 MB 文件的操作相当昂贵。毕竟，下载 1 MB 文件需要近 6 MB 内存。或者，我们可以使用 `io.Copy` 来完成几乎相同的操作，但内存占用要少得多。
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: First, we need to create a file for the data, here using `os.Create`. Next we
    create a buffered writer using `bufio.NewWriter`, wrapping around the file. This
    will be used in the `Copy` function, copying the contents of the response `Body`
    into the buffered writer. Finally we flush the writer’s buffers and make the underlying
    writer write to the file.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为数据创建一个文件，这里使用 `os.Create`。接下来，我们使用 `bufio.NewWriter` 创建一个缓冲写入器，将其包装在文件周围。这将在
    `Copy` 函数中使用，将响应的内容复制到缓冲写入器中。最后，我们刷新写入器的缓冲区，并使底层写入器将内容写入文件。
- en: If you run this, `copy` function it works the same way, but how does the performance
    compare? Let’s go back to our benchmark and add another benchmark function for
    this `copy` function.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行这个 `copy` 函数，它的工作方式是相同的，但性能如何呢？让我们回到我们的基准测试中，并为这个 `copy` 函数添加另一个基准函数。
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We run the benchmark again and this is what you should see.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次运行基准测试，你应该看到的结果如下。
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This time the `readWrite` function took 2.54 seconds, used 5.89 MB of memory
    and did 227 memory allocations. The `copy` function however only too 1.43 seconds,
    used 42.6 kB of memory and did 61 memory allocations.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，`readWrite` 函数耗时 2.54 秒，使用了 5.89 MB 内存，进行了 227 次内存分配。然而，`copy` 函数只耗时 1.43
    秒，使用了 42.6 kB 内存，进行了 61 次内存分配。
- en: The `copy` function is around 80% faster, but uses only a fraction (less than
    1%) of the memory. With really large files, if you’re using the `os.ReadAll` and
    `os.WriteFile` you might run out of memory quickly.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`copy` 函数速度大约快了 80%，但内存使用量只有原来的一小部分（不到 1%）。对于非常大的文件，如果你使用 `os.ReadAll` 和 `os.WriteFile`，内存可能会迅速耗尽。'
- en: 3.4 Reading from a text file
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.4 从文本文件读取
- en: Problem
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to read a text file into memory.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你想将文本文件读入内存。
- en: Solution
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: You can usethe `os.Open` function to open the file, followed by `Read` on the
    file. Alternatively you can also use the simpler `os.ReadFile` function to do
    it in a single function call.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `os.Open` 函数打开文件，然后在文件上使用 `Read`。或者，你也可以使用更简单的 `os.ReadFile` 函数在一个函数调用中完成它。
- en: Discussion
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Reading and writing to the filesystem are one of the basic things a programming
    language needs to do. Of course you can always store in memory but sooner or later
    if you need to persist the data beyond a shutdown you need to store it somewhere.
    There are a number of ways that data can be persistent but the most commonly accessible
    is probably to the local filesystem.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 读取和写入文件系统是编程语言需要做的基本操作之一。当然，你可以始终存储在内存中，但如果需要在关闭后持久保存数据，你需要将其存储在某个地方。数据可以以多种方式持久化，但最常用的可能是本地文件系统。
- en: Read everything at one go
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一次性读取所有内容
- en: The easiest way to read a text file is to use `os.ReadFile`. Let’s say we want
    to read from a text file named `data.txt`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 读取文本文件最简单的方法是使用 `os.ReadFile`。假设我们要从名为 `data.txt` 的文本文件中读取。
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: To read the file, just give the name of the file as a parameter to `os.ReadFile`
    and you’re done!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要读取文件，只需将文件名作为参数传递给`os.ReadFile`，然后您就完成了！
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This will print out `hello world!`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印出`hello world!`。
- en: Opening a file and reading from it
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打开文件并从中读取
- en: Reading a file by opening it and then doing a read on it is more flexible but
    takes a few more steps. First, you need to open the file.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通过打开文件然后对其进行读取更灵活，但需要更多步骤。首先，您需要打开文件。
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This can be done using `os.Open`, which returns a `File` struct in read-only.
    If you want to open it in different modes, you can use `os.OpenFile`. It’s good
    practice to set up the file for closing using the `defer` keyword, which will
    close the file just before the function returns.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以使用`os.Open`完成，它以只读形式返回一个`File`结构。如果要以不同模式打开它，可以使用`os.OpenFile`。使用`defer`关键字设置文件以在函数返回前关闭是一个良好的实践。
- en: Next, we need to create a byte array to store the data.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个字节数组来存储数据。
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: To do this, we need to know how large the byte array should be, and that should
    be the size of the file. We use the `Stat` method on the file to get a `FileInfo`
    struct, which we can call the `Size` method to get the size of the file.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要知道字节数组应该有多大，这应该是文件的大小。我们使用文件上的`Stat`方法获取`FileInfo`结构，可以调用`Size`方法获取文件的大小。
- en: Once we have the byte array, we can pass it as a parameter to the `Read` method
    on the file struct.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了字节数组，我们可以将其作为参数传递给文件结构上的`Read`方法。
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This will store the read data into the byte array and return the number of bytes
    read. If all goes well you should see something like this from the output.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把读取的数据存储到字节数组中并返回读取的字节数。如果一切顺利，您应该从输出中看到类似这样的内容。
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: There are a few more steps, but you have the flexibility of reading parts of
    the whole document and you can also do other stuff in between opening the file
    and reading it.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些步骤，但您可以在打开文件并读取它之间的过程中灵活读取整个文档的部分，并且还可以做其他事情。
- en: 3.5 Writing to a text file
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.5 写入文本文件
- en: Problem
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to write data a text file.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要将数据写入文本文件。
- en: Solution
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: You can use the `os.Open` function to open the file, followed by `Write` on
    the file. Alternatively you can use the `os.WriteFile` function to do it in a
    single function call.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`os.Open`函数打开文件，然后在文件上执行`Write`。或者，您可以使用`os.WriteFile`函数一次性完成。
- en: Discussion
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Just as in reading a file, there are a couple of ways of writing to a file.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 就像读取文件一样，有几种方法可以向文件中写入内容。
- en: Writing to a file at one go
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一次性写入文件
- en: Given the data, you can write to a file at one go using `os.WriteFile`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 根据数据，您可以使用`os.WriteFile`一次性写入文件。
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The first parameter is the name of the file, the data is in a byte array and
    the final parameter is the Unix file permissions you want to give to the file.
    If the file doesn’t exist, this will create a new file. If it exists, it will
    remove all the data in the file and write the new data into it, but without changing
    the permissions.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是文件名，数据在一个字节数组中，最后一个参数是您要给文件的Unix文件权限。如果文件不存在，这将创建一个新文件。如果存在，它将删除文件中的所有数据并写入新数据，但不更改权限。
- en: Creating a file and writing to it
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建文件并写入
- en: Writing to a file by creating the file and then writing to it is a bit more
    involved but it’s also more flexible. First, you need to create or open a file
    using the `os.Create` function.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建文件然后写入文件稍微复杂，但也更灵活。首先，您需要使用`os.Create`函数创建或打开文件。
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This will create a new file with the given name and mode `0666` if the file
    doesn’t exist. If the file exists, this will remove all the data in it. As before
    you would want to set up the file to be closed at the end of the function, using
    the `defer` keyword.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件不存在，将创建具有给定名称和模式`0666`的新文件。如果文件已存在，则会删除其中的所有数据。与以前一样，您希望设置文件在函数结束时关闭，使用`defer`关键字。
- en: Once you have the file you can write to it directly using the `Write` method
    and passing it the byte array with the data.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您拥有文件，您可以直接使用`Write`方法将数据写入其中，并将包含数据的字节数组传递给它。
- en: '[PRE23]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This will return the number of bytes that was written to the file. As before
    while it takes a few more steps, breaking up the steps between creating a file
    and writing to it gives you more flexibility to write in smaller chunks instead
    of everything at once.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回写入文件的字节数。与之前一样，虽然需要更多步骤，但在创建文件和写入文件之间分步骤可以让您以较小的块而不是一次性写入，从而更灵活。
- en: 3.6 Using a temporary file
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.6 使用临时文件
- en: Problem
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to create a temporary file for use and depose of it afterwards.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要创建一个临时文件供使用，然后处理它后再将其丢弃。
- en: Solution
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the `os.CreateTemp` function to create a temporary file, and then remove
    it once you don’t need it anymore.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`os.CreateTemp`函数创建一个临时文件，然后在不再需要时删除它。
- en: Discussion
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: A temporary file is a file that’s created to store data temporarily while the
    program is doing something. It’s meant to be deleted or copied to permanent storage
    once the task is done. In Go, we can use `os.CreateTemp` function to create a
    temporary file. Then after that we can remove it.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 临时文件是在程序执行某些操作时创建的用于暂存数据的文件。完成任务后，它应该被删除或复制到永久存储。在Go中，我们可以使用`os.CreateTemp`函数创建临时文件，然后在需要时删除它。
- en: Different operating systems store their temporary files in different places.
    Regardless where it is, Go will let you know where it is using the `os.TempDir`
    function.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的操作系统将它们的临时文件存储在不同的位置。无论它在哪里，Go都可以使用`os.TempDir`函数告诉你它在哪里。
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We need to know because the temp files created by `os.CreateTemp` will be created
    there. Normally we wouldn’t care, but because we’re trying to analyse step by
    step how the temp files get created, we want to know exactly where it is. When
    we execute this statement, we should see something like this.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要知道`os.CreateTemp`创建的临时文件将被创建在哪里。通常我们不关心，但因为我们要逐步分析临时文件的创建过程，我们想确切地知道它在哪里。执行这条语句时，我们应该看到像这样的东西。
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This is the directory that your computer tells Go (and some other programs)
    to use as a temporary directory. We can use this directly or we can create our
    own directory here using the `os.MkdirTemp` function.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你的计算机告诉Go（和其他一些程序）要使用作为临时目录的目录。我们可以直接使用这个目录，或者使用`os.MkdirTemp`函数在这里创建我们自己的目录。
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The first parameter to `os.MkdirTemp` is the temporary directory and the second
    parameter is a pattern string. The function will apply a random string to replace
    the `*` in the pattern string. It is also a good practise to defer the cleaning
    up of the temporary directory by remove it using `os.RemoveAll`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`os.MkdirTemp`的第一个参数是临时目录，第二个参数是一个模式字符串。该函数将应用一个随机字符串来替换模式字符串中的`*`。使用`os.RemoveAll`推迟清理临时目录也是一个好习惯。'
- en: Next we’re creating the actual temporary file using `os.CreateTemp`, passing
    it the temporary directory we just created and also a pattern string for the file
    name, which works the same as as the temporary directory.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`os.CreateTemp`实际创建临时文件，向其传递我们刚刚创建的临时目录以及文件名的模式字符串，其工作方式与临时目录相同。
- en: '[PRE27]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: With that, we have a file and everything else works the same way as any other
    file.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们有了一个文件，其他操作与任何其他文件一样。
- en: '[PRE28]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If you didn’t choose to put your temporary files into a separate directory (which
    you delete and also everything in it when you’re done), you can use `os.Remove`
    with the temporary file name like this.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择不将临时文件放入单独的目录中（完成后删除该目录及其中的所有内容），你可以像这样使用`os.Remove`与临时文件名。
- en: '[PRE29]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
