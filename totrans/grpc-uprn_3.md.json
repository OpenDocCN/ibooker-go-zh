["```go\nsyntax = \"proto3\";\n\nimport \"google/protobuf/wrappers.proto\"; ![1](assets/1.png)\n\npackage ecommerce;\n\nservice OrderManagement {\n    rpc getOrder(google.protobuf.StringValue) returns (Order); ![2](assets/2.png)\n}\n\nmessage Order { ![3](assets/3.png)\n    string id = 1;\n    repeated string items = 2; ![4](assets/4.png)\n    string description = 3;\n    float price = 4;\n    string destination = 5;\n}\n```", "```go\n// server/main.go\nfunc (s *server) GetOrder(ctx context.Context,\n\torderId *wrapper.StringValue) (*pb.Order, error) {\n     // Service Implementation.\n\tord := orderMap[orderId.Value]\n\treturn &ord, nil\n}\n```", "```go\n// Setting up a connection to the server.\n...\norderMgtClient := pb.NewOrderManagementClient(conn)\n...\n\n// Get Order\nretrievedOrder , err := orderMgtClient.GetOrder(ctx,\n       &wrapper.StringValue{Value: \"106\"})\nlog.Print(\"GetOrder Response -> : \", retrievedOrder)\n```", "```go\nsyntax = \"proto3\";\n\nimport \"google/protobuf/wrappers.proto\";\n\npackage ecommerce;\n\nservice OrderManagement {\n    ...\n    rpc searchOrders(google.protobuf.StringValue) returns (stream Order); ![1](assets/1.png)\n    ...\n}\n\nmessage Order {\n    string id = 1;\n    repeated string items = 2;\n    string description = 3;\n    float price = 4;\n    string destination = 5;\n}\n```", "```go\nfunc (s *server) SearchOrders(searchQuery *wrappers.StringValue,\n\tstream pb.OrderManagement_SearchOrdersServer) error {\n\n\tfor key, order := range orderMap {\n\t\tlog.Print(key, order)\n\t\tfor _, itemStr := range order.Items {\n\t\t\tlog.Print(itemStr)\n\t\t\tif strings.Contains(\n\t\t\t\titemStr, searchQuery.Value) { ![1](assets/1.png)\n\t\t\t\t// Send the matching orders in a stream \t\t\t\terr := stream.Send(&order) ![2](assets/2.png)\n\t\t\t\tif err != nil {\n\t\t\t\t   return fmt.Errorf(\n\t\t\t\t\t    \"error sending message to stream : %v\",\n\t\t\t\t\t\t    err) ![3](assets/3.png)\n\t\t\t\t}\n\t\t\t\tlog.Print(\"Matching Order Found : \" + key)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n```", "```go\n// Setting up a connection to the server. ...\n\tc := pb.NewOrderManagementClient(conn)\n...\n     searchStream, _ := c.SearchOrders(ctx,\n     \t&wrapper.StringValue{Value: \"Google\"}) ![1](assets/1.png)\n\n\tfor {\n\t\tsearchOrder, err := searchStream.Recv() ![2](assets/2.png)\n\t\tif err == io.EOF { ![3](assets/3.png)\n\t\t\tbreak\n\t\t}\n           // handle other possible errors \t\tlog.Print(\"Search Result : \", searchOrder)\n\t}\n```", "```go\nsyntax = \"proto3\";\n\nimport \"google/protobuf/wrappers.proto\";\n\npackage ecommerce;\n\nservice OrderManagement {\n...\n    rpc updateOrders(stream Order) returns (google.protobuf.StringValue);\n...\n}\n\nmessage Order {\n    string id = 1;\n    repeated string items = 2;\n    string description = 3;\n    float price = 4;\n    string destination = 5;\n}\n```", "```go\nfunc (s *server) UpdateOrders(stream pb.OrderManagement_UpdateOrdersServer) error {\n\n\tordersStr := \"Updated Order IDs : \"\n\tfor {\n\t\torder, err := stream.Recv() ![1](assets/1.png)\n\t\tif err == io.EOF { ![2](assets/2.png)\n\t\t\t// Finished reading the order stream. \t\t\treturn stream.SendAndClose(\n\t\t\t\t&wrapper.StringValue{Value: \"Orders processed \"\n\t\t\t\t+ ordersStr})\n\t\t}\n\t\t// Update order \t\torderMap[order.Id] = *order\n\n\t\tlog.Printf(\"Order ID \", order.Id, \": Updated\")\n\t\tordersStr += order.Id + \", \"\n\t}\n}\n```", "```go\n// Setting up a connection to the server. ...\n\tc := pb.NewOrderManagementClient(conn)\n...\n     updateStream, err := client.UpdateOrders(ctx) ![1](assets/1.png)\n\n\tif err != nil { ![2](assets/2.png)\n\t\tlog.Fatalf(\"%v.UpdateOrders(_) = _, %v\", client, err)\n\t}\n\n\t// Updating order 1 \tif err := updateStream.Send(&updOrder1); err != nil { ![3](assets/3.png)\n\t\tlog.Fatalf(\"%v.Send(%v) = %v\",\n\t\t\tupdateStream, updOrder1, err) ![4](assets/4.png)\n\t}\n\n\t// Updating order 2 \tif err := updateStream.Send(&updOrder2); err != nil {\n\t\tlog.Fatalf(\"%v.Send(%v) = %v\",\n\t\t\tupdateStream, updOrder2, err)\n\t}\n\n\t// Updating order 3 \tif err := updateStream.Send(&updOrder3); err != nil {\n\t\tlog.Fatalf(\"%v.Send(%v) = %v\",\n\t\t\tupdateStream, updOrder3, err)\n\t}\n\n\tupdateRes, err := updateStream.CloseAndRecv() ![5](assets/5.png)\n\tif err != nil {\n\t\tlog.Fatalf(\"%v.CloseAndRecv() got error %v, want %v\",\n\t\t\tupdateStream, err, nil)\n\t}\n\tlog.Printf(\"Update Orders Res : %s\", updateRes)\n```", "```go\nsyntax = \"proto3\";\n\nimport \"google/protobuf/wrappers.proto\";\n\npackage ecommerce;\n\nservice OrderManagement {\n    ...\n    rpc processOrders(stream google.protobuf.StringValue)\n        returns (stream CombinedShipment); ![1](assets/1.png)\n}\n\nmessage Order { ![2](assets/2.png)\n    string id = 1;\n    repeated string items = 2;\n    string description = 3;\n    float price = 4;\n    string destination = 5;\n}\n\nmessage CombinedShipment { ![3](assets/3.png)\n    string id = 1;\n    string status = 2;\n    repeated Order ordersList = 3;\n}\n```", "```go\nfunc (s *server) ProcessOrders(\n\tstream pb.OrderManagement_ProcessOrdersServer) error {\n\t...\n\tfor {\n\t\torderId, err := stream.Recv() ![1](assets/1.png)\n\t\tif err == io.EOF {            ![2](assets/2.png)\n\t\t\t...\n\t\t\tfor _, comb := range combinedShipmentMap {\n\t\t\t\tstream.Send(&comb) ![3](assets/3.png)\n\t\t\t}\n\t\t\treturn nil               ![4](assets/4.png)\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t// Logic to organize orders into shipments, \t\t// based on the destination. \t\t...\n\t\t// \n\t\tif batchMarker == orderBatchSize { ![5](assets/5.png)\n\t\t\t// Stream combined orders to the client in batches \t\t\tfor _, comb := range combinedShipmentMap {\n\t\t\t\t// Send combined shipment to the client \t\t\t\tstream.Send(&comb)      ![6](assets/6.png)\n\t\t\t}\n\t\t\tbatchMarker = 0\n\t\t\tcombinedShipmentMap = make(\n\t\t\t\tmap[string]pb.CombinedShipment)\n\t\t} else {\n\t\t\tbatchMarker++\n\t\t}\n\t}\n}\n```", "```go\n// Process Order streamProcOrder, _ := c.ProcessOrders(ctx) ![1](assets/1.png)\n\tif err := streamProcOrder.Send(\n\t\t&wrapper.StringValue{Value:\"102\"}); err != nil { ![2](assets/2.png)\n\t\tlog.Fatalf(\"%v.Send(%v) = %v\", client, \"102\", err)\n\t}\n\n\tif err := streamProcOrder.Send(\n\t\t&wrapper.StringValue{Value:\"103\"}); err != nil {\n\t\tlog.Fatalf(\"%v.Send(%v) = %v\", client, \"103\", err)\n\t}\n\n\tif err := streamProcOrder.Send(\n\t\t&wrapper.StringValue{Value:\"104\"}); err != nil {\n\t\tlog.Fatalf(\"%v.Send(%v) = %v\", client, \"104\", err)\n\t}\n\n\tchannel := make(chan struct{})  ![3](assets/3.png)\n    go asncClientBidirectionalRPC(streamProcOrder, channel) ![4](assets/4.png)\n    time.Sleep(time.Millisecond * 1000)     ![5](assets/5.png)\n\n\tif err := streamProcOrder.Send(\n\t\t&wrapper.StringValue{Value:\"101\"}); err != nil {\n\t\tlog.Fatalf(\"%v.Send(%v) = %v\", client, \"101\", err)\n\t}\n\n\tif err := streamProcOrder.CloseSend(); err != nil { ![6](assets/6.png)\n\t\tlog.Fatal(err)\n\t}\n\n<- channel\n\nfunc asncClientBidirectionalRPC (\n\t    streamProcOrder pb.OrderManagement_ProcessOrdersClient,\n\t    c chan struct{}) {\n\tfor {\n\t\tcombinedShipment, errProcOrder := streamProcOrder.Recv() ![7](assets/7.png)\n\t\tif errProcOrder == io.EOF { ![8](assets/8.png)\n\t\t\tbreak\n\t\t}\n\t\tlog.Printf(\"Combined shipment : \", combinedShipment.OrdersList)\n\t}\n\t<-c\n}\n```"]