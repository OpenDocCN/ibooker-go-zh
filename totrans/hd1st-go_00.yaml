- en: Table of Contents (the real thing)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[how to use this book: Intro](introduction01_split_000.html#how_to_use_this_bookcolon_intro)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Your brain on Go**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Here *you* are trying to *learn* something, while here your *brain* is, doing
    you a favor by making sure the learning doesn’t *stick*. Your brain’s thinking,
    “Better leave room for more important things, like which wild animals to avoid
    and whether naked snowboarding is a bad idea.” So how *do* you trick your brain
    into thinking that your life depends on knowing how to program in Go?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Who is this book for?”](introduction01_split_000.html#who_is_this_book_for)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“We know what you’re thinking”](introduction01_split_001.html#we_know_what_youaposre_thinking)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“We know what your brain is thinking”](introduction01_split_001.html#we_know_what_your_brain_is_thinking)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Metacognition: thinking about thinking”](introduction01_split_001.html#metacognition_thinking_about_thinking)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Here’s what WE did”](introduction01_split_001.html#hereaposs_what_we_did)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Read me”](introduction01_split_001.html#read_me)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Acknowledgments”](introduction01_split_001.html#acknowledgments)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html#letapsos_get_going_syntax_basics)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Are you ready to turbo-charge your software?**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Do you want a **simple** programming language that **compiles fast**? That **runs
    fast**? That makes it **easy to distribute** your work to users? Then **you’re
    ready for Go!**
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go is a programming language that focuses on **simplicity** and **speed**. It’s
    simpler than other languages, so it’s quicker to learn. And it lets you harness
    the power of today’s multicore computer processors, so your programs run faster.
    This chapter will show you all the Go features that will make **your life as a
    developer easier**, and make your **users happier**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Ready, set, Go!”](ch01.html#readycomma_setcomma_go)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The Go Playground”](ch01.html#the_go_playground)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“What does it all mean?”](ch01.html#what_does_it_all_mean)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“What if something goes wrong?”](ch01.html#what_if_something_goes_wrong_1)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Calling functions”](ch01.html#calling_functions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The Println function”](ch01.html#the_println_function)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Using functions from other packages”](ch01.html#using_functions_from_other_packages)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Function return values”](ch01.html#function_return_values)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“A Go program template”](ch01.html#a_go_program_template)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Strings”](ch01.html#strings)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Runes”](ch01.html#runes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Booleans”](ch01.html#booleans)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Numbers”](ch01.html#numbers)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Math operations and comparisons”](ch01.html#math_operations_and_comparisons)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Types”](ch01.html#types)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Declaring variables”](ch01.html#declaring_variables)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Zero values”](ch01.html#zero_values)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Short variable declarations”](ch01.html#short_variable_declarations)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Naming rules”](ch01.html#naming_rules)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Conversions”](ch01.html#conversions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Installing Go on your computer”](ch01.html#installing_go_on_your_computer)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Compiling Go code”](ch01.html#compiling_go_code)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Go tools”](ch01.html#go_tools)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Try out code quickly with “go run””](ch01.html#try_out_code_quickly_with_ldquogo_runrdq)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Your Go Toolbox”](ch01.html#your_go_toolbox_1)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html#which_code_runs_nextquestcolon_condition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Every program has parts that apply only in certain situations.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: “This code should run *if* there’s an error. Otherwise, that other code should
    run.” Almost every program contains code that should be run only when a certain
    *condition* is true. So almost every programming language provides **conditional
    statements** that let you determine whether to run segments of code. Go is no
    exception.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You may also need some parts of your code to run *repeatedly*. Like most languages,
    Go provides **loops** that run sections of code more than once. We’ll learn to
    use both conditionals and loops in this chapter!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Calling methods”](ch02.html#calling_methods)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Making the grade”](ch02.html#making_the_grade)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Multiple return values from a function or method”](ch02.html#Multiple_return_values)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Option 1: Ignore the error return value with the blank identifier”](ch02.html#option_1colon_ignore_the_error_return_va)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Option 2: Handle the error”](ch02.html#option_2colon_handle_the_error)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Conditionals”](ch02.html#conditionals)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Logging a fatal error, conditionally”](ch02.html#logging_a_fatal_errorcomma_conditionally)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Avoid shadowing names”](ch02.html#avoid_shadowing_names)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Converting strings to numbers”](ch02.html#converting_strings_to_numbers)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Blocks”](ch02.html#blocks)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Blocks and variable scope”](ch02.html#blocks_and_variable_scope)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“We’ve finished the grading program!”](ch02.html#weaposve_finished_the_grading_program)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Only one variable in a short variable declaration has to be new”](ch02.html#only_one_variable_in_a_short_variable_de)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Let’s build a game”](ch02.html#letaposs_build_a_game)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Package names vs. import paths”](ch02.html#package_names_vsdot_import_paths)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Generating a random number”](ch02.html#generating_a_random_number)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Getting an integer from the keyboard”](ch02.html#getting_an_integer_from_the_keyboard)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Comparing the guess to the target”](ch02.html#comparing_the_guess_to_the_target)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Loops”](ch02.html#loops)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Init and post statements are optional”](ch02.html#init_and_post_statements_are_optional)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Using a loop in our guessing game”](ch02.html#using_a_loop_in_our_guessing_game)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Breaking out of our guessing loop”](ch02.html#breaking_out_of_our_guessing_loop)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Revealing the target”](ch02.html#Revealing_the_target)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Congratulations, your game is complete!”](ch02.html#congratulationscomma_your_game)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Your Go Toolbox”](ch02.html#your_go_toolbox_2)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html#call_mecolon_functions)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**You’ve been missing out**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You’ve been calling functions like a pro. But the only functions you could call
    were the ones Go defined for you. Now, it’s your turn. We’re going to show you
    how to create your own functions. We’ll learn how to declare functions with and
    without parameters. We’ll declare functions that return a single value, and we’ll
    learn how to return multiple values so that we can indicate when there’s been
    an error. And we’ll learn about **pointers**, which allow us to make more memory-efficient
    function calls.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Some repetitive code”](ch03.html#some_repetitive_code)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Formatting output with Printf and Sprintf”](ch03.html#formatting_output_with_printf_and_sprint)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Formatting verbs”](ch03.html#formatting_verbs)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Formatting value widths”](ch03.html#formatting_value_widths)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Formatting fractional number widths”](ch03.html#formatting_fractional_number_widths)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Using Printf in our paint calculator”](ch03.html#using_printf_in_our_paint_calculator)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Declaring functions”](ch03.html#declaring_functions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Declaring function parameters”](ch03.html#declaring_function_parameters)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Using functions in our paint calculator”](ch03.html#using_functions_in_our_paint_calculator)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Functions and variable scope”](ch03.html#functions_and_variable_scope)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Function return values”](ch01.html#function_return_values)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Using a return value in our paint calculator”](ch03.html#using_a_return_value_in_our_paint_calcul)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The paintNeeded function needs error handling”](ch03.html#the_paintneeded_function_needs_error_han)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Error values”](ch03.html#error_values)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Declaring multiple return values”](ch03.html#declaring_multiple_return_values)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Using multiple return values with our paintNeeded function”](ch03.html#using_multiple_return_values_with_our_pa)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Always handle errors!”](ch03.html#always_handle_errorsexcl)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Function parameters receive copies of the arguments”](ch03.html#function_parameters_receive_copies_of_th)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Pointers”](ch03.html#pointers)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Pointer types”](ch03.html#pointer_types)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Getting or changing the value at a pointer”](ch03.html#getting_or_changing_the_value_at_a_point)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Using pointers with functions”](ch03.html#using_pointers_with_functions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Fixing our “double” function using pointers”](ch03.html#fixing_our_ldquodoublerdquor_function_us)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Your Go Toolbox”](ch03.html#your_go_toolbox_3)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html#bundles_of_codecolon_packages)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**It’s time to get organized**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: So far, we’ve been throwing all our code together in a single file. As our programs
    grow bigger and more complex, that’s going to quickly become a mess.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this chapter, we’ll show you how to create your own **packages** to help
    keep related code together in one place. But packages are good for more than just
    organization. Packages are an easy way to *share code between your programs*.
    And they’re an easy way to *share code with other developers*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Different programs, same function”](ch04.html#different_programscomma_same_function)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Sharing code between programs using packages”](ch04.html#sharing_code_between_programs_using_pack)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The Go workspace directory holds package code”](ch04.html#the_go_workspace_directory_holds_package)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Creating a new package”](ch04.html#creating_a_new_package)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Importing our package into a program”](ch04.html#Importing_our_package_into_a_program)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Packages use the same file layout”](ch04.html#packages_use_the_same_file_layout)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Package naming conventions”](ch04.html#package_naming_conventions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Package qualifiers”](ch04.html#package_qualifiers)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Moving our shared code to a package”](ch04.html#moving_our_shared_code_to_a_package)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Constants”](ch04.html#constants)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Nested package directories and import paths”](ch04.html#nested_package_directories)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Installing program executables with “go install””](ch04.html#installing_program_executables_with)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Changing workspaces with the GOPATH environment variable”](ch04.html#changing_workspaces_with_the_gopath)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Setting GOPATH”](ch04.html#setting_gopath)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Publishing packages”](ch04.html#publishing_packages)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Downloading and installing packages with “go get””](ch04.html#downloading_and_installing_packages_with)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Reading package documentation with “go doc””](ch04.html#reading_package_documentation_with)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Documenting your packages with doc comments”](ch04.html#documenting_your_packages_with_doc_comme)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Viewing documentation in a web browser”](ch04.html#viewing_documentation_in_a_web_browser)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Serving HTML documentation to yourself with “godoc””](ch04.html#serving_html_documentation_to_yourself_w)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The “godoc” server includes YOUR packages!”](ch04.html#the_ldquogodocrdquo_server_includes_your)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Your Go Toolbox”](ch04.html#your_go_toolbox_4)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html#on_the_listcolon_arrays)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A whole lot of programs deal with lists of things**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Lists of addresses. Lists of phone numbers. Lists of products. Go has *two*
    built-in ways of storing lists. This chapter will introduce the first: **arrays**.
    You’ll learn about how to create arrays, how to fill them with data, and how to
    get that data back out again. Then you’ll learn about processing all the elements
    in array, first the *hard* way with `for` loops, and then the *easy* way with
    `for`...`range` loops.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Arrays hold collections of values”](ch05.html#arrays_hold_collections_of_values)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Zero values in arrays”](ch05.html#zero_values_in_arrays)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Array literals”](ch05.html#array_literals)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Functions in the “fmt” package know how to handle arrays”](ch05.html#functions_in_the_ldquofmtrdquor_package)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Accessing array elements within a loop”](ch05.html#accessing_array_elements_within_a_loop)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Checking array length with the “len” function”](ch05.html#checking_array_length_with_the_ldquolenr)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Looping over arrays safely with “for...range””](ch05.html#looping_over_arrays_safely_with_ldquofor)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Using the blank identifier with “for...range” loops”](ch05.html#using_the_blank_identifier_with_ldquofor)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Getting the sum of the numbers in an array”](ch05.html#getting_the_sum_of_the_numbers_in_an_arr)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Getting the average of the numbers in an array”](ch05.html#getting_the_average_of_the_numbers_in_an)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Reading a text file”](ch05.html#reading_a_text_file)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Reading a text file into an array”](ch05.html#reading_a_text_file_into_an_array)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Updating our “average” program to read a text file”](ch05.html#updating_our_ldquoaveragerdquor_program)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Our program can only process three values!”](ch05.html#our_program_can_only_process_three_value)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Your Go Toolbox”](ch05.html#your_go_toolbox_5)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html#appending_issuecolon_slices)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**We’ve learned we can’t add more elements to an array**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: That’s a real problem for our program, because we don’t know in advance how
    many pieces of data our file contains. But that’s where Go **slices** come in.
    Slices are a collection type that can grow to hold additional items—just the thing
    to fix our current program! We’ll also see how slices give users an easier way
    to provide data to *all* your programs, and how they can help you write functions
    that are more convenient to call.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Slices”](ch06.html#slices)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Slice literals”](ch06.html#slice_literals)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The slice operator”](ch06.html#the_slice_operator)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Underlying arrays”](ch06.html#underlying_arrays)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Change the underlying array, change the slice”](ch06.html#change_the_underlying_arraycomma_change)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Add onto a slice with the “append” function”](ch06.html#add_onto_a_slice_with_the_ldquoappendrdq)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Slices and zero values”](ch06.html#slices_and_zero_values)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Reading additional file lines using slices and “append””](ch06.html#reading_additional_file_lines_using_slic)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Trying our improved program”](ch06.html#trying_our_improved_program)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Returning a nil slice in the event of an error”](ch06.html#returning_a_nil_slice_in_the_event_of_an)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Command-line arguments”](ch06.html#command-line_arguments)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Getting command-line arguments from the os.Args slice”](ch06.html#getting_command-line_arguments_from_the)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The slice operator can be used on other slices”](ch06.html#the_slice_operator_can_be_used_on_other)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Updating our program to use command-line arguments”](ch06.html#updating_our_program_to_use_command-line)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Variadic functions”](ch06.html#variadic_functions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Using variadic functions”](ch06.html#using_variadic_functions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Using a variadic function to calculate averages”](ch06.html#using_a_variadic_function_to_calculate_a)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Passing slices to variadic functions”](ch06.html#passing_slices_to_variadic_functions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Slices have saved the day!”](ch06.html#slices_have_saved_the_dayexcl)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Your Go Toolbox”](ch06.html#your_go_toolbox_6)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07_split_000.html#labeling_datacolon_maps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Throwing things in piles is fine, until you need to find something again**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You’ve already seen how to create lists of values using *arrays* and *slices*.
    You’ve seen how to apply the same operation to *every value* in an array or slice.
    But what if you need to work with a *particular* value? To find it, you’ll have
    to start at the beginning of the array or slice, and *look through Every. Single.
    Value.*
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What if there were a kind of collection where every value had a label on it?
    You could quickly find just the value you needed! In this chapter, we’ll look
    at **maps**, which do just that.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Counting votes”](ch07_split_000.html#counting_votes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Reading names from a file”](ch07_split_000.html#reading_names_from_a_file)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Counting names the hard way, with slices”](ch07_split_000.html#counting_names_the_hard_waycomma_with_sl)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Maps”](ch07_split_000.html#maps)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Map literals”](ch07_split_000.html#map_literals)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Zero values within maps”](ch07_split_000.html#zero_values_within_maps)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The zero value for a map variable is nil”](ch07_split_000.html#the_zero_value_for_a_map_variable_is_nil)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“How to tell zero values apart from assigned values”](ch07_split_000.html#how_to_tell_zero_values_apart_from_assig)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Removing key/value pairs with the “delete” function”](ch07_split_001.html#removing_keysolvalue_pairs_with_the_ldqu)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Updating our vote counting program to use maps”](ch07_split_001.html#updating_our_vote_counting_program_to_us)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Using for...range loops with maps”](ch07_split_001.html#using_forhelliprange_loops_with_maps)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The for...range loop handles maps in random order!”](ch07_split_001.html#the_forhelliprange_loop_handles_maps_in)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Updating our vote counting program with a for...range loop”](ch07_split_001.html#updating_our_vote_counting_program_with)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The vote counting program is complete!”](ch07_split_001.html#the_vote_counting_program_is_completeexc)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Your Go Toolbox”](ch07_split_001.html#your_go_toolbox_7)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html#building_storagecolon_structs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sometimes you need to store more than one type of data**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We learned about slices, which store a list of values. Then we learned about
    maps, which map a list of keys to a list of values. But both of these data structures
    can only hold values of *one* type. Sometimes, you need to group together values
    of *several* types. Think of mailing addresses, where you have to mix street names
    (strings) with postal codes (integers). Or student records, where you have to
    mix student names (strings) with grade point averages (floating-point numbers).
    You can’t mix value types in slices or maps. But you *can* if you use another
    type called a **struct**. We’ll learn all about structs in this chapter!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Slices and maps hold values of ONE type”](ch08.html#slices_and_maps_hold_values_of_one_type)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Structs are built out of values of MANY types”](ch08.html#structs_are_built_out_of_values_of_many)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Access struct fields using the dot operator”](ch08.html#access_struct_fields_using_the_dot_opera)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Storing subscriber data in a struct”](ch08.html#storing_subscriber_data_in_a_struct)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Defined types and structs”](ch08.html#defined_types_and_structs)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Using a defined type for magazine subscribers”](ch08.html#using_a_defined_type_for_magazine_subscr)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Using defined types with functions”](ch08.html#using_defined_types_with_functions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Modifying a struct using a function”](ch08.html#modifying_a_struct_using_a_function)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Accessing struct fields through a pointer”](ch08.html#accessing_struct_fields_through_a_pointe)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Pass large structs using pointers”](ch08.html#pass_large_structs_using_pointers)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Moving our struct type to a different package”](ch08.html#moving_our_struct_type_to_a_different_pa)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“A defined type’s name must be capitalized to be exported”](ch08.html#a_defined_typersquos_name_must_be_capita)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Struct field names must be capitalized to be exported”](ch08.html#struct_field_names_must_be)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Struct literals”](ch08.html#struct_literals)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Creating an Employee struct type”](ch08.html#creating_an_employee_struct_type)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Creating an Address struct type”](ch08.html#creating_an_address_struct_type)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Adding a struct as a field on another type”](ch08.html#adding_a_struct_as_a_field_on_another_ty)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Setting up a struct within another struct”](ch08.html#setting_up_a_struct_within_another_struc)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Anonymous struct fields”](ch08.html#anonymous_struct_fields)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Embedding structs”](ch08.html#embedding_structs)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Our defined types are complete!”](ch08.html#our_defined_types_are_completeexcl)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Your Go Toolbox”](ch08.html#your_go_toolbox_8)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html#yoursquore_my_typecolon_defined_types)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**There’s more to learn about defined types**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the previous chapter, we showed you how to define a type with a struct underlying
    type. What we *didn’t* show you was that you can use *any* type as an underlying
    type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: And do you remember methods—the special kind of function that’s associated with
    values of a particular type? We’ve been calling methods on various values throughout
    the book, but we haven’t shown you how to define your *own* methods. In this chapter,
    we’re going to fix all of that. Let’s get started!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Type errors in real life”](ch09.html#type_errors_in_real_life)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Defined types with underlying basic types”](ch09.html#defined_types_with_underlying_basic_type)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Defined types and operators”](ch09.html#defined_types_and_operators)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Converting between types using functions”](ch09.html#converting_between_types_using_functions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Fixing our function name conflict using methods”](ch09.html#fixing_our_function_name_conflict_using)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Defining methods”](ch09.html#defining_methods)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The receiver parameter is (pretty much) just another parameter”](ch09.html#The_receiver_parameter_is_leftparenthesi)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“A method is (pretty much) just like a function”](ch09.html#a_method_is_leftparenthesispretty_muchri)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Pointer receiver parameters”](ch09.html#pointer_receiver_parameters)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Converting Liters and Milliliters to Gallons using methods”](ch09.html#converting_liters_and_milliliters_to_gal)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Converting Gallons to Liters and Milliliters using methods”](ch09.html#converting_gallons_to_liters_and_millili)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Your Go Toolbox”](ch09.html#your_go_toolbox_9)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html#keep_it_to_yourselfcolon_encapsulation_a)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mistakes happen**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Sometimes, your program will receive invalid data from user input, a file you’re
    reading in, or elsewhere. In this chapter, you’ll learn about **encapsulation**:
    a way to protect your struct type’s fields from that invalid data. That way, you’ll
    know your field data is safe to work with!'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We’ll also show you how to **embed** other types within your struct type. If
    your struct type needs methods that already exist on another type, you don’t have
    to copy and paste the method code. You can embed the other type within your struct
    type, and then use the embedded type’s methods just as if they were defined on
    your own type!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Creating a Date struct type”](ch10.html#creating_a_date_struct_type)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“People are setting the Date struct field to invalid values!”](ch10.html#people_are_setting_the_date_struct_field)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Setter methods”](ch10.html#setter_methods)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Setter methods need pointer receivers”](ch10.html#setter_methods_need_pointer_receivers)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Adding the remaining setter methods”](ch10.html#adding_the_remaining_setter_methods)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Adding validation to the setter methods”](ch10.html#adding_validation_to_the_setter_methods)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The fields can still be set to invalid values!”](ch10.html#the_fields_can_still_be_set_to_invalid_v)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Moving the Date type to another package”](ch10.html#moving_the_date_type_to_another_package)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Making Date fields unexported”](ch10.html#making_date_fields_unexported)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Accessing unexported fields through exported methods”](ch10.html#accessing_unexported_fields_through_expo)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Getter methods”](ch10.html#getter_methods)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Encapsulation”](ch10.html#encapsulation)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Embedding the Date type in an Event type”](ch10.html#embedding_the_date_type_in_an_event_type)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Unexported fields don’t get promoted”](ch10.html#unexported_fields_donrsquot_get_promoted)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Exported methods get promoted just like fields”](ch10.html#exported_methods_get_promoted_just_like)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Encapsulating the Event Title field”](ch10.html#encapsulating_the_event_title_field)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Promoted methods live alongside the outer type’s methods”](ch10.html#promoted_methods_live_alongside_the_oute)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Our calendar package is complete!”](ch10.html#our_calendar_package_is_completeexcl)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Your Go Toolbox”](ch10.html#your_go_toolbox_10)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 11](ch11_split_000.html#what_can_you_doquestcolon_interfaces)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sometimes you don’t care about the particular type of a value**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You don’t care about what it *is*. You just need to know that it will be able
    to *do* certain things. That you’ll be able to call *certain methods* on it. You
    don’t care whether you have a `Pen` or a `Pencil`, you just need something with
    a `Draw` method. You don’t care whether you have a `Car` or a `Boat`, you just
    need something with a `Steer` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: That’s what Go **interfaces** accomplish. They let you define variables and
    function parameters that will hold *any* type, as long as that type defines certain
    methods.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Two different types that have the same methods”](ch11_split_000.html#two_different_types_that_have_the_same_m)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“A method parameter that can only accept one type”](ch11_split_000.html#a_method_parameter_that_can_only_accept)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Interfaces”](ch11_split_000.html#interfaces)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Defining a type that satisfies an interface”](ch11_split_000.html#defining_a_type_that_satisfies_an_interf)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Concrete types, interface types”](ch11_split_000.html#concrete_typescomma_interface_types)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Assign any type that satisfies the interface”](ch11_split_000.html#assign_any_type_that_satisfies_the_inter)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“You can only call methods defined as part of the interface”](ch11_split_000.html#you_can_only_call_methods_defined_as_par)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Fixing our playList function using an interface”](ch11_split_001.html#fixing_our_playlist_function_using_an_in)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Type assertions”](ch11_split_001.html#type_assertions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Type assertion failures”](ch11_split_001.html#type_assertion_failures)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Avoiding panics when type assertions fail”](ch11_split_001.html#avoiding_panics_when_type_assertions_fai)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Testing TapePlayers and TapeRecorders using type assertions”](ch11_split_001.html#testing_tapeplayers_and_taperecorders_us)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The “error” interface”](ch11_split_001.html#the_ldquoerrorrdquo_interface)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The Stringer interface”](ch11_split_001.html#the_stringer_interface)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The empty interface”](ch11_split_001.html#the_empty_interface)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Your Go Toolbox”](ch11_split_001.html#your_go_toolbox_11)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 12](ch12.html#back_on_your_feetcolon_recovering_from_f)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Every program encounters errors. You should plan for them**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Sometimes handling an error can be as simple as reporting it and exiting the
    program. But other errors may require additional action. You may need to close
    opened files or network connections, or otherwise clean up, so your program doesn’t
    leave a mess behind. In this chapter, we’ll show you how to **defer** cleanup
    actions so they happen even when there’s an error. We’ll also show you how to
    make your program **panic** in those (rare) situations where it’s appropriate,
    and how to **recover** afterward.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Reading numbers from a file, revisited”](ch12.html#reading_numbers_from_a_filecomma_revisit)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Any errors will prevent the file from being closed!”](ch12.html#any_errors_will_prevent_the_file_from_be)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Deferring function calls”](ch12.html#deferring_function_calls)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Recovering from errors using deferred function calls”](ch12.html#recovering_from_errors_using_deferred_fu)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Ensuring files get closed using deferred function calls”](ch12.html#ensuring_files_get_closed_using_deferred)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Listing the files in a directory”](ch12.html#listing_the_files_in_a_directory)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Listing the files in subdirectories (will be trickier)”](ch12.html#listing_the_files_in_subdirectories_left)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Recursive function calls”](ch12.html#recursive_function_calls)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Recursively listing directory contents”](ch12.html#recursively_listing_directory_contents)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Error handling in a recursive function”](ch12.html#error_handling_in_a_recursive_function)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Starting a panic”](ch12.html#starting_a_panic)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Stack traces”](ch12.html#stack_traces)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Deferred calls completed before crash”](ch12.html#deferred_calls_completed_before_crash)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Using “panic” with scanDirectory”](ch12.html#using_ldquopanicrdquo_with_scandirectory)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“When to panic”](ch12.html#when_to_panic)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The “recover” function”](ch12.html#the_ldquorrecoverrdquor_function)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The panic value is returned from recover”](ch12.html#the_panic_value_is_returned_from_recover)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Recovering from panics in scanDirectory”](ch12.html#recovering_from_panics_in_scandirectory)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Reinstating a panic”](ch12.html#reinstating_a_panic)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Your Go Toolbox”](ch12.html#your_go_toolbox_12)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 13](ch13.html#sharing_workcolon_goroutines_and_channel)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Working on one thing at a time isn’t always the fastest way to finish a task**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Some big problems can be broken into smaller tasks. **Goroutines** let your
    program work on several different tasks at once. Your goroutines can coordinate
    their work using **channels**, which let them send data to each other *and* synchronize
    so that one goroutine doesn’t get ahead of another. Goroutines let you take full
    advantage of computers with multiple processors, so that your programs run as
    fast as possible!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Retrieving web pages”](ch13.html#retrieving_web_pages)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Multitasking”](ch13.html#multitasking)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Concurrency using goroutines”](ch13.html#concurrency_using_goroutines)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Using goroutines”](ch13.html#using_goroutines)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Using goroutines with our responseSize function”](ch13.html#using_goroutines_with_our_responsesize_f)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“We don’t directly control when goroutines run”](ch13.html#we_donrsquot_directly_control_when_gorou)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Go statements can’t be used with return values”](ch13.html#go_statements_canrsquot_be_used_with_ret)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Sending and receiving values with channels”](ch13.html#sending_and_receiving_values_with_channe)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Synchronizing goroutines with channels”](ch13.html#synchronizing_goroutines_with_channels)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Observing goroutine synchronization”](ch13.html#observing_goroutine_synchronization)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Fixing our web page size program with channels”](ch13.html#fixing_our_web_page_size_program_with_ch)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Updating our channel to carry a struct”](ch13.html#updating_our_channel_to_carry_a_struct)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Your Go Toolbox”](ch13.html#your_go_toolbox_13)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 14](ch14.html#code_quality_assurancecolon_automated_te)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Are you sure your software is working right now? Really sure?**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Before you sent that new version to your users, you presumably tried out the
    new features to ensure they all worked. But did you try the *old* features to
    ensure you didn’t break any of them? *All* the old features? If that question
    makes you worry, your program needs **automated testing**. Automated tests ensure
    your program’s components work correctly, even after you change your code. Go’s
    `testing` package and `go test` tool make it easy to write automated tests, using
    the skills that you’ve already learned!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Automated tests find your bugs before someone else does”](ch14.html#automated_tests_find_your_bugs_before_so)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“A function we should have had automated tests for”](ch14.html#a_function_we_should_have_had_automated)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“We’ve introduced a bug!”](ch14.html#wersquove_introduced_a_bugexcl)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Writing tests”](ch14.html#writing_tests)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Running tests with the “go test” command”](ch14.html#running_tests_with_the_ldquogo_testrdquo)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Testing our actual return values”](ch14.html#testing_our_actual_return_values)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“More detailed test failure messages with the “Errorf” method”](ch14.html#more_detailed_test_failure_messages_with)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Test “helper” functions”](ch14.html#test_ldquohelperrdquor_functions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Getting the tests to pass”](ch14.html#getting_the_tests_to_pass)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Test-driven development”](ch14.html#testhyphendriven_development)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Another bug to fix”](ch14.html#another_bug_to_fix)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Running specific sets of tests”](ch14.html#running_specific_sets_of_tests)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Table-driven tests”](ch14.html#tablehyphendriven_tests)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Fixing panicking code using a test”](ch14.html#fixing_panicking_code_using_a_test)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Your Go Toolbox”](ch14.html#your_go_toolbox_14)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 15](ch15.html#responding_to_requestscolon_web_apps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**This is the 21st century. Users want web apps**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go’s got you covered there, too! The Go standard library includes packages to
    help you host your own web applications and make them accessible from any web
    browser. So we’re going to spend the final two chapters of the book showing you
    how to build web apps.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The first thing your web app needs is the ability to respond when a browser
    sends it a request. In this chapter, we’ll learn to use the `net/http` package
    to do just that.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Writing web apps in Go”](ch15.html#writing_web_apps_in_go)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Browsers, requests, servers, and responses”](ch15.html#browserscomma_requestscomma_serverscomma)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“A simple web app”](ch15.html#a_simple_web_app)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Your computer is talking to itself”](ch15.html#your_computer_is_talking_to_itself)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Our simple web app, explained”](ch15.html#our_simple_web_appcomma_explained)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Resource paths”](ch15.html#resource_paths)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Responding differently for different resource paths”](ch15.html#responding_differently_for_different_res)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“First-class functions”](ch15.html#firsthyphenclass_functions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Passing functions to other functions”](ch15.html#passing_functions_to_other_functions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Functions as types”](ch15.html#functions_as_types)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“What’s next”](ch15.html#whatrsquos_next)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Your Go Toolbox”](ch15.html#your_go_toolbox_15)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 16](ch16_split_000.html#a_pattern_to_follow_html_templates)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Your web app needs to respond with HTML, not plain text.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Plain text is fine for emails and social media posts. But your pages need to
    be formatted. They need headings and paragraphs. They need forms where your users
    can submit data to your app. To do any of that, you need HTML code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: And eventually, you’ll need to insert data into that HTML code. That’s why Go
    offers the `html/template` package, a powerful way to include data in your app’s
    HTML responses. Templates are key to building bigger, better web apps, and in
    this final chapter, we’ll show you how to use them!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“A guestbook app”](ch16_split_000.html#a_guestbook_app)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Functions to handle a request and check errors”](ch16_split_001.html#functions_to_handle_a_request_and_check)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Setting up a project directory and trying the app”](ch16_split_001.html#setting_up_a_project_directory_and_tryin)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Making a signature list in HTML”](ch16_split_001.html#making_a_signature_list_in_html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Making our app respond with HTML”](ch16_split_001.html#making_our_app_respond_with_html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The “text/template” package”](ch16_split_001.html#the_ldquotextsoltemplaterdquo_package)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Using the io.Writer interface with a template’s Execute method”](ch16_split_001.html#using_the_iodotdotwriter_interface_with)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“ResponseWriters and os.Stdout both satisfy io.Writer”](ch16_split_001.html#responsewriters_and_osdotdotstdout_both)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Inserting data into templates using actions”](ch16_split_001.html#inserting_data_into_templates_using_acti)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Making parts of a template optional with “if” actions”](ch16_split_001.html#making_parts_of_a_template_optional_with)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Repeating parts of a template with “range” actions”](ch16_split_001.html#repeating_parts_of_a_template_with_ldquo)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Inserting struct fields into a template with actions”](ch16_split_001.html#inserting_struct_fields_into_a_template)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Reading a slice of signatures in from a file”](ch16_split_001.html#reading_a_slice_of_signatures_in_from_a)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“A struct to hold the signatures and signature count”](ch16_split_001.html#a_struct_to_hold_the_signatures_and_sign)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Updating our template to include our signatures”](ch16_split_001.html#updating_our_template_to_include_our_sig)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Letting users add data with HTML forms”](ch16_split_001.html#letting_users_add_data_with_html_forms)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Form submission requests”](ch16_split_001.html#form_submission_requests)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Path and HTTP method for form submissions”](ch16_split_001.html#path_and_http_method_for_form_submission)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Getting values of form fields from the request”](ch16_split_001.html#getting_values_of_form_fields_from_the_r)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Saving the form data”](ch16_split_001.html#saving_the_form_data)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“HTTP redirects”](ch16_split_001.html#http_redirects)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Our complete app code”](ch16_split_001.html#our_complete_app_code)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Your Go Toolbox”](ch16_split_001.html#your_go_toolbox_16)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Appendix A](app01.html#understanding_osdotopenfile_opening_file)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Some programs need to write data to files, not just read data.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Throughout the book, when we’ve wanted to work with files, you had to create
    them in your text editor for your programs to read. But some programs *generate*
    data, and when they do, they need to be able to *write* data to a file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We used the `os.OpenFile` function to open a file for writing earlier in the
    book. But we didn’t have space then to fully explore how it worked. In this appendix,
    we’ll show you everything you need to know in order to use `os.OpenFile` effectively!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“Understanding os.OpenFile”](app01.html#understanding_osdotopenfile)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Passing flag constants to os.OpenFile”](app01.html#passing_flag_constants_to_osdotopenfile)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Binary notation”](app01.html#binary_notation)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Bitwise operators”](app01.html#bitwise_operators)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The bitwise AND operator”](app01.html#the_bitwise_and_operator)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“The bitwise OR operator”](app01.html#the_bitwise_or_operator)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Using bitwise OR on the “os” package constants”](app01.html#using_bitwise_or_on_the)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Using bitwise OR to fix our os.OpenFile options”](app01.html#using_bitwise_or_to_fix_our_osdotopenfil)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Unix-style file permissions”](app01.html#unixhyphenstyle_file_permissions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Representing permissions with the os.FileMode type”](app01.html#representing_permissions_with_the_osdotf)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Octal notation”](app01.html#octal_notation)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Converting octal values to FileMode values”](app01.html#converting_octal_values_to_filemode_valu)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Calls to os.OpenFile, explained”](app01.html#calls_to_osdotopenfile_explained)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Appendix B](app02.html#six_things_we_didnapost_covercolon_Lefto)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**We’ve covered a lot of ground, and you’re almost finished with this book**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We’ll miss you, but before we let you go, we wouldn’t feel right about sending
    you out into the world without a *little* more preparation. We’ve saved six important
    topics for this appendix.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[“#1 Initialization statements for “if””](app02.html#initialization_statements_for)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“#2 The switch statement”](app02.html#the_switch_statement)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“#3 More basic types”](app02.html#more_basic_types)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“#4 More about runes”](app02.html#more_about_runes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“#5 Buffered channels”](app02.html#buffered_channels)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“#6 Further reading”](app02.html#further_reading)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
