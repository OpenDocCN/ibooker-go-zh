["```go\ntype ReportGetter interface {\n   Get() []Report\n}\n\nfunc FailureRatio(reports ReportGetter) float64 { ![1](assets/1.png)\n   if len(reports.Get()) == 0 { ![2](assets/2.png)\n      return 0\n   }\n\n   var sum float64\n   for _, report := range reports.Get() { ![2](assets/2.png)\n      if report.Error() != nil {\n         sum++\n      }\n   }\n   return sum / float64(len(reports.Get())) ![2](assets/2.png)\n}\n```", "```go\nfunc FailureRatio(reports ReportGetter) float64 {\n   got := reports.Get() ![1](assets/1.png)\n   if len(got) == 0 {\n      return 0\n   }\n\n   var sum float64\n   for _, report := range got {\n      if report.Error() != nil {\n         sum++\n      }\n   }\n   return sum / float64(len(got))\n}\n```", "```go\nfunc createSlice(n int) (slice []string) { ![1](assets/1.png)\n   for i := 0; i < n; i++ {\n      slice = append(slice, \"I\", \"am\", \"going\", \"to\", \"take\", \"some\", \"space\") ![2](assets/2.png)\n   }\n   return slice\n}\n```", "```go\nfunc createSlice(n int) []string {\n   slice := make([]string, 0, n*7) ![1](assets/1.png)\n   for i := 0; i < n; i++ {\n      slice = append(slice, \"I\", \"am\", \"going\", \"to\", \"take\", \"some\", \"space\") ![2](assets/2.png)\n   }\n   return slice\n}\n```", "```go\ntype structSystem struct {\n   sliceU32Numbers []uint32\n   bCharacter      byte\n   f64Ratio        float64\n}\n```"]