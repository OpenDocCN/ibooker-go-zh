["```go\nsyntax = \"proto3\";\n\nimport \"google/protobuf/wrappers.proto\";\nimport \"google/api/annotations.proto\"; ![1](assets/1.png)\n\npackage ecommerce;\n\nservice ProductInfo {\n   rpc addProduct(Product) returns (google.protobuf.StringValue) {\n       option (google.api.http) = { ![2](assets/2.png)\n           post: \"/v1/product\"\n           body: \"*\"\n       };\n   }\n   rpc getProduct(google.protobuf.StringValue) returns (Product) {\n        option (google.api.http) = { ![3](assets/3.png)\n            get:\"/v1/product/{value}\"\n        };\n   }\n}\n\nmessage Product {\n   string id = 1;\n   string name = 2;\n   string description = 3;\n   float price = 4;\n}\n```", "```go\ngo get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway\ngo get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger\ngo get -u github.com/golang/protobuf/protoc-gen-go\n```", "```go\nprotoc -I/usr/local/include -I. \\\n-I$GOPATH/src \\\n-I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \\\n--go_out=plugins=grpc:. \\\nproduct_info.proto\n```", "```go\nprotoc -I/usr/local/include -I. \\\n-I$GOPATH/src \\\n-I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \\\n--grpc-gateway_out=logtostderr=true:. \\\nproduct_info.proto\n```", "```go\npackage main\n\nimport (\n  \"context\"\n  \"log\"\n  \"net/http\"\n\n  \"github.com/grpc-ecosystem/grpc-gateway/runtime\"\n  \"google.golang.org/grpc\"\n\n  gw \"github.com/grpc-up-and-running/samples/ch08/grpc-gateway/go/gw\" ![1](assets/1.png)\n)\n\nvar (\n  grpcServerEndpoint = \"localhost:50051\" ![2](assets/2.png)\n)\n\nfunc main() {\n  ctx := context.Background()\n  ctx, cancel := context.WithCancel(ctx)\n  defer cancel()\n\n  mux := runtime.NewServeMux()\n  opts := []grpc.DialOption{grpc.WithInsecure()}\n  err := gw.RegisterProductInfoHandlerFromEndpoint(ctx, mux,\n      grpcServerEndpoint, opts) ![3](assets/3.png)\n  if err != nil {\n     log.Fatalf(\"Fail to register gRPC gateway service endpoint: %v\", err)\n  }\n\n  if err := http.ListenAndServe(\":8081\", mux); err != nil { ![4](assets/4.png)\n     log.Fatalf(\"Could not setup HTTP endpoint: %v\", err)\n  }\n}\n```", "```go\n    $ curl -X POST http://localhost:8081/v1/product\n            -d '{\"name\": \"Apple\", \"description\": \"iphone7\", \"price\": 699}'\n\n    \"38e13578-d91e-11e9\"\n    ```", "```go\n    $ curl http://localhost:8081/v1/product/38e13578-d91e-11e9\n\n    {\"id\":\"38e13578-d91e-11e9\",\"name\":\"Apple\",\"description\":\"iphone7\",\n    \"price\":699}\n    ```", "```go\n    protoc -I/usr/local/include -I. \\\n      -I$GOPATH/src \\\n      -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/\\\n      third_party/googleapis \\\n      --swagger_out=logtostderr=true:. \\\n      product_info.proto\n    ```", "```go\n    {\n     \"swagger\": \"2.0\",\n     \"info\": {\n       \"title\": \"product_info.proto\",\n       \"version\": \"version not set\"\n     },\n     \"schemes\": [\n       \"http\",\n       \"https\"\n     ],\n     \"consumes\": [\n       \"application/json\"\n     ],\n     \"produces\": [\n       \"application/json\"\n     ],\n     \"paths\": {\n       \"/v1/product\": {\n         \"post\": {\n           \"operationId\": \"addProduct\",\n           \"responses\": {\n             \"200\": {\n               \"description\": \"A successful response.\",\n               \"schema\": {\n                 \"type\": \"string\"\n               }\n             }\n           },\n           \"parameters\": [\n             {\n               \"name\": \"body\",\n               \"in\": \"body\",\n               \"required\": true,\n               \"schema\": {\n                 \"$ref\": \"#/definitions/ecommerceProduct\"\n               }\n             }\n           ],\n           \"tags\": [\n             \"ProductInfo\"\n           ]\n         }\n       },\n       \"/v1/product/{value}\": {\n         \"get\": {\n           \"operationId\": \"getProduct\",\n           \"responses\": {\n             \"200\": {\n               \"description\": \"A successful response.\",\n               \"schema\": {\n                 \"$ref\": \"#/definitions/ecommerceProduct\"\n               }\n             }\n           },\n           \"parameters\": [\n             {\n               \"name\": \"value\",\n               \"description\": \"The string value.\",\n               \"in\": \"path\",\n               \"required\": true,\n               \"type\": \"string\"\n             }\n           ],\n           \"tags\": [\n             \"ProductInfo\"\n           ]\n         }\n       }\n     },\n     \"definitions\": {\n       \"ecommerceProduct\": {\n         \"type\": \"object\",\n         \"properties\": {\n           \"id\": {\n             \"type\": \"string\"\n           },\n           \"name\": {\n             \"type\": \"string\"\n           },\n           \"description\": {\n             \"type\": \"string\"\n           },\n           \"price\": {\n             \"type\": \"number\",\n             \"format\": \"float\"\n           }\n         }\n       }\n     }\n    }\n    ```", "```go\n   rpc getProduct(google.protobuf.StringValue) returns (Product) {\n        option (google.api.http) = {\n            get:\"/v1/product/{value}\"\n        };\n   }\n```", "```go\npackage main\n\nimport (\n  ...\n\n  pb \"productinfo/server/ecommerce\"\n  \"google.golang.org/grpc\"\n  \"google.golang.org/grpc/reflection\" ![1](assets/1.png)\n)\n\nfunc main() {\n  lis, err := net.Listen(\"tcp\", port)\n  if err != nil {\n     log.Fatalf(\"failed to listen: %v\", err)\n  }\n  s := grpc.NewServer()\n  pb.RegisterProductInfoServer(s, &server{})\n  reflection.Register(s) ![2](assets/2.png)\n  if err := s.Serve(lis); err != nil {\n     log.Fatalf(\"failed to serve: %v\", err)\n  }\n}\n```", "```go\n$ ./grpc_cli ls localhost:50051\n\nOutput:\necommerce.ProductInfo\ngrpc.reflection.v1alpha.ServerReflection\n```", "```go\n$ ./grpc_cli ls localhost:50051 ecommerce.ProductInfo -l\n\nOutput:\npackage: ecommerce;\nservice ProductInfo {\nrpc addProduct(ecommerce.Product) returns\n(google.protobuf.StringValue) {}\nrpc getProduct(google.protobuf.StringValue) returns\n(ecommerce.Product) {}\n}\n```", "```go\n$ ./grpc_cli ls localhost:50051 ecommerce.ProductInfo.addProduct -l\n\nOutput:\nrpc addProduct(ecommerce.Product) returns\n(google.protobuf.StringValue) {}\n```", "```go\n$ ./grpc_cli type localhost:50051 ecommerce.Product\n\nOutput:\nmessage Product {\nstring id = 1[json_name = \"id\"];\nstring name = 2[json_name = \"name\"];\nstring description = 3[json_name = \"description\"];\nfloat price = 4[json_name = \"price\"];\n}\n```", "```go\n    $ ./grpc_cli call localhost:50051 addProduct \"name:\n     'Apple', description: 'iphone 11', price: 699\"\n\n    Output:\n    connecting to localhost:50051\n    value: \"d962db94-d907-11e9-b49b-6c96cfe0687d\"\n\n    Rpc succeeded with OK status\n    ```", "```go\n    $ ./grpc_cli call localhost:50051 getProduct \"value:\n     'd962db94-d907-11e9-b49b-6c96cfe0687d'\"\n\n    Output:\n    connecting to localhost:50051\n    id: \"d962db94-d907-11e9-b49b-6c96cfe0687d\"\n    name: \"Apple\"\n    description: \"iphone 11\"\n    price: 699\n\n    Rpc succeeded with OK status\n    ```", "```go\nimport \"github.com/grpc-ecosystem/go-grpc-middleware\"\n\norderMgtServer := grpc.NewServer(\n    grpc.Unaryinterceptor(grpc_middleware.ChainUnaryServer( ![1](assets/1.png)\n        grpc_ctxtags.UnaryServerinterceptor(),\n        grpc_opentracing.UnaryServerinterceptor(),\n        grpc_prometheus.UnaryServerinterceptor,\n        grpc_zap.UnaryServerinterceptor(zapLogger),\n        grpc_auth.UnaryServerinterceptor(myAuthFunction),\n        grpc_recovery.UnaryServerinterceptor(),\n    )),\n    grpc.Streaminterceptor(grpc_middleware.ChainStreamServer( ![2](assets/2.png)\n        grpc_ctxtags.StreamServerinterceptor(),\n        grpc_opentracing.StreamServerinterceptor(),\n        grpc_prometheus.StreamServerinterceptor,\n        grpc_zap.StreamServerinterceptor(zapLogger),\n        grpc_auth.StreamServerinterceptor(myAuthFunction),\n        grpc_recovery.StreamServerinterceptor(),\n    )),\n    )\n```", "```go\nimport \"github.com/grpc-ecosystem/go-grpc-middleware\"\n\nclientConn, err = grpc.Dial(\n   address,\n     grpc.WithUnaryinterceptor(grpc_middleware.ChainUnaryClient(\n          monitoringClientUnary, retryUnary)), ![1](assets/1.png)\n     grpc.WithStreaminterceptor(grpc_middleware.ChainStreamClient(\n          monitoringClientStream, retryStream)), ![2](assets/2.png)\n)\n```", "```go\nsyntax = \"proto3\";\n\npackage grpc.health.v1;\n\nmessage HealthCheckRequest { ![1](assets/1.png)\n  string service = 1;\n}\n\nmessage HealthCheckResponse { ![2](assets/2.png)\n  enum ServingStatus {\n    UNKNOWN = 0;\n    SERVING = 1;\n    NOT_SERVING = 2;\n  }\n  ServingStatus status = 1;\n}\n\nservice Health {\n  rpc Check(HealthCheckRequest) returns (HealthCheckResponse); ![3](assets/3.png)\n\n  rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse); ![4](assets/4.png)\n}\n```", "```go\n$ grpc_health_probe -addr=localhost:50051 ![1](assets/1.png)\n\nhealthy: SERVING\n```", "```go\n$ grpc_health_probe -addr=localhost:50052 -connect-timeout 600ms \\\n -rpc-timeout 300ms ![2](assets/2.png)\n\nfailed to connect service at \"localhost:50052\": context deadline exceeded\nexit status 2\n```", "```go\nRUN GRPC_HEALTH_PROBE_VERSION=v0.3.0 && \\\n    wget -qO/bin/grpc_health_probe \\\n    https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/\n            ${GRPC_HEALTH_PROBE_VERSION}/grpc_health_probe-linux-amd64 && \\\n    chmod +x /bin/grpc_health_probe\n```", "```go\nspec:\n  containers:\n  - name: server\n    image: \"kasunindrasiri/grpc-productinfo-server\"\n    ports:\n    - containerPort: 50051\n    readinessProbe:\n      exec:\n        command: [\"/bin/grpc_health_probe\", \"-addr=:50051\"] ![1](assets/1.png)\n      initialDelaySeconds: 5\n    livenessProbe:\n      exec:\n        command: [\"/bin/grpc_health_probe\", \"-addr=:50051\"] ![2](assets/2.png)\n      initialDelaySeconds: 10\n```"]