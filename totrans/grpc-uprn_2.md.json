["```go\nmessage ProductID {\n   string value = 1;\n}\n```", "```go\nmessage Product {\n   string id = 1;\n   string name = 2;\n   string description = 3;\n   float price = 4;\n}\n```", "```go\nrpc addProduct(Product) returns (google.protobuf.StringValue);\n```", "```go\nrpc getProduct(google.protobuf.StringValue) returns (Product);\n```", "```go\nsyntax = \"proto3\"; ![1](assets/1.png)\npackage ecommerce; ![2](assets/2.png)\n\nservice ProductInfo { ![3](assets/3.png)\n    rpc addProduct(Product) returns (ProductID); ![4](assets/4.png)\n    rpc getProduct(ProductID) returns (Product); ![5](assets/5.png)\n}\n\nmessage Product { ![6](assets/6.png)\n    string id = 1; ![7](assets/7.png)\n    string name = 2;\n    string description = 3;\n}\n\nmessage ProductID { ![8](assets/8.png)\n    string value = 1;\n}\n```", "```go\nsyntax = \"proto3\";\n\nimport \"google/protobuf/wrappers.proto\";\n\npackage ecommerce;\n...\n```", "```go\ngo mod init productinfo/service\n```", "```go\n└─ productinfo\n           └─ service\n                 ├── go.mod\n                 ├ . . .\n                 └── ecommerce\n                         └── . . .\n```", "```go\nmodule productinfo/service\n\nrequire (\n  github.com/gofrs/uuid v3.2.0\n  github.com/golang/protobuf v1.3.2\n  github.com/google/uuid v1.1.1\n  google.golang.org/grpc v1.24.0\n)\n```", "```go\ngo get -u google.golang.org/grpc\n```", "```go\ngo get -u github.com/golang/protobuf/protoc-gen-go\n```", "```go\nprotoc -I ecommerce \\ ![1](assets/1.png)\n  ecommerce/product_info.proto \\ ![2](assets/2.png)\n  --go_out=plugins=grpc:<module_dir_path>/ecommerce ![3](assets/3.png)\n```", "```go\npackage main\n\nimport (\n  \"context\"\n  \"errors\"\n  \"log\"\n\n\"github.com/gofrs/uuid\"\npb \"productinfo/service/ecommerce\" ![1](assets/1.png)\n\n)\n\n// server is used to implement ecommerce/product_info. type server struct{ ![2](assets/2.png)\n  productMap map[string]*pb.Product\n}\n\n// AddProduct implements ecommerce.AddProduct func (s *server) AddProduct(ctx context.Context,\n                    in *pb.Product) (*pb.ProductID, error) { ![3](assets/3.png)![5](assets/5.png)![6](assets/6.png)\n  out, err := uuid.NewV4()\n  if err != nil {\n     return nil, status.Errorf(codes.Internal,\n         \"Error while generating Product ID\", err)\n  }\n  in.Id = out.String()\n  if s.productMap == nil {\n     s.productMap = make(map[string]*pb.Product)\n  }\n  s.productMap[in.Id] = in\n  return &pb.ProductID{Value: in.Id}, status.New(codes.OK, \"\").Err()\n\n}\n\n// GetProduct implements ecommerce.GetProduct func (s *server) GetProduct(ctx context.Context, in *pb.ProductID)\n                              (*pb.Product, error) { ![4](assets/4.png)![5](assets/5.png)![6](assets/6.png)\n  value, exists := s.productMap[in.Value]\n  if exists {\n    return value, status.New(codes.OK, \"\").Err()\n  }\n  return nil, status.Errorf(codes.NotFound, \"Product does not exist.\", in.Value)\n\n}\n```", "```go\npackage main\n\nimport (\n  \"log\"\n  \"net\"\n\n  pb \"productinfo/service/ecommerce\" ![1](assets/1.png)\n  \"google.golang.org/grpc\"\n)\n\nconst (\n  port = \":50051\"\n)\n\nfunc main() {\n  lis, err := net.Listen(\"tcp\", port) ![2](assets/2.png)\n  if err != nil {\n     log.Fatalf(\"failed to listen: %v\", err)\n  }\n  s := grpc.NewServer() ![3](assets/3.png)\n  pb.RegisterProductInfoServer(s, &server{}) ![4](assets/4.png)\n\n  log.Printf(\"Starting gRPC listener on port \" + port)\n  if err := s.Serve(lis); err != nil { ![5](assets/5.png)\n     log.Fatalf(\"failed to serve: %v\", err)\n  }\n}\n```", "```go\n product-info-service\n\n  ├── build.gradle\n  ├ . . .\n  └── src\n      ├── main\n      │   ├── java\n      │   └── resources\n      └── test\n          ├── java\n          └── resources\n```", "```go\napply plugin: 'java'\napply plugin: 'com.google.protobuf'\n\nrepositories {\n   mavenCentral()\n}\n\ndef grpcVersion = '1.24.1' ![1](assets/1.png)\n\ndependencies { ![2](assets/2.png)\n   compile \"io.grpc:grpc-netty:${grpcVersion}\"\n   compile \"io.grpc:grpc-protobuf:${grpcVersion}\"\n   compile \"io.grpc:grpc-stub:${grpcVersion}\"\n   compile 'com.google.protobuf:protobuf-java:3.9.2'\n}\n\nbuildscript {\n   repositories {\n       mavenCentral()\n   }\n   dependencies { ![3](assets/3.png)\n\n       classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.10'\n   }\n}\n\nprotobuf { ![4](assets/4.png)\n   protoc {\n       artifact = 'com.google.protobuf:protoc:3.9.2'\n   }\n   plugins {\n       grpc {\n           artifact = \"io.grpc:protoc-gen-grpc-java:${grpcVersion}\"\n       }\n   }\n   generateProtoTasks {\n       all()*.plugins {\n           grpc {}\n       }\n   }\n}\n\nsourceSets { ![5](assets/5.png)\n   main {\n       java {\n           srcDirs 'build/generated/source/proto/main/grpc'\n           srcDirs 'build/generated/source/proto/main/java'\n       }\n   }\n}\n\njar { ![6](assets/6.png)\n   manifest {\n       attributes \"Main-Class\": \"ecommerce.ProductInfoServer\"\n   }\n   from {\n       configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }\n   }\n}\n\napply plugin: 'application'\n\nstartScripts.enabled = false\n```", "```go\n$ ./gradle build\n```", "```go\npackage ecommerce;\n\nimport io.grpc.Status;\nimport io.grpc.StatusException;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\n\npublic class ProductInfoImpl extends ProductInfoGrpc.ProductInfoImplBase { ![1](assets/1.png)\n\n   private Map productMap = new HashMap<String, ProductInfoOuterClass.Product>();\n\n   @Override\n  public void addProduct(\n       ProductInfoOuterClass.Product request,\n      io.grpc.stub.StreamObserver\n           <ProductInfoOuterClass.ProductID> responseObserver ) { ![2](assets/2.png)![4](assets/4.png)\n       UUID uuid = UUID.randomUUID();\n       String randomUUIDString = uuid.toString();\n       productMap.put(randomUUIDString, request);\n       ProductInfoOuterClass.ProductID id =\n           ProductInfoOuterClass.ProductID.newBuilder()\n           .setValue(randomUUIDString).build();\n       responseObserver.onNext(id); ![5](assets/5.png)\n       responseObserver.onCompleted(); ![6](assets/6.png)\n   }\n\n   @Override\n  public void getProduct(\n       ProductInfoOuterClass.ProductID request,\n       io.grpc.stub.StreamObserver\n            <ProductInfoOuterClass.Product> responseObserver ) { ![3](assets/3.png)![4](assets/4.png)\n       String id = request.getValue();\n       if (productMap.containsKey(id)) {\n           responseObserver.onNext(\n                (ProductInfoOuterClass.Product) productMap.get(id)); ![5](assets/5.png)\n           responseObserver.onCompleted(); ![6](assets/6.png)\n       } else {\n           responseObserver.onError(new StatusException(Status.NOT_FOUND)); ![7](assets/7.png)\n       }\n   }\n}\n```", "```go\npackage ecommerce;\n\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\n\nimport java.io.IOException;\n\npublic class ProductInfoServer {\n\n   public static void main(String[] args)\n           throws IOException, InterruptedException {\n       int port = 50051;\n       Server server = ServerBuilder.forPort(port) ![1](assets/1.png)\n               .addService(new ProductInfoImpl())\n               .build()\n               .start();\n       System.out.println(\"Server started, listening on \" + port);\n       Runtime.getRuntime().addShutdownHook(new Thread(() -> { ![2](assets/2.png)\n           System.err.println(\"Shutting down gRPC server since JVM is \" +\n                \"shutting down\");\n           if (server != null) {\n               server.shutdown();\n           }\n           System.err.println(“Server shut down\");\n       }));\n       server.awaitTermination(); ![3](assets/3.png)\n   }\n}\n```", "```go\npackage main\n\nimport (\n  \"context\"\n  \"log\"\n  \"time\"\n\n  pb \"productinfo/client/ecommerce\" ![1](assets/1.png)\n  \"google.golang.org/grpc\"\n\n)\n\nconst (\n  address = \"localhost:50051\"\n)\n\nfunc main() {\n\n  conn, err := grpc.Dial(address, grpc.WithInsecure()) ![2](assets/2.png)\n  if err != nil {\n     log.Fatalf(\"did not connect: %v\", err)\n  }\n  defer conn.Close() ![7](assets/7.png)\n  c := pb.NewProductInfoClient(conn) ![3](assets/3.png)\n\n  name := \"Apple iPhone 11\"\n  description := `Meet Apple iPhone 11\\. All-new dual-camera system with\n              Ultra Wide and Night mode.`\n  price := float32(1000.0)\n  ctx, cancel := context.WithTimeout(context.Background(), time.Second) ![4](assets/4.png)\n  defer cancel()\n  r, err := c.AddProduct(ctx,\n         &pb.Product{Name: name, Description: description, Price: price})  ![5](assets/5.png)\n  if err != nil {\n     log.Fatalf(\"Could not add product: %v\", err)\n  }\n  log.Printf(\"Product ID: %s added successfully\", r.Value)\n\n  product, err := c.GetProduct(ctx, &pb.ProductID{Value: r.Value}) ![6](assets/6.png)\n  if err != nil {\n    log.Fatalf(\"Could not get product: %v\", err)\n  }\n  log.Printf(\"Product: \", product.String())\n\n}\n```", "```go\npackage ecommerce;\n\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\n\nimport java.util.logging.Logger;\n\n/**\n* gRPC client sample for productInfo service.\n*/\npublic class ProductInfoClient {\n\n   public static void main(String[] args) throws InterruptedException {\n       ManagedChannel channel = ManagedChannelBuilder\n           .forAddress(\"localhost\", 50051) ![1](assets/1.png)\n           .usePlaintext()\n           .build();\n\n       ProductInfoGrpc.ProductInfoBlockingStub stub =\n              ProductInfoGrpc.newBlockingStub(channel); ![2](assets/2.png)\n\n       ProductInfoOuterClass.ProductID productID = stub.addProduct(    ![3](assets/3.png)\n               ProductInfoOuterClass.Product.newBuilder()\n                       .setName(\"Apple iPhone 11\")\n                       .setDescription(\"Meet Apple iPhone 11\\. \" +\n                            All-new dual-camera system with \" +\n                            \"Ultra Wide and Night mode.\");\n                       .setPrice(1000.0f)\n                       .build());\n       System.out.println(productID.getValue());\n\n       ProductInfoOuterClass.Product product = stub.getProduct(productID);  ![4](assets/4.png)\n       System.out.println(product.toString());\n       channel.shutdown(); ![5](assets/5.png)\n   }\n}\n```", "```go\n└─ productinfo\n           └─ service\n                 ├─ go.mod\n                 ├─ main.go\n                 ├─ productinfo_service.go\n                 └─ ecommerce\n                    └── product_info.pb.go\n```", "```go\n$ go build -i -v -o bin/server\n```", "```go\n└─ productinfo\n           └─ client\n                ├─ go.mod\n                ├──main.go\n                └─ ecommerce\n                       └── product_info.pb.go\n```", "```go\n$ go build -i -v -o bin/client\n```", "```go\n// Running Server\n$ bin/server\n2019/08/08 10:17:58 Starting gRPC listener on port :50051\n\n// Running Client\n$ bin/client\n2019/08/08 11:20:01 Product ID: 5d0e7cdc-b9a0-11e9-93a4-6c96cfe0687d\nadded successfully\n2019/08/08 11:20:01 Product: id:\"5d0e7cdc-b9a0-11e9-93a4-6c96cfe0687d\"\n        name:\"Apple iPhone 11\"\n        description:\"Meet Apple iPhone 11\\. All-new dual-camera system with\n Ultra Wide and Night mode.\"\n        price:1000\n```", "```go\n$ gradle build\n```", "```go\n$ gradle build\n```", "```go\n$ java -jar build/libs/server.jar\nINFO: Server started, listening on 50051\n\n$ java -jar build/libs/client.jar\nINFO: Product ID: a143af20-12e6-483e-a28f-15a38b757ea8 added successfully.\nINFO: Product: name: \"Apple iPhone 11\"\ndescription: \"Meet Apple iPhone 11\\. All-new dual-camera system with\nUltra Wide and Night mode.\"\nprice: 1000.0\n```"]