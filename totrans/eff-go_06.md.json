["```go\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc ExampleLatencySimplest() {\n    for i := 0; i < xTimes; i++ {\n        start := time.Now() ![1](assets/1.png)\n        err := doOperation()\n        elapsed := time.Since(start) ![2](assets/2.png)\n\n        fmt.Printf(\"%v ns\\n\", elapsed.Nanoseconds()) ![3](assets/3.png)\n\n        // ...\n    }\n}\n```", "```go\nfunc ExampleLatencyAggregated() {\n    var count, sum int64\n    for i := 0; i < xTimes; i++ {\n        start := time.Now()\n        err := doOperation()\n        elapsed := time.Since(start)\n\n        sum += elapsed.Nanoseconds() ![1](assets/1.png)\n        count++\n\n        // ...\n    }\n\n    fmt.Printf(\"%v ns/op\\n\", sum/count) ![2](assets/2.png)\n}\n```", "```go\nfunc BenchmarkExampleLatency(b *testing.B) {\n    for i := 0; i < b.N; i++ { ![1](assets/1.png)\n        _ = doOperation()\n    }\n}\n```", "```go\nimport (\n    \"fmt\"\n    \"time\"\n\n    \"github.com/go-kit/log\"\n    \"github.com/go-kit/log/level\"\n)\n\nfunc ExampleLatencyLog() {\n    logger := log.With( ![1](assets/1.png)\n        log.NewLogfmtLogger(os.Stderr), \"ts\", log.DefaultTimestampUTC,\n    )\n\n    for i := 0; i < xTimes; i++ {\n        now := time.Now()\n        err := doOperation()\n        elapsed := time.Since(now)\n\n        level.Info(logger).Log( ![2](assets/2.png)\n            \"msg\", \"finished operation\",\n            \"result\", err,\n            \"elapsed\", elapsed.String(),\n        )\n\n        // ...\n    }\n}\n```", "```go\nlevel=info ts=2022-05-02T11:30:46.531839841Z msg=\"finished operation\" \\\nresult=\"error other\" elapsed=83.62459ms ![1](assets/1.png) level=info ts=2022-05-02T11:30:46.868633635Z msg=\"finished operation\" \\\nresult=\"error other\" elapsed=336.769413ms\nlevel=info ts=2022-05-02T11:30:47.194901418Z msg=\"finished operation\" \\\nresult=\"error first\" elapsed=326.242636ms\nlevel=info ts=2022-05-02T11:30:47.51101522Z msg=\"finished operation\" \\\nresult=null elapsed=316.088166ms\nlevel=info ts=2022-05-02T11:30:47.803680146Z msg=\"finished operation\" \\\nresult=\"error first\" elapsed=292.639849ms\n```", "```go\nimport (\n    \"fmt\"\n    \"time\"\n\n    \"github.com/bwplotka/tracing-go/tracing\"\n    \"github.com/bwplotka/tracing-go/tracing/exporters/otlp\"\n)\n\nfunc ExampleLatencyTrace() {\n    tracer, cleanFn, err := tracing.NewTracer(otlp.Exporter(\"<endpoint>\")) ![1](assets/1.png)\n    if err != nil { /* Handle error... */ }\n    defer cleanFn()\n\n    for i := 0; i < xTimes; i++ {\n        ctx, span := tracer.StartSpan(\"doOperation\") ![2](assets/2.png)\n        err := doOperationWithCtx(ctx)\n        span.End(err) ![3](assets/3.png)\n\n        // ...\n    }\n}\n\nfunc doOperationWithCtx(ctx context.Context) error {\n    _, span := tracing.StartSpan(ctx, \"first operation\") ![4](assets/4.png)\n    // ...\n    span.End(nil)\n\n    // ...\n}\n```", "```go\nimport (\n    \"fmt\"\n    \"time\"\n\n    \"github.com/prometheus/client_golang/prometheus\"\n    \"github.com/prometheus/client_golang/prometheus/promauto\"\n    \"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nfunc ExampleLatencyMetric() {\n    reg := prometheus.NewRegistry() ![1](assets/1.png)\n    latencySeconds := promauto.With(reg).\n\nNewHistogramVec(prometheus.HistogramOpts{ ![2](assets/2.png)\n        Name:    \"operation_duration_seconds\",\n        Help:    \"Tracks the latency of operations in seconds.\",\n        Buckets: []float64{0.001, 0.01, 0.1, 1, 10, 100},\n    }, []string{\"error_type\"}) ![3](assets/3.png)\n\n    go func() {\n        for i := 0; i < xTimes; i++ {\n             now := time.Now()\n             err := doOperation()\n             elapsed := time.Since(now)\n\n             latencySeconds.WithLabelValues(errorType(err)).\n                 Observe(elapsed.Seconds()) ![4](assets/4.png)\n\n             // ...\n        }\n    }()\n\n    err := http.ListenAndServe(\n        \":8080\",\n        promhttp.HandlerFor(reg, promhttp.HandlerOpts{})\n    ) ![5](assets/5.png)\n    // ...\n}\n```", "```go\n# HELP operation_duration_seconds Tracks the latency of operations in seconds.\n# TYPE operation_duration_seconds histogram\noperation_duration_seconds_bucket{error_type=\"\",le=\"0.001\"} 0 ![1](assets/1.png) operation_duration_seconds_bucket{error_type=\"\",le=\"0.01\"} 0\noperation_duration_seconds_bucket{error_type=\"\",le=\"0.1\"} 1\noperation_duration_seconds_bucket{error_type=\"\",le=\"1\"} 2\noperation_duration_seconds_bucket{error_type=\"\",le=\"10\"} 2\noperation_duration_seconds_bucket{error_type=\"\",le=\"100\"} 2\noperation_duration_seconds_bucket{error_type=\"\",le=\"+Inf\"} 2\noperation_duration_seconds_sum{error_type=\"\"} 0.278675917 ![2](assets/2.png) operation_duration_seconds_count{error_type=\"\"} 2\n```", "```go\ncat << EOF > ./prom.yaml\nscrape_configs:\n- job_name: \"local\"\n  scrape_interval: \"15s\" ![1](assets/1.png) static_configs:\n  - targets: [ \"localhost:8080\" ] ![2](assets/2.png) EOF\nprometheus --config.file=./prom.yaml ![3](assets/3.png)\n```", "```go\nprepare()\n\nfor i := 0; i < xTimes; i++ {\n    start := time.Now() ![1](assets/1.png)\n    err := doOperation()\n    elapsed := time.Since(start) ![2](assets/2.png)\n\n    // Capture 'elapsed' value using log, trace or metric...\n\n    if err != nil { /* Handle error... */ }\n}\n\ntearDown()\n```", "```go\nimport (\n    \"net/http\"\n\n    \"github.com/prometheus/client_golang/prometheus\"\n    \"github.com/prometheus/client_golang/prometheus/collectors\"\n    \"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nfunc ExampleCPUTimeMetric() {\n    reg := prometheus.NewRegistry()\n    reg.MustRegister(\n        collectors.NewProcessCollector(collectors.ProcessCollectorOpts{}),\n    ) ![1](assets/1.png)\n\n    go func() {\n        for i := 0; i < xTimes; i++ {\n             err := doOperation()\n             // ...\n        }\n    }()\n\n    err := http.ListenAndServe(\n        \":8080\",\n        promhttp.HandlerFor(reg, promhttp.HandlerOpts{}),\n    )\n    // ...\n}\n```", "```go\nimport(\n    \"fmt\"\n    \"runtime\"\n    \"runtime/metrics\"\n)\n\nvar memMetrics = []metrics.Sample{\n    {Name: \"/gc/heap/allocs:bytes\"}, ![1](assets/1.png)\n    {Name: \"/memory/classes/heap/objects:bytes\"},\n}\n\nfunc printMemRuntimeMetric() {\n    runtime.GC() ![2](assets/2.png)\n    metrics.Read(memMetrics) ![3](assets/3.png)\n\n    fmt.Println(\"Total bytes allocated:\", memMetrics[0].Value.Uint64()) ![4](assets/4.png)\n    fmt.Println(\"In-use bytes:\", memMetrics[1].Value.Uint64())\n}\n```"]