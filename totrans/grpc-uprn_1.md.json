["```go\n// ProductInfo.proto syntax = \"proto3\"; ![1](assets/1.png)\npackage ecommerce; ![2](assets/2.png)\n\nservice ProductInfo { ![3](assets/3.png)\n    rpc addProduct(Product) returns (ProductID); ![4](assets/4.png)\n    rpc getProduct(ProductID) returns (Product); ![5](assets/5.png)\n}\n\nmessage Product { ![6](assets/6.png)\n    string id = 1; ![7](assets/7.png)\n    string name = 2;\n    string description = 3;\n}\n\nmessage ProductID { ![8](assets/8.png)\n    string value = 1;\n}\n```", "```go\nimport (\n  ...\n  \"context\"\n  pb \"github.com/grpc-up-and-running/samples/ch02/productinfo/go/proto\"\n  \"google.golang.org/grpc\"\n  ...\n)\n\n// ProductInfo implementation with Go\n\n// Add product remote method\nfunc (s *server) AddProduct(ctx context.Context, in *pb.Product) (\n      *pb.ProductID, error) {\n   // business logic\n}\n\n// Get product remote method\nfunc (s *server) GetProduct(ctx context.Context, in *pb.ProductID) (\n     *pb.Product, error) {\n   // business logic\n}\n```", "```go\nfunc main() {\n  lis, _ := net.Listen(\"tcp\", port)\n  s := grpc.NewServer()\n  pb.RegisterProductInfoServer(s, &server{})\n  if err := s.Serve(lis); err != nil {\n    log.Fatalf(\"failed to serve: %v\", err)\n  }\n}\n```", "```go\n// Create a channel using remote server address\nManagedChannel channel = ManagedChannelBuilder.forAddress(\"localhost\", 8080)\n   .usePlaintext(true)\n   .build();\n\n// Initialize blocking stub using the channel\nProductInfoGrpc.ProductInfoBlockingStub stub =\n       ProductInfoGrpc.newBlockingStub(channel);\n\n// Call remote method using the blocking stub\nStringValue productID = stub.addProduct(\n       Product.newBuilder()\n       .setName(\"Apple iPhone 11\")\n       .setDescription(\"Meet Apple iPhone 11.\" +\n            \"All-new dual-camera system with \" +\n            \"Ultra Wide and Night mode.\")\n       .build());\n```"]