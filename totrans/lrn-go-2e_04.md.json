["```go\nfunc main() {\n    x := 10\n    if x > 5 {\n        fmt.Println(x)\n        x := 5\n        fmt.Println(x)\n    }\n    fmt.Println(x)\n}\n```", "```go\n10\n5\n10\n```", "```go\nfunc main() {\n    x := 10\n    if x > 5 {\n        x, y := 5, 20\n        fmt.Println(x, y)\n    }\n    fmt.Println(x)\n}\n```", "```go\n5 20\n10\n```", "```go\nfunc main() {\n    x := 10\n    fmt.Println(x)\n    fmt := \"oops\"\n    fmt.Println(fmt)\n}\n```", "```go\nfmt.Println undefined (type string has no field or method Println)\n```", "```go\nn := rand.Intn(10)\nif n == 0 {\n    fmt.Println(\"That's too low\")\n} else if n > 5 {\n    fmt.Println(\"That's too big:\", n)\n} else {\n    fmt.Println(\"That's a good number:\", n)\n}\n```", "```go\nif n := rand.Intn(10); n == 0 {\n    fmt.Println(\"That's too low\")\n} else if n > 5 {\n    fmt.Println(\"That's too big:\", n)\n} else {\n    fmt.Println(\"That's a good number:\", n)\n}\n```", "```go\nif n := rand.Intn(10); n == 0 {\n    fmt.Println(\"That's too low\")\n} else if n > 5 {\n    fmt.Println(\"That's too big:\", n)\n} else {\n    fmt.Println(\"That's a good number:\", n)\n}\nfmt.Println(n)\n```", "```go\nundefined: n\n```", "```go\nfor i := 0; i < 10; i++ {\n    fmt.Println(i)\n}\n```", "```go\ni := 0\nfor ; i < 10; i++ {\n    fmt.Println(i)\n}\n```", "```go\nfor i := 0; i < 10; {\n    fmt.Println(i)\n    if i % 2 == 0 {\n        i++\n    } else {\n        i+=2\n    }\n}\n```", "```go\ni := 1\nfor i < 100 {\n        fmt.Println(i)\n        i = i * 2\n}\n```", "```go\n10 PRINT \"HELLO\"\n20 GOTO 10\n```", "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    for {\n        fmt.Println(\"Hello\")\n    }\n}\n```", "```go\nHello\nHello\nHello\nHello\nHello\nHello\nHello\n...\n```", "```go\ndo {\n    // things to do in the loop\n} while (CONDITION);\n```", "```go\nfor {\n    // things to do in the loop\n    if !CONDITION {\n        break\n    }\n}\n```", "```go\nfor i := 1; i <= 100; i++ {\n    if i%3 == 0 {\n        if i%5 == 0 {\n            fmt.Println(\"FizzBuzz\")\n        } else {\n            fmt.Println(\"Fizz\")\n        }\n    } else if i%5 == 0 {\n        fmt.Println(\"Buzz\")\n    } else {\n        fmt.Println(i)\n    }\n}\n```", "```go\nfor i := 1; i <= 100; i++ {\n    if i%3 == 0 && i%5 == 0 {\n        fmt.Println(\"FizzBuzz\")\n        continue\n    }\n    if i%3 == 0 {\n        fmt.Println(\"Fizz\")\n        continue\n    }\n    if i%5 == 0 {\n        fmt.Println(\"Buzz\")\n        continue\n    }\n    fmt.Println(i)\n}\n```", "```go\nevenVals := []int{2, 4, 6, 8, 10, 12}\nfor i, v := range evenVals {\n    fmt.Println(i, v)\n}\n```", "```go\n0 2\n1 4\n2 6\n3 8\n4 10\n5 12\n```", "```go\nevenVals := []int{2, 4, 6, 8, 10, 12}\nfor _, v := range evenVals {\n    fmt.Println(v)\n}\n```", "```go\n2\n4\n6\n8\n10\n12\n```", "```go\nuniqueNames := map[string]bool{\"Fred\": true, \"Raul\": true, \"Wilma\": true}\nfor k := range uniqueNames {\n    fmt.Println(k)\n}\n```", "```go\nm := map[string]int{\n    \"a\": 1,\n    \"c\": 3,\n    \"b\": 2,\n}\n\nfor i := 0; i < 3; i++ {\n    fmt.Println(\"Loop\", i)\n    for k, v := range m {\n        fmt.Println(k, v)\n    }\n}\n```", "```go\nLoop 0\nc 3\nb 2\na 1\nLoop 1\na 1\nc 3\nb 2\nLoop 2\nb 2\na 1\nc 3\n```", "```go\nsamples := []string{\"hello\", \"apple_π!\"}\nfor _, sample := range samples {\n    for i, r := range sample {\n        fmt.Println(i, r, string(r))\n    }\n    fmt.Println()\n}\n```", "```go\n0 104 h\n1 101 e\n2 108 l\n3 108 l\n4 111 o\n```", "```go\n0 97 a\n1 112 p\n2 112 p\n3 108 l\n4 101 e\n5 95 _\n6 960 π\n8 33 !\n```", "```go\nevenVals := []int{2, 4, 6, 8, 10, 12}\nfor _, v := range evenVals {\n    v *= 2\n}\nfmt.Println(evenVals)\n```", "```go\n[2 4 6 8 10 12]\n```", "```go\nfunc main() {\n    samples := []string{\"hello\", \"apple_π!\"}\nouter:\n    for _, sample := range samples {\n        for i, r := range sample {\n            fmt.Println(i, r, string(r))\n            if r == 'l' {\n                continue outer\n            }\n        }\n        fmt.Println()\n    }\n}\n```", "```go\n0 104 h\n1 101 e\n2 108 l\n0 97 a\n1 112 p\n2 112 p\n3 108 l\n```", "```go\nouter:\n    for _, outerVal := range outerValues {\n        for _, innerVal := range outerVal {\n            // process innerVal\n            if invalidSituation(innerVal) {\n                continue outer\n            }\n        }\n        // here we have code that runs only when all of the\n        // innerVal values were successfully processed\n    }\n```", "```go\nevenVals := []int{2, 4, 6, 8, 10}\nfor i, v := range evenVals {\n    if i == 0 {\n        continue\n    }\n    if i == len(evenVals)-1 {\n        break\n    }\n    fmt.Println(i, v)\n}\n```", "```go\nevenVals := []int{2, 4, 6, 8, 10}\nfor i := 1; i < len(evenVals)-1; i++ {\n    fmt.Println(i, evenVals[i])\n}\n```", "```go\nwords := []string{\"a\", \"cow\", \"smile\", \"gopher\",\n    \"octopus\", \"anthropologist\"}\nfor _, word := range words {\n    switch size := len(word); size {\n    case 1, 2, 3, 4:\n        fmt.Println(word, \"is a short word!\")\n    case 5:\n        wordLen := len(word)\n        fmt.Println(word, \"is exactly the right length:\", wordLen)\n    case 6, 7, 8, 9:\n    default:\n        fmt.Println(word, \"is a long word!\")\n    }\n}\n```", "```go\na is a short word!\ncow is a short word!\nsmile is exactly the right length: 5\nanthropologist is a long word!\n```", "```go\nfunc main() {\n    for i := 0; i < 10; i++ {\n        switch i {\n        case 0, 2, 4, 6:\n            fmt.Println(i, \"is even\")\n        case 3:\n            fmt.Println(i, \"is divisible by 3 but not 2\")\n        case 7:\n            fmt.Println(\"exit the loop!\")\n            break\n        default:\n            fmt.Println(i, \"is boring\")\n        }\n    }\n}\n```", "```go\n0 is even\n1 is boring\n2 is even\n3 is divisible by 3 but not 2\n4 is even\n5 is boring\n6 is even\nexit the loop!\n8 is boring\n9 is boring\n```", "```go\nloop:\n    for i := 0; i < 10; i++ {\n```", "```go\nbreak loop\n```", "```go\n0 is even\n1 is boring\n2 is even\n3 is divisible by 3 but not 2\n4 is even\n5 is boring\n6 is even\nexit the loop!\n```", "```go\nwords := []string{\"hi\", \"salutations\", \"hello\"}\nfor _, word := range words {\n    switch wordLen := len(word); {\n    case wordLen < 5:\n        fmt.Println(word, \"is a short word!\")\n    case wordLen > 10:\n        fmt.Println(word, \"is a long word!\")\n    default:\n        fmt.Println(word, \"is exactly the right length.\")\n    }\n}\n```", "```go\nhi is a short word!\nsalutations is a long word!\nhello is exactly the right length.\n```", "```go\nswitch {\ncase a == 2:\n    fmt.Println(\"a is 2\")\ncase a == 3:\n    fmt.Println(\"a is 3\")\ncase a == 4:\n    fmt.Println(\"a is 4\")\ndefault:\n    fmt.Println(\"a is \", a)\n}\n```", "```go\nswitch a {\ncase 2:\n    fmt.Println(\"a is 2\")\ncase 3:\n    fmt.Println(\"a is 3\")\ncase 4:\n    fmt.Println(\"a is 4\")\ndefault:\n    fmt.Println(\"a is \", a)\n}\n```", "```go\nfor i := 1; i <= 100; i++ {\n    switch {\n    case i%3 == 0 && i%5 == 0:\n        fmt.Println(\"FizzBuzz\")\n    case i%3 == 0:\n        fmt.Println(\"Fizz\")\n    case i%5 == 0:\n        fmt.Println(\"Buzz\")\n    default:\n        fmt.Println(i)\n    }\n}\n```", "```go\nfunc main() {\n    a := 10\n    goto skip\n    b := 20\nskip:\n    c := 30\n    fmt.Println(a, b, c)\n    if c > a {\n        goto inner\n    }\n    if a < b {\n    inner:\n        fmt.Println(\"a is less than b\")\n    }\n}\n```", "```go\ngoto skip jumps over declaration of b at ./main.go:8:4\ngoto inner jumps into block starting at ./main.go:15:11\n```", "```go\nfunc main() {\n    a := rand.Intn(10)\n    for a < 100 {\n        if a%5 == 0 {\n            goto done\n        }\n        a = a*2 + 1\n    }\n    fmt.Println(\"do something when the loop completes normally\")\ndone:\n    fmt.Println(\"do complicated stuff no matter why we left the loop\")\n    fmt.Println(a)\n}\n```", "```go\noverflow:\n    // ±Inf\n    mant = 0\n    exp = 1<<flt.expbits - 1 + flt.bias\n    overflow = true\n\nout:\n    // Assemble bits.\n    bits := mant & (uint64(1)<<flt.mantbits - 1)\n    bits |= uint64((exp-flt.bias)&(1<<flt.expbits-1)) << flt.mantbits\n    if d.neg {\n        bits |= 1 << flt.mantbits << flt.expbits\n    }\n    return bits, overflow\n```", "```go\n    total := total + i\n    fmt.Println(total)\n    ```"]