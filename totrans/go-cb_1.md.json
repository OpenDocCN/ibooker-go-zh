["```go\nvar c = 'A'\n```", "```go\nvar c byte = 'A'\n```", "```go `` ```", "```go\nvar str = \"A simple string\"\n```", "```go\nvar str = \"A simple string\\n\"\n```", "```go\nvar str = `A \\\"simple\\\" string`\n```", "```go\nvar str = \"\nA\nsimple\nstring\n\"\n```", "```go\nvar str = `\nA\nsimple\nstring\n`\n```", "```go\nstr := \"This is a simple string\"\nbytes := []byte(str)\n```", "```go\nbytes := []byte{84, 104, 105, 115, 32, 105, 115, 32, 97, 32, 115, 105, 109, 112, 108,\n                101, 32, 115, 116, 114, 105, 110, 103}\nstr := string(bytes)\n```", "```go\nvar str string = \"The time is \" + time.Now().Format(time.Kitchen) + \" now.\"\n```", "```go\nThe time is 5:28PM now.\n```", "```go\nvar str string = strings.Join([]string{\"The time is\",\n                    time.Now().Format(time.Kitchen),\n                    \"now.\"}, \" \")\n```", "```go\nvar str string = fmt.Sprint(\"The time is \", time.Now().Format(time.Kitchen), \" now.\")\n```", "```go\nvar str string = fmt.Sprint(\"The time is \", time.Now(), \" now.\")\n```", "```go\nvar str string = fmt.Sprintf(\"The time is %v now.\", time.Now())\n```", "```go\nvar builder strings.Builder\nbuilder.WriteString(\"The time is \")\nbuilder.WriteString(time.Now().Format(time.Kitchen))\nbuilder.WriteString(\" now.\")\nvar str string = builder.String()\n```", "```go\nvar builder strings.Builder\nfmt.Fprint(&builder, \"The time is \")\nfmt.Fprint(&builder, time.Now())\nfmt.Fprint(&builder, \" now.\")\nvar str string = builder.String()\n```", "```go\npackage string\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n)\n\nfunc BenchmarkStringConcat(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\t_ = \"The time is \" + time.Now().Format(time.Kitchen) + \" now.\"\n\t}\n}\n\nfunc BenchmarkStringJoin(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\t_ = strings.Join([]string{\"The time is\", time.Now().Format(time.Kitchen),\n            \"now.\"}, \" \")\n\t}\n}\n\nfunc BenchmarkStringSprint(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\t_ = fmt.Sprint(\"The time is \", time.Now().Format(time.Kitchen), \" now.\")\n\t}\n}\n\nfunc BenchmarkStringSprintDiff(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\t_ = fmt.Sprint(\"The time is \", time.Now(), \" now.\")\n\t}\n}\n\nfunc BenchmarkStringSprintf(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\t_ = fmt.Sprintf(\"The time is %v now.\", time.Now().Format(time.Kitchen))\n\t}\n}\n\nfunc BenchmarkStringSprintfDiff(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\t_ = fmt.Sprintf(\"The time is %s now.\", time.Now())\n\t}\n}\n\nfunc BenchmarkStringBuilderFprint(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tvar builder strings.Builder\n\t\tfmt.Fprint(&builder, \"The time is \")\n\t\tfmt.Fprint(&builder, time.Now().Format(time.Kitchen))\n\t\tfmt.Fprint(&builder, \" now.\")\n\t\t_ = builder.String()\n\t}\n}\n\nfunc BenchmarkStringBuilderWriteString(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tvar builder strings.Builder\n\t\tbuilder.WriteString(\"The time is \")\n\t\tbuilder.WriteString(time.Now().Format(time.Kitchen))\n\t\tbuilder.WriteString(\" now.\")\n\t\t_ = builder.String()\n\t}\n}\n```", "```go\n$ % go test -bench=BenchmarkString -benchmem\n```", "```go\ngoos: darwin\ngoarch: arm64\npkg: github.com/sausheong/gocookbook/ch06_string\nBenchmarkStringConcat-10                \t 5787976\t       206.7 ns/op\nBenchmarkStringJoin-10                  \t 5121637\t       235.0 ns/op\nBenchmarkStringSprint-10                \t 3680838\t       323.8 ns/op\nBenchmarkStringSprintDiff-10            \t 1541514\t       779.9 ns/op\nBenchmarkStringSprintf-10               \t 4032438\t       297.8 ns/op\nBenchmarkStringSprintfDiff-10           \t 1610212\t       740.9 ns/op\nBenchmarkStringBuilderFprint-10         \t 2580783\t       464.2 ns/op\nBenchmarkStringBuilderWriteString-10    \t 4866556\t       247.0 ns/op\nPASS\nok  \tgithub.com/sausheong/gocookbook/ch06_string\t13.025s\n```", "```go\ni, err := strconv.Atoi(\"123\") // equivalent to ParseInt(\"123\", 10, 0)\n```", "```go\ni, err := strconv.ParseInt(\"123\", 10, 0)\n```", "```go\nf, err := strconv.ParseFloat(\"1.234\", 64)\n```", "```go\nb, err := strconv.ParseBool(\"TRUE\")\n```", "```go\nstr := \"Not a number\"\n_, err := strconv.Atoi(str)\nif err != nil {\n    e := err.(*strconv.NumError)\n    fmt.Println(\"Func:\", e.Func)\n    fmt.Println(\"Num:\", e.Num)\n    fmt.Println(\"Err:\", e.Err)\n    fmt.Println(err)\n}\n```", "```go\nFunc: Atoi\nNum: Not a number\nErr: invalid syntax\nstrconv.Atoi: parsing \"Not a number\": invalid syntax\n```", "```go\nstr := strconv.Itoa(123) // equivalent to FormatInt(int64(123), 10)\n```", "```go\nstr := strconv.FormatInt(int64(123), 10)\n```", "```go\nstr := strconv.FormatInt(int64(123), 2)\n```", "```go\nvar v float64 = 123456.123456\nvar s string\n\ns = strconv.FormatFloat(v, 'f', -1, 64)\nfmt.Println(\"f (prec=-1)\\t:\", s)\ns = strconv.FormatFloat(v, 'f', 4, 64)\nfmt.Println(\"f (prec=4)\\t:\", s)\ns = strconv.FormatFloat(v, 'f', 9, 64)\nfmt.Println(\"f (prec=9)\\t:\", s)\n\ns = strconv.FormatFloat(v, 'e', -1, 64)\nfmt.Println(\"\\ne (prec=-1)\\t:\", s)\ns = strconv.FormatFloat(v, 'E', -1, 64)\nfmt.Println(\"E (prec=-1)\\t:\", s)\ns = strconv.FormatFloat(v, 'e', 4, 64)\nfmt.Println(\"e (prec=4)\\t:\", s)\ns = strconv.FormatFloat(v, 'e', 9, 64)\nfmt.Println(\"e (prec=9)\\t:\", s)\n\ns = strconv.FormatFloat(v, 'g', -1, 64)\nfmt.Println(\"\\ng (prec=-1)\\t:\", s)\ns = strconv.FormatFloat(v, 'G', -1, 64)\nfmt.Println(\"G (prec=-1)\\t:\", s)\ns = strconv.FormatFloat(v, 'g', 4, 64)\nfmt.Println(\"g (prec=4)\\t:\", s)\n```", "```go\nf (prec=-1)\t: 123456.123456\nf (prec=4)\t: 123456.1235\nf (prec=9)\t: 123456.123456000\n\ne (prec=-1)\t: 1.23456123456e+05\nE (prec=-1)\t: 1.23456123456E+05\ne (prec=4)\t: 1.2346e+05\ne (prec=9)\t: 1.234561235e+05\n\ng (prec=-1)\t: 123456.123456\nG (prec=-1)\t: 123456.123456\ng (prec=4)\t: 1.235e+05\n```", "```go\nvar quote string = `I loved her against reason, against promise,\nagainst peace, against hope, against happiness,\nagainst all discouragement that could be.`\n```", "```go\nreplaced := strings.Replace(quote, \"against\", \"with\", 1)\nfmt.Println(replaced)\nreplaced2 := strings.Replace(quote, \"against\", \"with\", 2)\nfmt.Println(\"\\n\", replaced2)\nreplacedAll := strings.Replace(quote, \"against\", \"with\", -1)\nfmt.Println(\"\\n\", replacedAll)\n```", "```go\nI loved her with reason, against promise,\nagainst peace, against hope, against happiness,\nagainst all discouragement that could be.\n\n I loved her with reason, with promise,\nagainst peace, against hope, against happiness,\nagainst all discouragement that could be.\n\n I loved her with reason, with promise,\nwith peace, with hope, with happiness,\nwith all discouragement that could be.\n```", "```go\nreplacer := strings.NewReplacer(\"her\", \"him\", \"against\", \"for\", \"all\", \"some\")\nreplaced := replacer.Replace(quote)\nfmt.Println(replaced)\n```", "```go\nI loved him for reason, for promise,\nfor peace, for hope, for happiness,\nfor some discouragement that could be.\n```", "```go\nfunc BenchmarkOneReplace(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tstrings.Replace(quote, \"her\", \"him\", 1)\n\t}\n}\n\nfunc BenchmarkOneReplacer(b *testing.B) {\n\treplacer := strings.NewReplacer(\"her\", \"him\")\n\tb.ResetTimer()\n\tfor i := 0; i < b.N; i++ {\n\t\treplacer.Replace(quote)\n\t}\n}\n```", "```go\ngoos: darwin\ngoarch: arm64\npkg: github.com/sausheong/gocookbook/ch06_string\nBenchmarkOneReplace-10     \t 7264310\t       156.9 ns/op\nBenchmarkOneReplacer-10    \t 4336489\t       276.0 ns/op\nPASS\nok  \tgithub.com/sausheong/gocookbook/ch06_string\t3.151s\n```", "```go\nfunc BenchmarkReplace(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tstrings.Replace(quote, \"against\", \"with\", -1)\n\t}\n}\n\nfunc BenchmarkReplacerCreate(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tstrings.NewReplacer(\"against\", \"with\")\n\t}\n}\n\nfunc BenchmarkReplacer(b *testing.B) {\n\treplacer := strings.NewReplacer(\"against\", \"with\")\n\tb.ResetTimer()\n\tfor i := 0; i < b.N; i++ {\n\t\treplacer.Replace(quote)\n\t}\n}\n```", "```go\ngoos: darwin\ngoarch: arm64\npkg: github.com/sausheong/gocookbook/ch06_string\nBenchmarkReplace-10           \t 2250291\t       532.1 ns/op\nBenchmarkReplacerCreate-10    \t31878366\t        37.13 ns/op\nBenchmarkReplacer-10          \t 4671319\t       255.0 ns/op\nPASS\nok  \tgithub.com/sausheong/gocookbook/ch06_string\t4.547s\n```", "```go\nvar quote string = `I loved her against reason, against promise,\nagainst peace, against hope, against happiness,\nagainst all discouragement that could be.`\n```", "```go\nquote[12:26]\n```", "```go\nstrings.Index(quote, \"against reason\")\n```", "```go\ni := strings.Index(quote, \"against reason\")\nj := i + len(\"against reason\")\nfmt.Println(quote[i:j])\n```", "```go\nvar quote string = `I loved her against reason, against promise,\nagainst peace, against hope, against happiness,\nagainst all discouragement that could be.`\n```", "```go\nvar has bool = strings.Contains(quote, \"against\")\n```", "```go\nstrings.HasPrefix(quote, \"I loved\")\n```", "```go\nprefix := \"I loved\"\nif quote[:len(prefix)] == prefix {\n    ... // do whatever you wanted if the string has the prefix\n}\n```", "```go\nstrings.HasSuffix(quote, \"could be.\")\n```", "```go\nsuffix := \"could be.\"\nif quote[len(quote)-len(suffix):] != suffix {\n    ... // do whatever you wanted if the string has the prefix\n}\n```", "```go\nvar quote string = `I loved her against reason, against promise,\nagainst peace, against hope, against happiness,\nagainst all discouragement that could be.`\n```", "```go\narray := strings.Split(quote, \" \")\nfmt.Printf(\"%q\", array)\n```", "```go\n[\"I\" \"loved\" \"her\" \"against\" \"reason,\" \"against\" \"promise,\" \"\\nagainst\" \"peace,\"\n\"against\" \"hope,\" \"against\" \"happiness,\" \"\\nagainst\" \"all\" \"discouragement\" \"that\"\n\"could\" \"be.\"]\n```", "```go\narray := strings.Fields(quote)\nfmt.Printf(\"%q\", array)\n```", "```go\n[\"I\" \"loved\" \"her\" \"against\" \"reason,\" \"against\" \"promise,\" \"against\" \"peace,\"\n\"against\" \"hope,\" \"against\" \"happiness,\" \"against\" \"all\" \"discouragement\" \"that\"\n\"could\" \"be.\"]\n```", "```go\nf := func(c rune) bool {\n    return unicode.IsPunct(c) || !unicode.IsLetter(c)\n}\narray := strings.FieldsFunc(quote, f)\nfmt.Printf(\"%q\", array)\n```", "```go\n[\"I\" \"loved\" \"her\" \"against\" \"reason\" \"against\" \"promise\" \"against\" \"peace\"\n\"against\" \"hope\" \"against\" \"happiness\" \"against\" \"all\" \"discouragement\" \"that\"\n\"could\" \"be\"]\n```", "```go\narray := strings.SplitN(quote, \" \", 10)\nfmt.Printf(\"%q\", array)\n```", "```go\n[\"I\" \"loved\" \"her\" \"against\" \"reason,\" \"against\" \"promise,\" \"\\nagainst\" \"peace,\"\n\"against hope, against happiness, \\nagainst all discouragement that could be.\"]\n```", "```go\narray := strings.SplitAfter(quote, \" \")\nfmt.Printf(\"%q\", array)\n```", "```go\n[\"I \" \"loved \" \"her \" \"against \" \"reason, \" \"against \" \"promise, \" \"\\nagainst \"\n\"peace, \" \"against \" \"hope, \" \"against \" \"happiness, \" \"\\nagainst \" \"all \"\n\"discouragement \" \"that \" \"could \" \"be.\"]\n```", "```go\nvar str string = \", and that is all.\"\nvar cutset string = \",. \"\ntrimmed := strings.Trim(str, cutset) // \"and that is all\"\n```", "```go\ntrimmedLeft := strings.TrimLeft(str, cutset)   // \"and that is all.\"\ntrimmedRight := strings.TrimRight(str, cutset) // \", and that is all\"\n```", "```go\ntrimmedPrefix := strings.TrimPrefix(str, \", and \")\t// \"that is all.\"\n```", "```go\ntrimmedSuffix := strings.TrimSuffix(str, \" all.\") // \", and that is\"\n```", "```go\ntrimmed := strings.TrimSpace(\"\\r\\n\\t Hello World \\t\\n\\r\") // Hello World\n```", "```go\nf := func(c rune) bool {\n\treturn unicode.IsPunct(c) || !unicode.IsLetter(c)\n}\ntrimmed := strings.TrimFunc(str, f) // \"and that is all\"\n```", "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar input string\n\tfmt.Print(\"Please enter a word: \")\n\tn, err := fmt.Scan(&input)\n\tif err != nil {\n\t\tfmt.Println(\"error with user input:\", err, n)\n\t} else {\n\t\tfmt.Println(\"You entered:\", input)\n\t}\n}\n```", "```go\n% go run scan.go\nPlease enter a word: Hello\nYou entered: Hello\n```", "```go\nn, err := fmt.Scan(input)\nif err != nil {\n\tfmt.Println(\"error with user input:\", err, n)\n}\n```", "```go\n% go run scan.go\nPlease enter a word: error with user input: type not a pointer: string 0\n```", "```go\nfunc main() {\n\tvar input1, input2 string\n\tfmt.Print(\"Please enter two words: \")\n\tn, err := fmt.Scan(&input1, &input2)\n\tif err != nil {\n\t\tfmt.Println(\"error with user input:\", err, n)\n\t} else {\n\t\tfmt.Println(\"You entered:\", input1, \"and\", input2)\n\t}\n}\n```", "```go\n% go run scan.go\nPlease enter two words: Hello World\nYou entered: Hello and World\n```", "```go\nfunc main() {\n\treader := bufio.NewReader(os.Stdin)\n\tfmt.Print(\"Please enter many words: \")\n\tinput, err := reader.ReadString('\\n')\n\tif err != nil {\n\t\tfmt.Println(\"error with user input:\", err)\n\t} else {\n\t\tfmt.Println(\"You entered:\", input)\n\t}\n}\n```", "```go\n% go run scan.go\nPlease enter many words: Many words here and still more to go\nYou entered: Many words here and still more to go\n```", "```go\nstr := \"<b>Rock & Roll</b>\"\nescaped := html.EscapeString(str) // \"&lt;b&gt;Rock &amp; Roll&lt;/b&gt;\"\n```", "```go\nunescaped := html.UnescapeString(escaped) // \"<b>Rock & Roll</b>\"\n```", "```go\nvar quote string = `I loved her against reason, against promise,\nagainst peace, against hope, against happiness,\nagainst all discouragement that could be.`\n```", "```go\nre, err := regexp.Compile(`against [\\w]+`)\n```", "```go\nre.MatchString(quote) // true\n```", "```go\nstr := re.FindString(quote) // \"against reason\"\n```", "```go\nstrs := re.FindAllString(quote, -1)\nfmt.Println(strs)\n```", "```go\n[against reason against promise against peace against hope against happiness\nagainst all]\n```", "```go\nlocs := re.FindStringIndex(quote) // [12 26]\n```", "```go\nquote[locs[0]:locs[1]] // against reason\n```", "```go\nallLocs := re.FindAllStringIndex(quote, -1)\nfmt.Println(allLocs)\n```", "```go\n[[12 26] [28 43] [46 59] [61 73] [75 92] [95 106]]\n```", "```go\nreplaced := re.ReplaceAllString(quote, \"anything\")\nfmt.Println(replaced)\n```", "```go\nI loved her anything, anything,\nanything, anything, anything,\nanything discouragement that could be.\n```", "```go\nreplaced = re.ReplaceAllStringFunc(quote, strings.ToUpper)\nfmt.Println(replaced)\n```", "```go\nI loved her AGAINST REASON, AGAINST PROMISE,\nAGAINST PEACE, AGAINST HOPE, AGAINST HAPPINESS,\nAGAINST ALL discouragement that could be.\n```", "```go\nf := func(in string) string {\n\tsplit := strings.Split(in, \" \")\n\tsplit[1] = strings.ToUpper(split[1])\n\treturn strings.Join(split, \" \")\n}\nreplaced = re.ReplaceAllStringFunc(quote, f)\nfmt.Println(replaced)\n```", "```go\nI loved her against REASON, against PROMISE,\nagainst PEACE, against HOPE, against HAPPINESS,\nagainst ALL discouragement that could be.\n```"]