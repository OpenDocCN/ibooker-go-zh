["```go\ntype Reader interface {\n\tRead(p []byte) (n int, err error)\n}\n```", "```go\nbytes = make([]byte, 1024)\nreader.Read(bytes)\n```", "```go\nbytes, err := os.ReadAll(reader)\n```", "```go\nstr := “My String Data”\nreader := strings.NewReader(str)\n```", "```go\ntype Writer interface {\n\tWrite(p []byte) (n int, err error)\n}\n```", "```go\nbytes = []byte(\"Hello World\")\nwriter.Write(bytes)\n```", "```go\nvar buf bytes.Buffer\nfmt.Fprintf(&buf, \"Hello %s\", \"World\")\ns := buf.String() // s == \"Hello World\"\n```", "```go\nfunc myHandler(w http.ResponseWriter, r *http.Request) {\n    w.Write([]bytes(\"Hello World\"))\n}\n```", "```go\n// using a random 1MB test file\nvar url string = \"http://speedtest.ftp.otenet.gr/files/test1Mb.db\"\n\nfunc readWrite() {\n\tr, err := http.Get(url)\n\tif err != nil {\n\t\tlog.Println(\"Cannot get from URL\", err)\n\t}\n\tdefer r.Body.Close()\n\tdata, _ := os.ReadAll(r.Body)\n\tos.WriteFile(\"rw.data\", data, 0755)\n}\n```", "```go\npackage main\n\nimport \"testing\"\n\nfunc BenchmarkReadWrite(b *testing.B) {\n\treadWrite()\n}\n```", "```go\n$ go test -bench=. -benchmem\n```", "```go\ngoos: darwin\ngoarch: amd64\npkg: github.com/sausheong/go-cookbook/io/copy\ncpu: Intel(R) Core(TM) i7-7920HQ CPU @ 3.10GHz\nBenchmarkReadWrite-8   \t       1\t1998957055 ns/op\t 5892440 B/op\n219 allocs/op\nPASS\nok  \tgithub.com/sausheong/go-cookbook/io/copy\t2.327s\n```", "```go\nfunc copy() {\n\tr, err := http.Get(url)\n\tif err != nil {\n\t\tlog.Println(\"Cannot get from URL\", err)\n\t}\n\tdefer r.Body.Close()\n\tfile, _ := os.Create(\"copy.data\")\n\tdefer file.Close()\n\twriter := bufio.NewWriter(file)\n\tio.Copy(writer, r.Body)\n\twriter.Flush()\n}\n```", "```go\npackage main\n\nimport \"testing\"\n\nfunc BenchmarkReadWrite(b *testing.B) {\n\treadWrite()\n}\n\nfunc BenchmarkCopy(b *testing.B) {\n\tcopy()\n}\n```", "```go\ngoos: darwin\ngoarch: amd64\npkg: github.com/sausheong/go-cookbook/io/copy\ncpu: Intel(R) Core(TM) i7-7920HQ CPU @ 3.10GHz\nBenchmarkReadWrite-8   \t       1\t2543665782 ns/op\t 5895360 B/op\n227 allocs/op\nBenchmarkCopy-8        \t       1\t1426656774 ns/op\t   42592 B/op\n61 allocs/op\nPASS\nok  \tgithub.com/sausheong/go-cookbook/io/copy\t4.103s\n```", "```go\nhello world!\n```", "```go\ndata, err := os.ReadFile(\"data.txt\")\nif err != nil {\n  log.Println(\"Cannot read file:\", err)\n}\nfmt.Println(string(data))\n```", "```go\n// open the file\nfile, err := os.Open(\"data.txt\")\nif err != nil {\n  log.Println(\"Cannot open file:\", err)\n}\n// close the file when we are done with it\ndefer file.Close()\n```", "```go\n// get some info from the file\nstat, err := file.Stat()\nif err != nil {\n  log.Println(\"Cannot read file stats:\", err)\n}\n// create the byte array to store the read data\ndata := make([]byte, stat.Size())\n```", "```go\n// read the file\nbytes, err := file.Read(data)\nif err != nil {\n  log.Println(\"Cannot read file:\", err)\n}\nfmt.Printf(\"Read %d bytes from file\\n\", bytes)\nfmt.Println(string(data))\n```", "```go\nRead 13 bytes from file\nHello World!\n```", "```go\ndata := []byte(\"Hello World!\\n\")\n\nerr := os.WriteFile(\"data.txt\", data, 0644)\nif err != nil {\n  log.Println(\"Cannot write to file:\", err)\n}\n```", "```go\ndata := []byte(\"Hello World!\\n\")\n// write to file and read from file using the File struct\nfile, err := os.Create(\"data.txt\")\nif err != nil {\n  log.Println(\"Cannot create file:\", err)\n}\ndefer file.Close()\n```", "```go\nbytes, err := file.Write(data)\nif err != nil {\n  log.Println(\"Cannot write to file:\", err)\n}\nfmt.Printf(\"Wrote %d bytes to file\\n\", bytes)\n```", "```go\nfmt.Println(os.TempDir())\n```", "```go\n/var/folders/nj/2xd4ssp94zz41gnvsyvth38m0000gn/T/\n```", "```go\ntmpdir, err := os.MkdirTemp(os.TempDir(), \"mytmpdir_*\")\nif err != nil {\n\tlog.Println(\"Cannot create temp directory:\", err)\n}\ndefer os.RemoveAll(tmpdir)\n```", "```go\ntmpfile, err := os.CreateTemp(tmpdir, \"mytmp_*\")\nif err != nil {\n\tlog.Println(\"Cannot create temp file:\", err)\n}\n```", "```go\ndata := []byte(\"Some random stuff for the temporary file\")\n_, err = tmpfile.Write(data)\nif err != nil {\n\tlog.Println(\"Cannot write to temp file:\", err)\n}\nerr = tmpfile.Close()\nif err != nil {\n\tlog.Println(\"Cannot close temp file:\", err)\n}\n```", "```go\ndefer os.Remove(tmpfile.Name())\n```"]