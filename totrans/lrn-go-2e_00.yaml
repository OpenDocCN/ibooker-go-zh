- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: 'In the preface of the first edition, I wrote:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一版的前言中，我写道：
- en: My first choice for a book title was *Boring Go* because, properly written,
    Go is boring…​.
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我的第一个书名选择是*无聊的 Go*，因为，正确书写的话，Go 是无聊的……
- en: ''
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Boring does not mean trivial. Using Go correctly requires an understanding of
    how its features are intended to fit together. While you can write Go code that
    looks like Java or Python, you’re going to be unhappy with the result and wonder
    what all the fuss is about. That’s where this book comes in. It walks through
    the features of Go, explaining how to best use them to write idiomatic code that
    can grow.
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 无聊并不意味着琐碎。正确使用 Go 需要理解其特性如何预期地结合在一起。虽然你可以编写看起来像 Java 或 Python 的 Go 代码，但结果会让你感到不满，并想知道这些吵闹声是怎么回事。这本书就是为此而来。它逐步介绍
    Go 的特性，解释如何最好地使用它们编写可以增长的惯用代码。
- en: Go remains a small language with a small feature set. It still lacks inheritance,
    aspect-oriented programming, function overloading, operator overloading, pattern
    matching, named parameters, exceptions, and many additional features that complicate
    other languages. So why does a book on a boring language need an update?
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Go 仍然是一种功能集小而精的语言。它仍然缺少继承、面向方面的编程、函数重载、操作符重载、模式匹配、命名参数、异常等许多复杂化其他语言的特性。那么，为什么一本关于一种无聊语言的书需要更新呢？
- en: There are a few reasons for this edition. First, just as boring doesn’t mean
    *trivial*, it also does not mean *unchanging*. Over the past three years, new
    features, tools, and libraries have arrived. Improvements like structured logging,
    fuzzing, workspaces, and vulnerability checking help Go developers create reliable,
    lasting, maintainable code. Now that Go developers have several years of experience
    with generics, the standard library has started to include type constraints and
    generic functions to reduce repetitive code. Even the unsafe package has been
    updated to make it a little safer. Go developers need a resource that explains
    how to best use these new features.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个原因推动这个版本的出现。首先，无聊并不意味着*琐碎*，也不意味着*不变*。在过去的三年里，新的特性、工具和库已经出现。结构化日志记录、模糊测试、工作区和漏洞检查等改进有助于
    Go 开发人员创建可靠、持久、可维护的代码。现在，由于 Go 开发人员已经有了几年的泛型使用经验，标准库开始包含类型约束和泛型函数，以减少重复代码。甚至不安全的包也已更新，使其更加安全。Go
    开发人员需要一本资源，来解释如何最好地利用这些新特性。
- en: Secondly, some aspects of Go weren’t done justice by the first edition. The
    introductory chapter didn’t flow as well as I’d like. The rich Go tool ecosystem
    wasn’t explored. And first-edition readers asked for exercises and additional
    sample code. This edition attempts to address those limitations.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，第一版对某些 Go 方面并没有给予足够的重视。导论章节的流畅性不如我希望的那样。丰富的 Go 工具生态系统没有被深入探讨。第一版的读者要求增加练习和额外的示例代码。这个版本试图解决这些限制。
- en: Finally, the Go team has introduced something new, and, dare I say, *exciting*.
    There’s now a strategy that allows Go to keep the backward compatibility required
    for long-term software engineering projects while providing the ability to introduce
    backward-breaking changes to address long-standing design flaws. The new `for`
    loop variable scoping rules introduced in Go 1.22 are the first feature to take
    advantage of this approach.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Go 团队引入了一些新东西，而且，我敢说是*令人兴奋*的。现在有一种策略，使得 Go 能够保持长期软件工程项目所需的向后兼容性，同时提供引入向后兼容性变更来解决长期设计缺陷的能力。Go
    1.22 中引入的新的 `for` 循环变量作用域规则是第一个利用这种方法的特性。
- en: Go is still boring, it’s still fantastic, and it’s better than ever. I hope
    you enjoy this second edition.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Go 仍然无聊，它仍然很棒，而且比以往任何时候都要好。希望你喜欢这第二版。
- en: Who Should Read This Book
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谁应该阅读本书
- en: This book is targeted at developers who are looking to pick up a second (or
    fifth) language. The focus is on people who are new to Go. This ranges from those
    who don’t know anything about Go other than it has a cute mascot, to those who
    have already worked through a Go tutorial or even written some Go code. The focus
    for *Learning Go* isn’t just how to write programs in Go; it’s how to write Go
    *idiomatically*. More experienced Go developers can find advice on how to best
    use the newer features of the language. The most important thing is that the reader
    wants to learn how to write Go code that looks like Go.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本书面向希望学习第二门（或第五门）语言的开发者。重点是对 Go 完全陌生（仅知道它有一个可爱吉祥物）的人到已经完成 Go 教程甚至编写过一些 Go 代码的人。*学习
    Go* 的重点不仅仅是如何用 Go 编写程序；更重要的是如何习惯性地写出 Go 代码。更有经验的 Go 开发者可以找到如何最佳使用语言新特性的建议。最重要的是读者希望学习如何编写看起来像
    Go 的 Go 代码。
- en: Experience is assumed with the tools of the developer trade, such as version
    control (preferably Git) and IDEs. Readers should be familiar with basic computer
    science concepts like concurrency and abstraction, as the book explains how they
    work in Go. Some of the code examples are downloadable from GitHub, and dozens
    more can be tried out online on The Go Playground. While an internet connection
    isn’t required, it is helpful when reviewing executable examples. Since Go is
    often used to build and call HTTP servers, some examples assume familiarity with
    basic HTTP concepts.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者需要具备使用开发工具的经验，例如版本控制（首选 Git）和集成开发环境（IDE）。读者应熟悉基本的计算机科学概念，如并发性和抽象性，因为本书会解释它们在
    Go 语言中的工作原理。部分代码示例可从 GitHub 下载，还有数十个示例可以在线尝试，位于 The Go Playground。虽然不需要连接互联网，但在审阅可执行示例时会很有帮助。由于
    Go 通常用于构建和调用 HTTP 服务器，一些示例假定读者熟悉基本的 HTTP 概念。
- en: While most of Go’s features are found in other languages, Go makes different
    tradeoffs, so programs written in it have a different structure. *Learning Go*
    starts by looking at how to set up a Go development environment, and then covers
    variables, types, control structures, and functions. If you are tempted to skip
    over this material, resist the urge and take a look. It is often the details that
    make your Go code idiomatic. Some of what seems obvious at first glance might
    actually be subtly surprising when you think about it in depth.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Go 的大部分特性在其他语言中也存在，但 Go 进行了不同的权衡，因此用 Go 编写的程序具有不同的结构。*学习 Go* 从如何设置 Go 开发环境开始，然后涵盖变量、类型、控制结构和函数。如果你有跳过这些内容的冲动，请抑制住，仔细看看。往往细节决定了你的
    Go 代码是否符合习惯用法。一些乍一看显而易见的内容，仔细深思后可能会有微妙的惊喜。
- en: Conventions Used in This Book
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书使用的约定
- en: 'The following typographical conventions are used in this book:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用以下排版约定：
- en: '*Italic*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*斜体*'
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 指示新术语、URL、电子邮件地址、文件名和文件扩展名。
- en: '`Constant width`'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`等宽字体`'
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 用于程序清单，以及段落内引用程序元素，如变量或函数名、数据库、数据类型、环境变量、语句和关键字。
- en: '**`Constant width bold`**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**`等宽字体粗体`**'
- en: Shows commands or other text that should be typed literally by the user.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 显示用户应该按字面输入的命令或其他文本。
- en: '*`Constant width italic`*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*`等宽字体斜体`*'
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 显示应由用户提供的值或由上下文确定的值替换的文本。
- en: Tip
  id: totrans-24
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: This element signifies a tip or suggestion.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示提示或建议。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This element signifies a general note.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示一般注意事项。
- en: Warning
  id: totrans-28
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: This element indicates a warning or caution.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示警告或注意事项。
- en: Using Code Examples
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用代码示例
- en: Supplemental material (code examples, exercises, etc.) is available for download
    at [*https://github.com/learning-go-book-2e*](https://github.com/learning-go-book-2e).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 补充材料（例如代码示例、练习等）可从 [*https://github.com/learning-go-book-2e*](https://github.com/learning-go-book-2e)
    下载。
- en: If you have a technical question or a problem using the code examples, please
    send email to [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有技术问题或在使用代码示例时遇到问题，请发送电子邮件至 [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com)。
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing examples
    from O’Reilly books does require permission. Answering a question by citing this
    book and quoting example code does not require permission. Incorporating a significant
    amount of example code from this book into your product’s documentation does require
    permission.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在帮助您完成工作。一般情况下，如果本书提供示例代码，您可以在程序和文档中使用它。除非您复制了大量代码片段，否则不需要联系我们寻求许可。例如，编写使用本书多个代码片段的程序不需要许可。出售或分发奥莱利图书中的示例代码需要许可。引用本书并引用示例代码来回答问题不需要许可。将本书中大量示例代码合并到您产品的文档中需要许可。
- en: 'We appreciate, but do not require, attribution. An attribution usually includes
    the title, author, publisher, and ISBN. For example: “*Learning Go* by Jon Bodner
    (O’Reilly). Copyright 2024 Jon Bodner, 978-1-098-13929-2.”'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感谢但不要求署名。署名通常包括标题、作者、出版商和ISBN。例如：“*Learning Go* by Jon Bodner (O’Reilly).
    Copyright 2024 Jon Bodner, 978-1-098-13929-2.”
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*permissions@oreilly.com*](mailto:permissions@oreilly.com).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您认为使用代码示例超出了合理使用范围或以上所给的许可，请随时联系我们：[*permissions@oreilly.com*](mailto:permissions@oreilly.com)。
- en: O’Reilly Online Learning
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 奥莱利在线学习
- en: Note
  id: totrans-37
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: For more than 40 years, [*O’Reilly Media*](http://oreilly.com) has provided
    technology and business training, knowledge, and insight to help companies succeed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 超过40年来，[*奥莱利传媒*](http://oreilly.com)提供技术和商业培训、知识和见解，帮助公司取得成功。
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, and our online learning platform. O’Reilly’s online learning
    platform gives you on-demand access to live training courses, in-depth learning
    paths, interactive coding environments, and a vast collection of text and video
    from O’Reilly and 200+ other publishers. For more information, visit [*http://oreilly.com*](http://oreilly.com).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们独特的专家和创新者网络通过书籍、文章以及我们的在线学习平台分享他们的知识和专长。奥莱利的在线学习平台为您提供即时访问的现场培训课程、深度学习路径、互动编码环境以及来自奥莱利和其他200多个出版商的广泛文本和视频资源。欲了解更多信息，请访问[*http://oreilly.com*](http://oreilly.com)。
- en: How to Contact Us
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何联系我们
- en: 'Please address comments and questions concerning this book to the publisher:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请将有关本书的评论和问题发送至出版商：
- en: O’Reilly Media, Inc.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 奥莱利传媒有限公司
- en: 1005 Gravenstein Highway North
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1005 Gravenstein Highway North
- en: Sebastopol, CA 95472
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sebastopol, CA 95472
- en: 800-889-8969 (in the United States or Canada)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 800-889-8969（美国或加拿大）
- en: 707-827-7019 (international or local)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-827-7019（国际或本地）
- en: 707-829-0104 (fax)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0104（传真）
- en: '[*support@oreilly.com*](mailto:support@oreilly.com)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*support@oreilly.com*](mailto:support@oreilly.com)'
- en: '[*https://www.oreilly.com/about/contact.html*](https://www.oreilly.com/about/contact.html)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*https://www.oreilly.com/about/contact.html*](https://www.oreilly.com/about/contact.html)'
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://oreil.ly/learning-go-2ed*](https://oreil.ly/learning-go-2ed).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为本书设有网页，列出勘误表、示例和任何额外信息。您可以访问[*https://oreil.ly/learning-go-2ed*](https://oreil.ly/learning-go-2ed)。
- en: For news and information about our books and courses, visit [*https://oreilly.com*](https://oreilly.com).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 欲获取有关我们的图书和课程的新闻和信息，请访问[*https://oreilly.com*](https://oreilly.com)。
- en: 'Find us on LinkedIn: [*https://linkedin.com/company/oreilly-media*](https://linkedin.com/company/oreilly-media)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在LinkedIn上找到我们：[*https://linkedin.com/company/oreilly-media*](https://linkedin.com/company/oreilly-media)
- en: 'Follow us on Twitter: [*https://twitter.com/oreillymedia*](https://twitter.com/oreillymedia)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在Twitter上关注我们：[*https://twitter.com/oreillymedia*](https://twitter.com/oreillymedia)
- en: 'Watch us on YouTube: [*https://youtube.com/oreillymedia*](https://youtube.com/oreillymedia)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在YouTube上观看我们：[*https://youtube.com/oreillymedia*](https://youtube.com/oreillymedia)
- en: Acknowledgments for the 2nd Edition
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二版致谢
- en: I’ve been humbled and flattered by the response to the first edition of *Learning
    Go*. It was started in late 2019, completed in late 2020, and released in early
    2021\. It was, unintentionally, my own pandemic project. Some people baked bread;
    I explained pointers.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对第一版《学习 Go 语言》的反应让我感到受宠若惊。它始于 2019 年末，完成于 2020 年末，并于 2021 年初发布。无意中成为了我的疫情项目。有些人烤面包；我解释指针。
- en: 'After I finished, people asked me what my next book would be. I told them that
    I was going to take a well-deserved break and then get to work on a romance novel.
    But before I could start writing about pirates and princesses, something amazing
    happened: *Learning Go* was a huge success. It spent the better part of a year
    as one of the five most popular books on O’Reilly Learning. As sales continued,
    I saw things in the first edition that I wanted to fix and received letters from
    readers pointing out errors and omissions. Some were fixed as errata in later
    printings, but I contacted O’Reilly to see if they would like a new edition, and
    they were interested.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，有人问我下一本书会是什么。我告诉他们，我打算好好休息一下，然后开始写一本浪漫小说。但在我开始写有关海盗和公主的内容之前，一件惊人的事情发生了：《学习
    Go 语言》取得了巨大成功。它在 O’Reilly Learning 上有将近一年时间位列最受欢迎的五本书之一。随着销量的增长，我发现第一版中的一些需要修正的地方，并收到读者指出错误和遗漏的来信。有些错误在后来的印刷中作为勘误进行了修正，但我联系了
    O’Reilly，询问他们是否希望推出新版，他们表示有兴趣。
- en: Returning to *Learning Go* and O’Reilly for the second edition was a pleasant
    experience. Rita Fernando provided guidance, feedback, and editing. This edition
    has been made immeasurably better by feedback from Jonathan Amsterdam, Leam Hall,
    Katie Hockman, Thomas Hunter, Max Horstmann, and Natalie Pistunovich. Chris Hines
    did an incredibly thorough job finding my mistakes and suggesting better examples.
    The comments and feedback from Abby Deng and the members of the Go Book Club at
    Datadog allowed me to makes changes based on feedback from developers new to Go.
    The (hopefully few) remaining errors are all mine.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 回到 O’Reilly 出版第二版《学习 Go 语言》是一次愉快的经历。Rita Fernando 提供了指导、反馈和编辑。Jonathan Amsterdam、Leam
    Hall、Katie Hockman、Thomas Hunter、Max Horstmann 和 Natalie Pistunovich 的反馈使这版书变得更加完美。Chris
    Hines 在找出我的错误并提出更好的例子方面做得非常彻底。Abby Deng 和 Datadog 的 Go 书籍俱乐部成员的评论和反馈使我能够根据新手开发者的反馈进行改进。剩下的（希望很少）错误全都是我的责任。
- en: My wife and children were kind enough to not mind me skipping out on family
    movie nights while I figured out the best way to describe new Go features.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我的妻子和孩子们很体贴，不介意我在家庭电影之夜中缺席，而是专心研究描述新 Go 特性的最佳方式。
- en: I also want to thank the readers of the first edition who reached out to me
    with their kind words. I thank you all for your support and encouragement.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我还要感谢第一版的读者，他们用他们的善意话语联系了我。感谢大家的支持和鼓励。
- en: Acknowledgments for the 1st Edition
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一版致谢
- en: Writing a book seems like a solitary task, but it doesn’t happen without the
    help of a great number of people. I mentioned to Carmen Andoh that I wanted to
    write a book on Go and at GopherCon 2019, and she introduced me to Zan McQuade
    at O’Reilly. Zan guided me through the acquisition process and continued to provide
    me advice while I was writing *Learning Go*. Michele Cronin edited the text, gave
    feedback, and listened during the inevitable rough patches. Tonya Trybula’s copyediting
    and Beth Kelly’s production editing made my draft production-quality.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 写书看起来是一项孤独的任务，但没有众多人的帮助是无法完成的。我告诉 Carmen Andoh 我想写一本关于 Go 的书，在 2019 年的 GopherCon
    上，她介绍我认识了 O’Reilly 的 Zan McQuade。Zan 指导我完成了这本书的收购过程，并在我写作《学习 Go 语言》期间继续给予我建议。Michele
    Cronin 编辑了文本，提供了反馈，并在不可避免的困难时期倾听。Tonya Trybula 的文字编辑和 Beth Kelly 的制作编辑使我的草稿具备了出版品质。
- en: While writing, I received critical feedback (and encouragement) from many people
    including Jonathan Altman, Jonathan Amsterdam, Johnny Ray Austin, Chris Fauerbach,
    Chris Hines, Bill Kennedy, Tony Nelson, Phil Pearl, Liz Rice, Aaron Schlesinger,
    Chris Stout, Kapil Thangavelu, Claire Trivisonno, Volker Uhrig, Jeff Wendling,
    and Kris Zaragoza. I’d especially like to recognize Rob Liebowitz, whose detailed
    notes and rapid responses made this book far better than it would have been without
    his efforts.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 写作过程中，我收到了许多人的关键反馈（和鼓励），包括 Jonathan Altman、Jonathan Amsterdam、Johnny Ray Austin、Chris
    Fauerbach、Chris Hines、Bill Kennedy、Tony Nelson、Phil Pearl、Liz Rice、Aaron Schlesinger、Chris
    Stout、Kapil Thangavelu、Claire Trivisonno、Volker Uhrig、Jeff Wendling 和 Kris Zaragoza。我特别要感谢
    Rob Liebowitz，他详细的笔记和迅速的反馈使这本书比没有他的努力要好得多。
- en: My family put up with me spending nights and weekends at the computer instead
    of with them. In particular, my wife, Laura, graciously pretended that I didn’t
    wake her up when I’d come to bed at 1 A.M. or later.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我的家人包容了我在电脑前度过的夜晚和周末，而不是和他们在一起。特别是我的妻子，劳拉，慷慨地假装我凌晨1点或更晚回到床上时没有吵醒她。
- en: Finally, I want to remember the two people who started me on this path four
    decades ago. The first is Paul Goldstein, the father of a childhood friend. In
    1982, Paul showed us a Commodore PET, typed PRINT 2 + 2, and hit the Enter key.
    I was amazed when the screen said 4 and was instantly hooked. He later taught
    me how to program and even let me borrow the PET for a few weeks. Second, I’d
    like to thank my mother for encouraging my interest in programming and computers,
    despite having no idea what any of it was for. She bought me the BASIC programming
    cartridge for the Atari 2600, a VIC-20, and then a Commodore 64, along with the
    programming books that inspired me to want to write my own someday.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我想要纪念那两个四十年前开启我这条道路的人。第一个是保罗·戈尔德斯坦，童年朋友的父亲。1982年，保罗给我们展示了一台康梅多PET，输入了PRINT
    2 + 2，并按下了回车键。屏幕显示4时，我感到非常惊讶，从那刻起我便迷上了计算机。后来，他教会了我如何编程，甚至让我借用了PET几周。其次，我要感谢我的母亲，她鼓励我对编程和计算机的兴趣，尽管她完全不知道这一切的意义所在。她为我买了Atari
    2600的BASIC编程插件，还有VIC-20和康梅多64，并购买了启发我想要写自己程序的书籍。
- en: Thank you all for helping make this dream of mine come true.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢大家帮助我实现这个梦想。
