["```go\nfunc guess(number uint) (answer bool, err error) {\n    if number > 99 {\n        err = errors.New(\"Number is larger than 100\")\n    }\n    // check if guess is correct\n    return\n}\n```", "```go\nerr = errors.New(\"Number is larger than 100\")\n```", "```go\nerr = fmt.Errorf(\"Number is larger than 100\")\n```", "```go\nstr := \"123456789\"\nnum, err := strconv.ParseInt(str, 10, 64)\nif err != nil {\n    panic(err)\n}\n```", "```go\nnum, _ := strconv.ParseInt(str, 10, 64)\n```", "```go\nfunc unmarshal() (person Person) {\n\tr, err := http.Get(\"https://swapi.dev/api/people/1\")\n\tif err != nil {\n\t\t// handle error\n\t}\n\tdefer r.Body.Close()\n\n\tdata, err := io.ReadAll(r.Body)\n\tif err != nil {\n\t\t// handle error\n\t}\n\n\terr = json.Unmarshal(data, &person)\n\tif err != nil {\n\t\t// handle error\n\t}\n\treturn\n}\n```", "```go\nfunc helperUnmarshal() (person Person) {\n\tr, err := http.Get(\"https://swapi.dev/api/people/1\")\n\tcheck(err, \"Calling SW people API\")\n\tdefer r.Body.Close()\n\n\tdata, err := io.ReadAll(r.Body)\n\tcheck(err, \"Read JSON from response\")\n\n\terr = json.Unmarshal(data, &person)\n\tcheck(err, \"Unmarshalling\")\n\treturn\n}\n\nfunc check(err error, msg string) {\n\tif err != nil {\n\t\tlog.Println(\"Error encountered:\", msg)\n        // do common error handling stuff\n\t}\n}\n```", "```go\nfunc must(param interface{}, err error) interface{} {\n\tif err != nil {\n\t\t// handle errors\n\t}\n\treturn param\n}\n```", "```go\nfunc mustUnmarshal() (person Person) {\n\tr := must(http.Get(\"https://swapi.dev/api/people/1\")).(*http.Response)\n\tdefer r.Body.Close()\n\tdata := must(io.ReadAll(r.Body)).([]byte)\n\tmust(nil, json.Unmarshal(data, &person))\n\treturn\n}\n```", "```go\nerr := errors.New(\"Syntax error in the code\")\n```", "```go\nerr := fmt.Errorf(\"Syntax error in the code at line %d\", line)\n```", "```go\ntype error interface {\n    Error() string\n}\n```", "```go\ntype CommsError struct{}\n\nfunc (m CommsError) Error() string {\n\treturn \"An error happened during data transfer\"\n}\n```", "```go\ntype SyntaxError struct {\n\tLine int\n\tCol  int\n}\n\nfunc (err *SyntaxError) Error() string {\n\treturn fmt.Sprintf(\"Error at line %d, column %d\", err.Line, err.Col)\n}\n```", "```go\nif err != nil {\n\terr, ok := err.(*SyntaxError)\n\tif ok {\n\t\t// do something with the error\n\t} else {\n\t\t// do something else\n\t}\n}\n```", "```go\nerr1 := errors.New(\"Oops something happened.\")\nerr2 := fmt.Errorf(\"An error was encountered - %w\", err1)\n```", "```go\nerr := errors.Unwrap(err2)\n```", "```go\ntype ConnectionError struct {\n\tHost string\n\tPort int\n\tErr  error\n}\n\nfunc (err *ConnectionError) Error() string {\n\treturn fmt.Sprintf(\"Error connecting to %s at port %d\", err.Host, err.Port)\n}\n```", "```go\nfunc (err *ConnectionError) Unwrap() error {\n\treturn err.Err\n}\n```", "```go\nvar ApiErr error = errors.New(\"Error trying to get data from API\")\n```", "```go\nfunc connectAPI() error {\n\t// some other stuff happening here\n\treturn ApiErr\n}\n```", "```go\nerr := connectAPI()\nif err != nil {\n\tif errors.Is(err, ApiErr) {\n\t\t// handle the API error\n\t}\n}\n```", "```go\nfunc connect() error {\n\treturn &ConnectionError{\n\t\tHost: \"localhost\",\n\t\tPort: 8080,\n\t\tErr:  ApiErr,\n\t}\n}\n```", "```go\nerr := connect()\nif err != nil {\n\tif errors.Is(err, ApiErr) {\n\t\t// handle the API error\n\t}\n}\n```", "```go\nerr := connect()\nif err != nil {\n\tvar connErr *ConnectionError\n\tif errors.As(err, &connErr) {\n\t\tlog.Errorf(\"Cannot connect to host %s at port %d\", connErr.Host, connErr.Port)\n\t}\n}\n```", "```go\npackage main\n\nimport \"fmt\"\n\nfunc A() {\n\tdefer fmt.Println(\"defer on A\")\n\tfmt.Println(\"A\")\n\tB()\n\tfmt.Println(\"end of A\")\n}\n\nfunc B() {\n\tdefer fmt.Println(\"defer on B\")\n\tfmt.Println(\"B\")\n\tC()\n\tfmt.Println(\"end of B\")\n}\n\nfunc C() {\n\tdefer fmt.Println(\"defer on C\")\n\tfmt.Println(\"C\")\n\tfmt.Println(\"end of C\")\n}\n\nfunc main() {\n\tdefer fmt.Println(\"defer on main\")\n\tfmt.Println(\"main\")\n\tA()\n\tfmt.Println(\"end of main\")\n}\n```", "```go\n% go run main.go\nmain\nA\nB\nC\nend of C\ndefer on C\nend of B\ndefer on B\nend of A\ndefer on A\nend of main\ndefer on main\n```", "```go\nfunc C() {\n\tdefer fmt.Println(\"defer on C\")\n\tfmt.Println(\"C\")\n\tpanic(\"panic called in C\")\n\tfmt.Println(\"end of C\")\n}\n```", "```go\n% go run main.go\nmain\nA\nB\nC\ndefer on C\ndefer on B\ndefer on A\ndefer on main\npanic: panic called in C\n```", "```go\npackage main\n\nimport \"fmt\"\n\nfunc A() {\n\tdefer fmt.Println(\"defer on A\")\n\tfmt.Println(\"A\")\n\tB()\n\tfmt.Println(\"end of A\")\n}\n\nfunc B() {\n\tdefer dontPanic()\n\tfmt.Println(\"B\")\n\tC()\n\tfmt.Println(\"end of B\")\n}\n\nfunc C() {\n\tdefer fmt.Println(\"defer on C\")\n\tfmt.Println(\"C\")\n\tfmt.Println(\"end of C\")\n}\n\nfunc main() {\n\tdefer fmt.Println(\"defer on main\")\n\tfmt.Println(\"main\")\n\tA()\n\tfmt.Println(\"end of main\")\n}\n\nfunc dontPanic() {\n\terr := recover()\n\tif err != nil {\n\t\tfmt.Println(\"panic called but everything's ok now:\", err)\n\t} else {\n\t\tfmt.Println(\"defer on B\")\n\t}\n}\n```", "```go\n% go run main.go\nmain\nA\nB\nC\nend of C\ndefer on C\nend of B\ndefer on B\nend of A\ndefer on A\nend of main\ndefer on main\n```", "```go\nfunc C() {\n\tdefer fmt.Println(\"defer on C\")\n\tfmt.Println(\"C\")\n\tpanic(\"panic called in C\")\n\tfmt.Println(\"end of C\")\n}\n```", "```go\n% go run main.go\nmain\nA\nB\nC\ndefer on C\npanic called but everything's ok now: panic called in C\nend of A\ndefer on A\nend of main\ndefer on main\n```", "```go\nch := make(chan os.Signal)\nsignal.Notify(ch, os.Interrupt)\n\ngo func() {\n\t<-ch\n\t// clean up before graceful exit\n\tos.Exit(0)\n}()\n```"]