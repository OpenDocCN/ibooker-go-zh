- en: Chapter 1\. What Is a “Cloud Native” Application?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 什么是“云原生”应用程序？
- en: The most dangerous phrase in the language is, “We’ve always done it this way.”^([1](ch01.xhtml#idm45983644896536))
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 语言中最危险的短语是：“我们一直都是这样做的。”^([1](ch01.xhtml#idm45983644896536))
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Grace Hopper, Computerworld (January 1976)
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 格雷斯·霍普，《计算机世界》（1976年1月）
- en: 'If you’re reading this book, then you’ve no doubt at least heard the term *cloud
    native* before. More likely, you’ve probably seen some of the many, many articles
    written by vendors bubbling over with breathless adoration and dollar signs in
    their eyes. If this is the bulk of your experience with the term so far, then
    you can be forgiven for thinking the term to be ambiguous and buzzwordy, just
    another of a series of markety expressions that might have started as something
    useful but have since been taken over by people trying to sell you something.
    See also: Agile, DevOps.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在阅读这本书，那么毫无疑问你至少听过*云原生*这个术语。更有可能的是，你可能已经看过一些由供应商撰写的充满兴奋和目光中有美元符号的无数文章。如果这是你迄今对该术语的主要经历，那么你可能会原谅认为这个术语是模糊和炒作的，只是另一个可能起源于有用内容但后来被试图向你销售某些东西的人接管的市场表达。参见：敏捷开发，DevOps。
- en: For similar reasons, a web search for “cloud native definition” might lead you
    to think that all an application needs to be cloud native is to be written in
    the “right” language^([2](ch01.xhtml#idm45983644890840)) or framework, or to use
    the “right” technology. Certainly, your choice of language can make your life
    significantly easier or harder, but it’s neither necessary nor sufficient for
    making an application cloud native.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 基于类似的原因，搜索“云原生定义”的网络搜索可能会让你认为使一个应用程序成为云原生只需要使用“正确”的语言^([2](ch01.xhtml#idm45983644890840))或框架，或者使用“正确”的技术。当然，你选择的语言可以显著地简化或加大你的生活，但这既不是必要条件也不是充分条件来使一个应用程序成为云原生。
- en: Is cloud native, then, just a matter of *where* an application runs? The term
    *cloud native* certainly suggests that. All you’d need to do is pour your kludgy^([3](ch01.xhtml#idm45983645042344))
    old application into a container and run it in Kubernetes, and you’re cloud native
    now, right? Nope. All you’ve done is make your application harder to deploy and
    harder to manage.^([4](ch01.xhtml#idm45983645041352)) A kludgy application in
    Kubernetes is still kludgy.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，云原生仅仅是应用程序运行的*地点*问题吗？术语*云原生*确实暗示了这一点。你只需将你那些笨拙的^([3](ch01.xhtml#idm45983645042344))老应用程序装入容器，并在Kubernetes中运行，现在你就是云原生了，对吗？不对。你所做的只是让你的应用程序更难部署，更难管理。^([4](ch01.xhtml#idm45983645041352))
    在Kubernetes中的笨拙应用程序依然是笨拙的。
- en: So, what *is* a cloud native application? In this chapter, we’ll answer exactly
    that. First, we’ll examine the history of computing service paradigms up to (and
    especially) the present, and discuss how the relentless pressure to scale drove
    (and continues to drive) the development and adoption of technologies that provide
    high levels of dependability at often vast scales. Finally, we’ll identify the
    specific attributes associated with such an application.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，*什么*是云原生应用程序？在本章中，我们将确切地回答这个问题。首先，我们将审视计算服务范式的历史，特别是到目前为止，并讨论规模扩展的无情压力如何推动（并继续推动）提供高可靠性的技术的发展和采纳。最后，我们将确定与这类应用程序相关联的具体特征。
- en: The Story So Far
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迄今为止的故事
- en: The story of networked applications is the story of the pressure to scale.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用程序的故事就是规模扩展的故事。
- en: The late 1950s saw the introduction of the mainframe computer. At the time,
    every program and piece of data was stored in a single giant machine that users
    could access by means of dumb terminals with no computational ability of their
    own. All the logic and all the data all lived together as one big happy monolith.
    It was a simpler time.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 20世纪50年代后期引入了大型机计算机。当时，每个程序和数据片段都存储在一台巨大的机器中，用户通过自身没有计算能力的哑终端访问。所有的逻辑和数据都聚集在一起，形成一个庞大而简单的单体。那时候是一个更简单的时代。
- en: Everything changed in the 1980s with the arrival of inexpensive network-connected
    PCs. Unlike dumb terminals, PCs were able to do some computation of their own,
    making it possible to offload some of an application’s logic onto them. This new
    multitiered architecture—which separated presentation logic, business logic, and
    data ([Figure 1-1](#img_ch01_3_tiered_architecture))—made it possible, for the
    first time, for the components of a networked application to be modified or replaced
    independent of the others.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 1980年代随着廉价的网络连接PC的到来，一切都发生了变化。与哑终端不同，PC能够进行一些计算，使得可以将一些应用程序逻辑卸载到它们身上。这种新的多层架构——将表示逻辑、业务逻辑和数据分开（[图1-1](#img_ch01_3_tiered_architecture)）——首次使得网络应用程序的各个组件可以独立修改或替换。
- en: '![cngo 0101](Images/cngo_0101.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![cngo 0101](Images/cngo_0101.png)'
- en: Figure 1-1\. A traditional three-tiered architecture, with clearly defined presentation,
    business logic, and data components
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-1\. 传统的三层架构，明确定义了表示层、业务逻辑层和数据层组件
- en: In the 1990s, the popularization of the World Wide Web and the subsequent “dot-com”
    gold rush introduced the world to software as a service (SaaS). Entire industries
    were built on the SaaS model, driving the development of more complex and resource-hungry
    applications, which were in turn harder to develop, maintain, and deploy. Suddenly
    the classic multitiered architecture wasn’t enough anymore. In response, business
    logic started to get decomposed into subcomponents that could be developed, maintained,
    and deployed independently, ushering in the age of microservices.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在1990年代，全球网络的普及和随后的“点com”黄金热潮向世界展示了软件即服务（SaaS）。整个行业建立在SaaS模型之上，推动了更复杂、资源需求更大的应用程序的发展，这些应用程序开发、维护和部署难度也因此增加。突然之间，经典的多层架构已经不再足够。作为回应，业务逻辑开始分解成可以独立开发、维护和部署的子组件，引领微服务时代的来临。
- en: In 2006, Amazon launched Amazon Web Services (AWS), which included the Elastic
    Compute Cloud (EC2) service. Although AWS wasn’t the *first* infrastructure as
    a service (IaaS) offering, it revolutionized the on-demand availability of data
    storage and computing resources, bringing Cloud Computing—and the ability to quickly
    scale—to the masses, catalyzing a massive migration of resources into “the cloud.”
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 2006年，亚马逊推出了亚马逊网络服务（AWS），其中包括弹性计算云（EC2）服务。尽管AWS并不是第一个基础设施即服务（IaaS）提供商，但它彻底改变了数据存储和计算资源的按需可用性，将云计算——以及快速扩展的能力——带给了大众，催生了大规模资源向“云端”的迁移。
- en: Unfortunately, organizations soon learned that life at scale isn’t easy. Bad
    things happen, and when you’re working with hundreds or thousands of resources
    (or more!), bad things happen *a lot*. Traffic will wildly spike up or down, essential
    hardware will fail, upstream dependencies will become suddenly and inexplicably
    inaccessible. Even if nothing goes wrong for a while, you still have to deploy
    and manage all of these resources. At this scale, it’s impossible (or at least
    wildly impractical) for humans to keep up with all of these issues manually.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，组织很快就意识到在大规模运行中生活并不容易。糟糕的事情屡屡发生，当你处理数百甚至数千个资源时，糟糕的事情会频频发生。流量会急剧上升或下降，重要的硬件会故障，上游依赖突然变得不可预测且无法访问。即使一段时间内没有发生问题，你仍然需要部署和管理所有这些资源。在这种规模下，人类手动跟上所有这些问题是不可能的（或者至少是极其不切实际的）。
- en: What Is Cloud Native?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是云原生？
- en: Fundamentally, a truly cloud native application incorporates everything we’ve
    learned about running networked applications at scale over the past 60 years.
    They are scalable in the face of wildly changing load, resilient in the face of
    environmental uncertainty, and manageable in the face of ever-changing requirements.
    In other words, a cloud native application is built for life in a cruel, uncertain
    universe.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从根本上讲，一个真正的云原生应用程序融合了我们在过去60年中运行大规模网络应用程序所学到的一切。它们在面对急剧变化的负载时具备可伸缩性，在环境不确定性面前表现坚韧，并且在面对不断变化的需求时易于管理。换句话说，云原生应用程序是为了在残酷而不确定的宇宙中生存而构建的。
- en: 'But how do we *define* the term *cloud native*? Fortunately for all of us,^([5](ch01.xhtml#idm45983644915864))
    we don’t have to. The [Cloud Native Computing Foundation](https://oreil.ly/621yd)—a
    subfoundation of the renowned Linux Foundation, and something of an acknowledged
    authority on the subject—has already done it for us:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们如何*定义*“云原生”这个术语呢？幸运的是，我们大家不必自己定义。[云原生计算基金会](https://oreil.ly/621yd)——著名Linux基金会的一个分支机构，也是该领域的权威——已经为我们做好了这项工作。
- en: Cloud native technologies empower organizations to build and run scalable applications
    in modern, dynamic environments such as public, private, and hybrid clouds….
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 云原生技术使组织能够在现代、动态的环境中（如公共、私有和混合云中）构建和运行可扩展的应用程序……
- en: ''
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: These techniques enable loosely coupled systems that are resilient, manageable,
    and observable. Combined with robust automation, they allow engineers to make
    high-impact changes frequently and predictably with minimal toil.^([6](ch01.xhtml#idm45983644912856))
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这些技术使得系统松耦合、具有弹性、易管理且可观测。结合强大的自动化，工程师可以频繁且可预测地进行高影响变更，而减少不必要的劳动。^([6](ch01.xhtml#idm45983644912856))
- en: ''
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Cloud Native Computing Foundation, CNCF Cloud Native Definition v1.0
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 云原生计算基金会，CNCF 云原生定义 v1.0
- en: By this definition, cloud native applications are more than just applications
    that happen to live in a cloud. They’re also *scalable*, *loosely coupled*, *resilient*,
    *manageable*, and *observable*. Taken together, these “cloud native attributes”
    can be said to constitute the foundation of what it means for a system to be cloud
    native.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 根据此定义，云原生应用不仅仅是在云中运行的应用程序。它们还是*可扩展*、*松耦合*、*具有弹性*、*易管理*和*可观测*的。这些“云原生特性”共同构成了系统成为云原生的基础。
- en: As it turns out, each of those words has a pretty specific meaning of its own,
    so let’s take a look.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，这些词各自具有相当具体的含义，让我们来看看。
- en: Scalability
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可扩展性
- en: In the context of cloud computing, *scalability* can be defined as the ability
    of a system to continue to behave as expected in the face of significant upward
    or downward changes in demand. A system can be considered to be scalable if it
    doesn’t need to be refactored to perform its intended function during or after
    a steep increase in demand.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在云计算背景下，*可扩展性*可以定义为系统在面对需求显著上升或下降时继续按预期行为的能力。如果一个系统在需求急剧增加期间或之后无需重构即可执行其预期功能，则可以认为该系统具有可扩展性。
- en: Because unscalable services can seem to function perfectly well under initial
    conditions, scalability isn’t always a primary consideration during service design.
    While this might be fine in the short term, services that aren’t capable of growing
    much beyond their original expectations also have a limited lifetime value. What’s
    more, it’s often fiendishly difficult to refactor a service for scalability, so
    building with it in mind can save both time and money in the long run.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因为不可扩展的服务在初始条件下似乎可以完美运行，所以可扩展性并非在服务设计期间总是主要考虑因素。虽然这在短期内可能没问题，但那些无法远超其原始预期的服务也有其生命周期的限制价值。此外，对于可扩展性进行重构通常非常困难，因此考虑到可扩展性可以在长远节省时间和金钱。
- en: 'There are two different ways that a service can be scaled, each with its own
    associated pros and cons:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 服务可以按两种不同方式进行扩展，每种方式都有其自身的优缺点：
- en: Vertical scaling
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直扩展
- en: A system can be *vertically scaled* (or *scaled up*) by upsizing (or downsizing)
    the hardware resources that are already allocated to it. For example, by adding
    memory or CPU to a database that’s running on a dedicated computing instance.
    Vertical scaling has the benefit of being technically relatively straightforward,
    but any given instance can only be upsized so much.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一个系统可以通过调整已分配给它的硬件资源来进行*垂直扩展*（或*升级*）。例如，通过向运行在专用计算实例上的数据库添加内存或CPU。垂直扩展的好处在于技术上相对直接，但任何给定实例只能升级到一定程度。
- en: Horizontal scaling
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 水平扩展
- en: A system can be *horizontally scaled* (or *scaled out*) by adding (or removing)
    service instances. For example, this can be done by increasing the number of service
    nodes behind a load balancer or containers in Kubernetes, or another container
    orchestration system. This strategy has a number of advantages, including redundancy
    and freedom from the limits of available instance sizes. However, more replicas
    mean greater design and management complexity, and not all services can be horizontally
    scaled.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一个系统可以通过增加（或减少）服务实例来进行*水平扩展*（或*扩展外部*）。例如，通过增加负载均衡器后面的服务节点或 Kubernetes 中的容器数量，或其他容器编排系统中的容器。这种策略具有许多优点，包括冗余性和摆脱可用实例尺寸的限制。但更多的副本意味着更大的设计和管理复杂性，并非所有服务都可以进行水平扩展。
- en: Given that there are two ways of scaling a service—up or out—does that mean
    that any service whose hardware can be upscaled (and is capable of taking advantage
    of increased hardware resources) is “scalable”? If you want to split hairs, then
    sure, to a point. But how scalable is it? Vertical scaling is inherently limited
    by the size of available computing resources, so a service that can only be scaled
    up isn’t very scalable at all. If you want to be able to scale by ten times, or
    a hundred, or a thousand, your service really has to be horizontally scalable.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有两种服务扩展方式——**纵向扩展**和**横向扩展**——这是否意味着任何可以进行硬件纵向扩展（并能够利用增加的硬件资源）的服务都是“可扩展”的？如果你想挑毛病，那当然，到一定程度是的。但它有多可扩展呢？纵向扩展在本质上受限于可用计算资源的大小，因此仅能进行纵向扩展的服务根本就不太可扩展。如果你想要实现十倍、百倍或千倍的扩展，你的服务真的必须是横向可扩展的。
- en: 'So what’s the difference between a service that’s horizontally scalable and
    one that’s not? It all boils down to one thing: state. A service that doesn’t
    maintain any application state—or which has been very carefully designed to distribute
    its state between service replicas—will be relatively straightforward to scale
    out. For any other application, it will be hard. It’s that simple.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，横向可扩展的服务与不可扩展的服务有什么区别呢？归根结底只有一点：状态。一个不维护任何应用状态的服务——或者已经非常谨慎地设计了将其状态分布在服务副本之间的服务——将相对容易进行横向扩展。对于任何其他应用程序来说，这将是困难的。就是这么简单。
- en: The concepts of scalability, state, and redundancy will be discussed in much
    more depth in [Chapter 7](ch07.xhtml#chapter_7).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性、状态和冗余的概念将在[第7章](ch07.xhtml#chapter_7)中更详细地讨论。
- en: Loose Coupling
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 松散耦合
- en: '*Loose coupling* is a system property and design strategy in which a system’s
    components have minimal knowledge of any other components. Two systems can be
    said to be *loosely coupled* when changes to one component generally don’t require
    changes to the other.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*松散耦合*是一种系统属性和设计策略，其中系统的各个组件对其他组件的了解极少。当一个组件的变化通常不需要对另一个组件进行变更时，可以说两个系统是*松散耦合*的。'
- en: 'For example, web servers and web browsers can be considered to be loosely coupled:
    servers can be updated or even completely replaced without affecting our browsers
    at all. In their case, this is possible because standard web servers have agreed
    that they would communicate using a set of standard protocols.^([7](ch01.xhtml#idm45983644856888))
    In other words, they provide a *service contract*. Imagine the chaos if all the
    world’s web browsers had to be updated each time NGINX or httpd had a new version!^([8](ch01.xhtml#idm45983645023000))'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Web服务器和Web浏览器可以被认为是松散耦合的：服务器可以更新或甚至完全替换而不影响我们的浏览器。在它们的情况下，这是可能的，因为标准Web服务器已经约定它们将使用一组标准协议进行通信。^([7](ch01.xhtml#idm45983644856888))
    换句话说，它们提供了一个*服务契约*。想象一下，如果世界上所有的Web浏览器每次NGINX或httpd发布新版本时都必须更新会是多么混乱！^([8](ch01.xhtml#idm45983645023000))
- en: 'It could be said that “loose coupling” is just a restatement of the whole point
    of microservice architectures: to partition components so that changes in one
    don’t necessarily affect another. This might even be true. However, this principle
    is often neglected, and bears repeating. The benefits of loose coupling—and the
    consequences if it’s neglected—cannot be understated. It’s very easy to create
    a “worst of all worlds” system that pairs the management and complexity overhead
    of having multiple services with the dependencies and entanglements of a monolithic
    system: the dreaded *distributed monolith*.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 可以说，“松散耦合”只是微服务架构整体目标的重申：将组件分区，使得一个组件的变化不一定影响另一个组件。这可能确实如此。然而，这一原则经常被忽视，需要重申。松散耦合的好处——以及忽视它可能带来的后果——不容小觑。很容易创建一个“最坏的情况”系统，即管理和复杂性开销与具有多个服务的依赖性和纠缠性相结合的系统：可怕的*分布式单体*。
- en: Unfortunately, there’s no magic technology or protocol that can keep your services
    from being tightly coupled. Any data exchange format can be misused. There are,
    however, several that help, and—when applied with practices like declarative APIs
    and good versioning practices—can be used to create services that are both loosely-coupled
    *and* modifiable.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，并没有什么魔法技术或协议可以防止你的服务紧密耦合。任何数据交换格式都可能被误用。然而，有几种方法可以帮助，比如使用声明式API和良好的版本控制实践，这些方法可以创建既松散耦合又可修改的服务。
- en: These technologies and practices will be discussed and demonstrated in detail
    in [Chapter 8](ch08.xhtml#chapter_8).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术和实践将在[第8章](ch08.xhtml#chapter_8)中详细讨论和演示。
- en: Resilience
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弹性
- en: '*Resilience* (roughly synonymous with *fault tolerance*) is a measure of how
    well a system withstands and recovers from errors and faults. A system can be
    considered *resilient* if it can continue operating correctly—possibly at a reduced
    level—rather than failing completely when some part of the system fails.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*弹性*（与*容错性*大致同义）是衡量系统如何抵御和恢复错误和故障的指标。如果系统能够继续正确运行——即使可能降低一定水平——而不是在系统的某个部分发生故障时完全失败，那么该系统可以被视为*具有弹性*。'
- en: When we discuss resilience (and the other the other “cloud native attributes”
    as well, but especially when we discuss resilience) we use the word “system” quite
    a lot. A *system*, depending on how it’s used, can refer to anything from a complex
    web of interconnected services (such as an entire distributed application), to
    a collection of closely related components (such as the replicas of a single function
    or service instance), or a single process running on a single machine. Every system
    is composed of several subsystems, which in turn are composed of sub-subsystems,
    which are themselves composed of sub-sub-subsystems. It’s turtles all the way
    down.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们讨论弹性（以及其他“云原生特性”，尤其是在讨论弹性时），我们经常使用“系统”这个词。系统*（system）*根据使用方式不同，可以指任何复杂的互联服务网（比如整个分布式应用程序），也可以指密切相关组件的集合（比如单个功能或服务实例的副本），或者指运行在单台机器上的单个进程。每个系统由多个子系统组成，而每个子系统又由子子系统组成，子子系统本身又由子子子系统组成。这是无限递归的。
- en: 'In the language of systems engineering, any system can contain defects, or
    *faults*, which we lovingly refer to as *bugs* in the software world. As we all
    know too well, under certain conditions, any fault can give rise to an *error*,
    which is the name we give to any discrepancy between a system’s intended behavior
    and its actual behavior. Errors have the potential to cause a system to fail to
    perform its required function: a *failure*. It doesn’t stop there though: a failure
    in a subsystem or component becomes a fault in the larger system; any fault that
    isn’t properly contained has the potential to cascade upwards until it causes
    a total system failure.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统工程的语言中，任何系统都可能存在缺陷或*故障*，在软件世界中我们常称之为*错误*。我们都太熟悉了，在特定条件下，任何故障都可能导致*错误*，这是指系统的实际行为与其预期行为之间的任何差异。错误有可能导致系统无法执行其所需功能：即*失败*。但事情并不止于此：子系统或组件中的故障会成为更大系统中的故障；任何未被正确包含的故障都有可能向上级联，最终导致整个系统失败。
- en: In an ideal world, every system would be carefully designed to prevent faults
    from ever occurring, but this is an unrealistic goal. You can’t prevent every
    possible fault, and it’s wasteful and unproductive to try. However, by assuming
    that all of a system’s components are certain to fail—which they are—and designing
    them to respond to potential faults and limit the effects of failures, you can
    produce a system that’s functionally healthy even when some of its components
    are not.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在理想情况下，每个系统都应精心设计，以防止任何故障的发生，但这是一个不现实的目标。你无法防止每一种可能的故障，试图这样做是低效且无益的。然而，通过假设系统的所有组件都必然会失败——事实上是这样——并设计它们以应对潜在故障并限制故障的影响，你可以创建一个功能健全的系统，即使其中某些组件发生故障也能正常运行。
- en: There are many ways of designing a system for resiliency. Deploying redundant
    components is perhaps the most common approach, but that also assumes that a fault
    won’t affect all components of the same type. Circuit breakers and retry logic
    can be included to prevent failures from propagating between components. Faulty
    components can even be reaped—or can intentionally fail—to benefit the larger
    system.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多设计系统弹性的方法。部署冗余组件可能是最常见的方法，但这也假设一个故障不会影响同一类型的所有组件。电路断路器和重试逻辑可以用来防止故障在组件之间传播。甚至可以对故障组件进行排除或者故意失败，以造福更大的系统。
- en: We’ll discuss all of these approaches (and more) in much more depth in [Chapter 9](ch09.xhtml#chapter_9).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第9章](ch09.xhtml#chapter_9)中更深入地讨论所有这些方法（以及更多内容）。
- en: Manageability
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可管理性
- en: A system’s *manageability* is the ease (or lack thereof) with which its behavior
    can be modified to keep it secure, running smoothly, and compliant with changing
    requirements. A system can be considered *manageable* if it’s possible to sufficiently
    alter its behavior without having to alter its code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的*可管理性*是指能够多么容易（或难）地修改其行为，以保持其安全、平稳运行，并与变化的需求保持一致。如果能在不必修改其代码的情况下充分改变其行为，系统就可以被视为*可管理的*。
- en: As a system property, manageability gets a lot less attention than some of the
    more attention-grabbing attributes like scalability or observability. It’s every
    bit as critical, though, particularly in complex, distributed systems.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个系统属性，管理能力比一些更抢眼的属性如可扩展性或可观察性得到的关注要少。但在复杂的分布式系统中，它同样至关重要。
- en: For example, imagine a hypothetical system that includes a service and a database,
    and that the service refers to the database by a URL. What if you needed to update
    that service to refer to another database? If the URL was hardcoded you might
    have to update the code and redeploy, which, depending on the system, might be
    awkward for its own reasons. Of course, you could update the DNS record to point
    to the new location, but what if you needed to redeploy a development version
    of the service, with its own development database?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，想象一个假设系统，包括一个服务和一个数据库，服务通过一个 URL 引用数据库。如果需要将该服务更新为指向另一个数据库，如果 URL 是硬编码的，你可能需要更新代码并重新部署，这依赖于系统可能会很麻烦。当然，你可以更新
    DNS 记录指向新位置，但如果需要重新部署开发版本的服务，其中包含自己的开发数据库，又该如何处理？
- en: A manageable system might, for example, represent this value as an easily modified
    environment variable; if the service that uses it is deployed in Kubernetes, adjustments
    to its behavior might be a matter of updating a value in a ConfigMap. A more complex
    system might even provide a declarative API that a developer can use to tell the
    system what behavior she expects. There’s no single right answer.^([10](ch01.xhtml#idm45983645169368))
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可管理的系统可以将这个值表示为一个可以轻松修改的环境变量；如果使用该服务部署在 Kubernetes 中，调整其行为可能只需更新 ConfigMap
    中的一个值。更复杂的系统甚至可以提供一个声明性的 API，开发者可以用来告诉系统她期望的行为。没有一个单一的正确答案。^([10](ch01.xhtml#idm45983645169368))
- en: Manageability isn’t limited to configuration changes. It encompasses all possible
    dimensions of a system’s behavior, be it the ability to activate feature flags,
    or rotate credentials or TLS certificates, or even (and perhaps especially) deploy
    or upgrade (or downgrade) system components.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 管理能力不仅限于配置更改。它涵盖了系统行为的所有可能维度，无论是激活功能标志、轮换凭证或 TLS 证书，甚至（也许尤其是）部署或升级（或降级）系统组件。
- en: Manageable systems are designed for adaptability, and can be readily adjusted
    to accommodate changing functional, environmental, or security requirements. Unmanageable
    systems, on the other hand, tend to be far more brittle, frequently requiring
    ad hoc—often manual—changes. The overhead involved in managing such systems places
    fundamental limits on their scalability, availability, and reliability.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 可管理的系统设计用于适应性，并可以轻松调整以适应变化的功能、环境或安全需求。而不可管理的系统则往往更加脆弱，经常需要临时的，往往是手动的更改。管理此类系统所涉及的开销在根本上限制了其可扩展性、可用性和可靠性。
- en: The concept of manageability—and some preferred practices for implementing them
    in Go—will be discussed in much more depth in [Chapter 10](ch10.xhtml#chapter_10).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 管理能力的概念及在 Go 中实施它们的一些首选实践将在[第 10 章](ch10.xhtml#chapter_10)中更深入地讨论。
- en: Observability
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可观察性
- en: The *observability* of a system is a measure of how well its internal states
    can be inferred from knowledge of its external outputs. A system can be considered
    *observable* when it’s possible to quickly and consistently ask novel questions
    about it with minimal prior knowledge, and without having to reinstrument or build
    new code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的*可观察性*是衡量其内部状态如何能从其外部输出知识中推断出来的度量。当可以快速且一致地提出关于系统的新问题，而不需要大量先验知识或重新仪表化或构建新代码时，系统可以被认为是*可观察*的。
- en: 'On its face, this might sound simple enough: just sprinkle in some logging
    and slap up a couple of dashboards, and your system is observable, right? Almost
    certainly not. Not with modern, complex systems in which almost any problem is
    the manifestation of a web of multiple things going wrong simultaneously. The
    Age of the LAMP Stack is over; things are harder now.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 乍看之下，这听起来可能很简单：只需加入一些日志记录和几个仪表板，你的系统就可以被观察到了，对吗？几乎可以肯定不是这样的。尤其是在现代复杂系统中，几乎任何问题都是多个问题同时出现的体现。LAMP
    堆栈时代已经结束了；现在的情况更加困难。
- en: 'This isn’t to say that metrics, logging, and tracing aren’t important. On the
    contrary: they represent the building blocks of observability. But their mere
    existence is not enough: data is not information. They need to be used the right
    way. They need to be rich. Together, they need to be able to answer questions
    that you’ve never even thought to ask before.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是说度量、日志记录和跟踪不重要。相反，它们代表了观测性的基本组成部分。但仅仅存在它们还不够：数据不等于信息。它们需要以正确的方式使用。它们需要丰富。它们需要共同能够回答你甚至从未想过的问题。
- en: The ability to detect and debug problems is a fundamental requirement for the
    maintenance and evolution of a robust system. But in a distributed system it’s
    often hard enough just figuring out *where* a problem is. Complex systems are
    just too…*complex*. The number of possible failure states for any given system
    is proportional to the product of the number of possible partial and complete
    failure states of each of its components, and it’s impossible to predict all of
    them. The traditional approach of focusing attention on the things we expect to
    fail simply isn’t enough.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 检测和调试问题的能力是维护和发展强大系统的基本要求。但在分布式系统中，弄清楚问题出在*哪里*通常已经足够困难。复杂系统实在太……复杂。任何给定系统可能发生故障状态的数量与其每个组件的可能部分和完全故障状态数量的乘积成正比，而且不可能预测所有这些状态。仅仅关注我们预期会发生故障的事物的传统方法是不够的。
- en: Emerging practices in observability can be seen as the evolution of monitoring.
    Years of experience with designing, building, and maintaining complex systems
    have taught us that traditional methods of instrumentation—including but not limited
    to dashboards, unstructured logs, or alerting on various “known unknowns”—just
    aren’t up to the challenges presented by modern distributed systems.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 观测性中的新兴实践可以看作是监控演化的结果。多年来，我们在设计、构建和维护复杂系统的经验表明，传统的仪表化方法——包括但不限于仪表板、非结构化日志或对各种“已知未知”的警报——根本无法应对现代分布式系统所面临的挑战。
- en: 'Observability is a complex and subtle subject, but, fundamentally, it comes
    down to this: instrument your systems richly enough and under real enough scenarios
    so that, in the future, you can answer questions that you haven’t thought to ask
    yet.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 观测性是一个复杂而微妙的主题，但基本上归结为这样：充分仪表化你的系统，在真实的场景下，以便在未来能够回答你尚未想到的问题。
- en: The concept of observability—and some suggestions for implementing it—will be
    discussed in much more depth in [Chapter 11](ch11.xhtml#chapter_11).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 观测性的概念——以及一些实施建议——将在[第11章](ch11.xhtml#chapter_11)中更深入地讨论。
- en: Why Is Cloud Native a Thing?
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么云原生如此重要？
- en: The move towards “cloud native” is an example of architectural and technical
    adaptation, driven by environmental pressure and selection. It’s evolution—survival
    of the fittest. Bear with me here; I’m a biologist by training.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 向“云原生”转变是环境压力和选择驱动的架构和技术适应的一个例子。这是进化的过程——适者生存。请跟我一起，我是一个生物学家出身。
- en: Eons ago, in the Dawn of Time,^([12](ch01.xhtml#idm45983645086552)) applications
    would be built and deployed (generally by hand) to one or a small number of servers,
    where they were carefully maintained and nurtured. If they got sick, they were
    lovingly nursed back to health. If a service went down, you could often fix it
    with a restart. Observability was shelling into a server to run `top` and review
    logs. It was a simpler time.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 亿万年前，在时间的黎明时代^[12](ch01.xhtml#idm45983645086552)，应用程序会构建和部署（通常手工操作）到一个或少数几个服务器上，在那里它们会被精心维护和培育。如果它们生病了，它们会被精心护理好。如果一个服务停止运行，你通常可以通过重新启动来修复它。观测性意味着登录到服务器运行`top`命令并查看日志。那是一个更简单的时代。
- en: In 1997, only 11% of people in industrialized countries, and 2% worldwide, were
    regular internet users. The subsequent years saw exponential growth in internet
    access and adoption, however, and by 2017 that number had exploded to 81% in industrialized
    countries and 48% worldwide^([13](ch01.xhtml#idm45983645084440))—and continues
    to grow.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 1997年，工业化国家只有11%的人口，全球仅有2%的人口是常规互联网用户。随后的几年中，互联网接入和采用经历了指数级增长，到了2017年，工业化国家的比例飙升至81%，全球也达到了48%^[13](ch01.xhtml#idm45983645084440)，并持续增长。
- en: All of those users—and their money—applied stress to services, generating significant
    incentive to scale. What’s more, as user sophistication and dependency on web
    services grew, so did expectations that their favorite web applications would
    be both feature-rich and always available.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些用户及其资金对服务施加了压力，产生了显著的扩展激励。此外，随着用户的复杂程度和对Web服务依赖的增加，他们对其喜爱的Web应用程序既希望功能丰富又始终可用。
- en: The result was, and is, a significant evolutionary pressure towards scale, complexity,
    and dependability. These three attributes don’t play well together, though, and
    the traditional approaches simply couldn’t, and can’t, keep up. New techniques
    and practices had to be invented.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，现在依然存在着对规模、复杂性和可靠性的显著进化压力。然而，这三个属性并不总是完美结合在一起，传统的方法简单地无法跟上。必须创造新的技术和实践方法。
- en: Fortunately, the introduction of public clouds and IaaS made it relatively straightforward
    to scale infrastructure out. Shortcomings with dependability could often be compensated
    for with sheer numbers. But that introduced new problems. How do you maintain
    a hundred servers? A thousand? Ten thousand? How do you install your application
    onto them, or upgrade it? How do you debug it when it misbehaves? How do you even
    know it’s healthy? Problems that are merely annoying at small scale tend to become
    very hard at large scale.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，公共云和IaaS的引入使得扩展基础设施相对简单化了。依赖性的缺陷通常可以通过大量来弥补。但这也带来了新的问题。如何管理一百台服务器？一千台？一万台？如何在它们上面安装或升级应用程序？当应用程序运行不正常时如何调试？你怎么知道它们的健康状态？在小规模时可能只是令人讨厌的问题，在大规模时往往变得非常棘手。
- en: Cloud native is a thing because scale is the cause of (and solution to) all
    our problems. It’s not magic. It’s not special. All fancy language aside, cloud
    native techniques and technologies exist for no other reasons than to make it
    possible to leverage the benefits of a “cloud” (quantity) while compensating for
    its downsides (lack of dependability).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生之所以存在，是因为规模是我们所有问题的起因（和解决方案）。这不是魔术，也不是特别的。除了那些花哨的语言之外，云原生的技术和技术手段的存在，别无他用，只是为了能够利用“云”的好处（数量），同时弥补其缺陷（可靠性的不足）。
- en: Summary
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: In this chapter, we talked a fair amount about the history of computing, and
    how what we now call “cloud native” isn’t a new phenomenon so much as the inevitable
    outcome of a virtuous cycle of technological demand driving innovation driving
    more demand.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们谈到了计算历史的相当一部分，以及现在我们称之为“云原生”的东西并不是一种新现象，而是技术需求驱动创新，进而又驱动更多需求的必然结果。
- en: 'Ultimately, though, all of those fancy words distill down to a single point:
    today’s applications have to dependably serve a lot of people. The techniques
    and technologies that we call “cloud native” represent the best current practices
    for building a service that’s scalable, adaptable, and resilient enough to do
    that.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 但归根结底，所有这些花哨的话语都归结为一个核心问题：如今的应用程序必须能够可靠地为大量用户提供服务。我们称之为“云原生”的技术和技术手段，代表了构建具备可扩展性、适应性和弹性的服务的最佳现代实践。
- en: But what does all of this to do with Go? As it turns out, cloud native infrastructure
    requires cloud native tools. In [Chapter 2](ch02.xhtml#chapter_2), we’ll start
    to talk about what that means, exactly.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这一切与Go语言有什么关系呢？事实证明，云原生基础设施需要云原生工具。在[第二章](ch02.xhtml#chapter_2)中，我们将开始讨论这究竟意味着什么。
- en: '^([1](ch01.xhtml#idm45983644896536-marker)) Surden, Esther. “Privacy Laws May
    Usher in Defensive DP: Hopper.” *Computerworld*, 26 Jan. 1976, p. 9.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '^([1](ch01.xhtml#idm45983644896536-marker)) Surden, Esther. “Privacy Laws May
    Usher in Defensive DP: Hopper.” *Computerworld*, 1976年1月26日, 第9页。'
- en: ^([2](ch01.xhtml#idm45983644890840-marker)) Which is Go. Don’t get me wrong—this
    is still a Go book after all.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch01.xhtml#idm45983644890840-marker)) 那就是Go语言。别误会 —— 毕竟这本书还是关于Go语言的。
- en: ^([3](ch01.xhtml#idm45983645042344-marker)) A “kludge” is “an awkward or inelegant
    solution.” It’s a fascinating word with a fascinating history.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch01.xhtml#idm45983645042344-marker)) “拙劣解决方案”是指“一个笨拙或不优雅的解决方案”。这是一个迷人的词汇，背后有着迷人的历史。
- en: ^([4](ch01.xhtml#idm45983645041352-marker)) Have you ever wondered why so many
    Kubernetes migrations fail?
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch01.xhtml#idm45983645041352-marker)) 你是否曾经想过为什么那么多Kubernetes迁移失败？
- en: ^([5](ch01.xhtml#idm45983644915864-marker)) Especially for me. I get to write
    this cool book.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch01.xhtml#idm45983644915864-marker)) 尤其是对我来说。我有机会写这本很酷的书。
- en: ^([6](ch01.xhtml#idm45983644912856-marker)) Cloud Native Computing Foundation.
    “CNCF Cloud Native Definition v1.0,” GitHub, 7 Dec. 2020\. [*https://oreil.ly/KJuTr*](https://oreil.ly/KJuTr).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](ch01.xhtml#idm45983644912856-marker)) 云原生计算基金会。《CNCF云原生定义v1.0》，GitHub，2020年12月7日。[*https://oreil.ly/KJuTr*](https://oreil.ly/KJuTr)。
- en: ^([7](ch01.xhtml#idm45983644856888-marker)) Those of us who remember the Browser
    Wars of the 1990s will recall that this wasn’t always strictly true.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: ^([7](ch01.xhtml#idm45983644856888-marker)) 那些记得20世纪90年代的浏览器大战的人会记得这并不总是严格正确的。
- en: ^([8](ch01.xhtml#idm45983645023000-marker)) Or if every website required a different
    browser. That would stink, *wouldn’t it?*
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: ^([8](ch01.xhtml#idm45983645023000-marker)) 或者如果每个网站都需要不同的浏览器。那会很糟糕，*不是吗？*
- en: ^([9](ch01.xhtml#idm45983645183224-marker)) If you’re interested in a complete
    academic treatment, I highly recommend [*Reliability and Availability Engineering*](https://oreil.ly/80wGT)
    by Kishor S. Trivedi and Andrea Bobbio.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: ^([9](ch01.xhtml#idm45983645183224-marker)) 如果你对完整的学术处理感兴趣，我强烈推荐由Kishor S. Trivedi和Andrea
    Bobbio撰写的[*可靠性与可用性工程*](https://oreil.ly/80wGT)。
- en: ^([10](ch01.xhtml#idm45983645169368-marker)) There are some wrong ones though.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: ^([10](ch01.xhtml#idm45983645169368-marker)) 有一些错误的。
- en: ^([11](ch01.xhtml#idm45983645162616-marker)) Plus, they both start with *M*.
    Super confusing.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: ^([11](ch01.xhtml#idm45983645162616-marker)) 而且，它们两个都以*M*开头。非常令人困惑。
- en: ^([12](ch01.xhtml#idm45983645086552-marker)) That time was the 1990s.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: ^([12](ch01.xhtml#idm45983645086552-marker)) 那时候是20世纪90年代。
- en: ^([13](ch01.xhtml#idm45983645084440-marker)) International Telecommunication
    Union (ITU). “Internet users per 100 inhabitants 1997 to 2007” and “Internet users
    per 100 inhabitants 2005 to 2017.” *ICT Data and Statistics (IDS)*.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: ^([13](ch01.xhtml#idm45983645084440-marker)) 国际电信联盟（ITU）。"1997至2007年每百名居民的互联网用户"和"2005至2017年每百名居民的互联网用户"。*ICT数据和统计（IDS）*。
