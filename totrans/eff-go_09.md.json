["```go\npackage fd\n\nimport (\n    \"os\"\n    \"runtime/pprof\"\n)\n\nvar fdProfile = pprof.NewProfile(\"fd.inuse\") ![1](assets/1.png)\n\n// File is a wrapper on os.File that tracks file descriptor lifetime.\ntype File struct {\n    *os.File\n}\n\n// Open opens a file and tracks it in the `fd` profile`.\nfunc Open(name string) (*File, error) {\n    f, err := os.Open(name)\n    if err != nil {\n        return nil, err\n    }\n    fdProfile.Add(f, 2) ![2](assets/2.png)\n    return &File{File: f}, nil\n}\n\n// Close closes files and updates profile.\nfunc (f *File) Close() error {\n    defer fdProfile.Remove(f.File) ![3](assets/3.png)\n    return f.File.Close()\n}\n\n// Write saves the profile of the currently open file\n// descriptors into a file in pprof format.\nfunc Write(profileOutPath string) error {\n    out, err := os.Create(profileOutPath)\n    if err != nil {\n        return err\n    }\n    if err := fdProfile.WriteTo(out, 0); err != nil { ![4](assets/4.png)\n        _ = out.Close()\n        return err\n    }\n    return out.Close()\n}\n```", "```go\npackage main\n\n// import \"github.com/efficientgo/examples/pkg/profile/fd\"\n\ntype TestApp struct {\n    files []io.ReadCloser\n}\n\nfunc (a *TestApp) Close() {\n    for _, cl := range a.files {\n        _ = cl.Close() // TODO: Check error. ![2](assets/2.png)\n    }\n    a.files = a.files[:0]\n}\n\nfunc (a *TestApp) open(name string) {\n    f, _ := fd.Open(name) // TODO: Check error. ![1](assets/1.png)\n    a.files = append(a.files, f)\n}\n\nfunc (a *TestApp) OpenSingleFile(name string) {\n    a.open(name)\n}\n\nfunc (a *TestApp) OpenTenFiles(name string) {\n    for i := 0; i < 10; i++ {\n        a.open(name)\n    }\n}\n\nfunc (a *TestApp) Open100FilesConcurrently(name string) {\n    wg := sync.WaitGroup{}\n    wg.Add(10)\n    for i := 0; i < 10; i++ {\n        go func() {\n            a.OpenTenFiles(name)\n            wg.Done()\n        }()\n    }\n    wg.Wait()\n}\n\nfunc main() {\n    a := &TestApp{}\n    defer a.Close()\n\n    // No matter how many files we opened in the past...\n    for i := 0; i < 10; i++ {\n        a.OpenTenFiles(\"/dev/null\") ![3](assets/3.png)\n        a.Close()\n    }\n\n    // ...after the last Close, only files below will be used in the profile.\n    f, _ := fd.Open(\"/dev/null\") // TODO: Check error.\n    a.files = append(a.files, f)\n\n    a.OpenSingleFile(\"/dev/null\")\n    a.OpenTenFiles(\"/dev/null\")\n    a.Open100FilesConcurrently(\"/dev/null\")\n\n    if err := fd.Write(\"fd.pprof\"); err != nil { ![4](assets/4.png)\n        log.Fatal(err)\n    }\n}\n```", "```go\ngo tool pprof -raw fd.pprof\nPeriodType: fd.inuse count\nPeriod: 1 ![1](assets/1.png) Time: 2022-07-29 15:18:58.76536008 +0200 CEST\nSamples:\nfd.inuse/count\n        100: 1 2\n         10: 1 3 4\n          1: 5 4\n          1: 6 4\nLocations\n1: 0x4b237b M=1 main.(*TestApp).open example/main.go:23 s=0\n    main.(*TestApp).OpenTenFiles example/main.go:33 s=0\n2: 0x4b25cd M=1 main.(*TestApp).Open100FilesConcurrently.func1 (...)\n3: 0x4b283a M=1 main.main example/main.go:64 s=0\n4: 0x435b51 M=1 runtime.main /go1.18.3/src/runtime/proc.go:250 s=0\n5: 0x4b26f2 M=1 main.main example/main.go:60 s=0\n6: 0x4b2799 M=1 main.(*TestApp).open example/main.go:23 s=0\n    main.(*TestApp).OpenSingleFile example/main.go:28 s=0\n    main.main example/main.go:63 s=0\nMappings\n1: 0x400000/0x4b3000/0x0 /tmp/go-build3464577057/b001/exe/main  [FN]\n```", "```go\nfunc main() { ![1](assets/1.png)\n    // ...\n\n    f, _ := fd.Open(\"/dev/null\") // TODO: Check error. ![2](assets/2.png)\n    a.files = append(a.files, f) ![3](assets/3.png)\n\n    a.OpenSingleFile(\"/dev/null\")\n    a.OpenTenFiles(\"/dev/null\") ![4](assets/4.png)\n\n    // ...\n}\n```", "```go\nimport (\n    \"net/http\"\n    \"net/http/pprof\"\n\n    \"github.com/felixge/fgprof\"\n)\n\n// ...\n\nm := http.NewServeMux() ![1](assets/1.png)\nm.HandleFunc(\"/debug/pprof/\", pprof.Index) ![2](assets/2.png)\nm.HandleFunc(\"/debug/pprof/profile\", pprof.Profile) ![3](assets/3.png)\nm.HandleFunc(\"/debug/fgprof/profile\", fgprof.Handler().ServeHTTP) ![4](assets/4.png)\n\nsrv := http.Server{Handler: m}\n\n// Start server...\n```", "```go\nlabeler := ...\n\nparca := e2e.NewInstrumentedRunnable(e, \"parca\").\n    WithPorts(map[string]int{\"http\": 7070}, \"http\").\n    Init(e2e.StartOptions{\n        Image: \"ghcr.io/parca-dev/parca:main-4e20a666\", ![1](assets/1.png)\n        Command: e2e.NewCommand(\"/bin/sh\", \"-c\",\n          `cat << EOF > /shared/data/config.yml && \\\n    /parca --config-path=/shared/data/config.yml\nobject_storage: ![2](assets/2.png) bucket:\n    type: \"FILESYSTEM\"\n    config:\n      directory: \"./data\"\nscrape_configs: ![3](assets/3.png) - job_name: \"%s\"\n  scrape_interval: \"15s\"\n  static_configs:\n    - targets: [ '`+labeler.InternalEndpoint(\"http\")+`' ]\n  profiling_config:\n    pprof_config: ![4](assets/4.png) fgprof:\n        enabled: true\n        path: /debug/fgprof/profile\n        delta: true\nEOF\n`),\n        User:      strconv.Itoa(os.Getuid()),\n        Readiness: e2e.NewTCPReadinessProbe(\"http\"),\n    })\ntestutil.Ok(t, e2e.StartAndWaitReady(parca))\ntestutil.Ok(t, e2einteractive.OpenInBrowser(\"http://\"+parca.Endpoint(\"http\"))) ![5](assets/5.png)\n\nk6 := ...\n```"]