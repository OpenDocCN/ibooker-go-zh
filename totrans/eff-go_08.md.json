["```go\nfunc BenchmarkSum(b *testing.B) {\n    b.ReportAllocs() ![1](assets/1.png)\n\n    // TODO(bwplotka): Add any initialization that is needed.\n\n    b.ResetTimer() ![2](assets/2.png)\n    for i := 0; i < b.N; i++ { ![3](assets/3.png)\n        // TODO(bwplotka): Add tested functionality.\n    }\n}\n```", "```go\nfunc BenchmarkSum(b *testing.B) {\n    for i := 0; i < b.N; i++ {\n        _, _ = Sum(\"testdata/test.2M.txt\")\n    }\n}\n```", "```go\n$ go test -run '^$' -bench '^BenchmarkSum$' ![1](assets/1.png)\n$ go test -run '^$' -bench '^BenchmarkSum$' -benchtime 10s ![2](assets/2.png)\n$ go test -run '^$' -bench '^BenchmarkSum$' -benchtime 100x ![3](assets/3.png)\n$ go test -run '^$' -bench '^BenchmarkSum$' -benchtime 1s -count 5 ![4](assets/4.png)\n```", "```go\n$ export ver=v1 && \\ ![1](assets/1.png)\n    go test -run '^$' -bench '^BenchmarkSum$' -benchtime 10s -count 5 \\\n        -cpu 4 \\ ![2](assets/2.png)\n        -benchmem \\ ![3](assets/3.png)\n        -memprofile=${ver}.mem.pprof -cpuprofile=${ver}.cpu.pprof \\ ![4](assets/4.png)\n    | tee ${ver}.txt ![5](assets/5.png)\n```", "```go\ngoos: linux ![1](assets/1.png) goarch: amd64\npkg: github.com/efficientgo/examples/pkg/sum\ncpu: Intel(R) Core(TM) i7-9850H CPU @ 2.60GHz\nBenchmarkSum-4    67    79043706 ns/op    60807308 B/op    1600006 allocs/op ![2](assets/2.png) BenchmarkSum-4    74    79312463 ns/op    60806508 B/op    1600006 allocs/op\nBenchmarkSum-4    66    80477766 ns/op    60806472 B/op    1600006 allocs/op\nBenchmarkSum-4    66    80010618 ns/op    60806224 B/op    1600006 allocs/op\nBenchmarkSum-4    74    80793880 ns/op    60806445 B/op    1600006 allocs/op\nPASS\nok     github.com/efficientgo/examples/pkg/sum    38.214s\n```", "```go\n$ benchstat v1.txt ![1](assets/1.png) name   time/op\nSum-4  79.9ms ± 1% ![2](assets/2.png) name   alloc/op\nSum-4  60.8MB ± 0%\n\nname   allocs/op\nSum-4   1.60M ± 0%\n```", "```go\n$ benchstat v1.txt v2.txt ![1](assets/1.png) name   old time/op    new time/op    delta\nSum-4    79.9ms ± 1%    39.5ms ± 2%  -50.52%  (p=0.008 n=5+5) ![2](assets/2.png) name   old alloc/op   new alloc/op   delta\nSum-4    60.8MB ± 0%    60.8MB ± 0%     ~     (p=0.151 n=5+5)\n\nname   old allocs/op  new allocs/op  delta\nSum-4     1.60M ± 0%     1.60M ± 0%   +0.00%  (p=0.008 n=5+5)\n```", "```go\nname   time/op\nSum-4  45.7ms ±19% ![1](assets/1.png) name   alloc/op\nSum-4  60.8MB ± 0%\n\nname   allocs/op\nSum-4   1.60M ± 0%\n```", "```go\n// import \"github.com/efficientgo/core/testutil\"\n\nfunc TestSum(t *testing.T) {\n    ret, err := Sum(\"testdata/input.txt\")\n    testutil.Ok(t, err)\n    testutil.Equals(t, 3110800, ret)\n}\n```", "```go\nfunc BenchmarkSum(b *testing.B) {\n    for i := 0; i < b.N; i++ {\n       _, err := Sum(\"testdata/test.2M.txt\")\n        testutil.Ok(b, err) ![1](assets/1.png)\n    }\n}\n```", "```go\nfunc TestBenchSum(t *testing.T) {\n    benchmarkSum(testutil.NewTB(t))\n}\n\nfunc BenchmarkSum(b *testing.B) {\n    benchmarkSum(testutil.NewTB(b))\n}\n\nfunc benchmarkSum(tb testutil.TB) { ![1](assets/1.png)\n    for i := 0; i < tb.N(); i++ { ![2](assets/2.png)\n        ret, err := Sum(\"testdata/test.2M.txt\")\n        testutil.Ok(tb, err)\n        if !tb.IsBenchmark() {\n            // More expensive result checks can be here.\n            testutil.Equals(tb, int64(6221600000), ret) ![3](assets/3.png)\n        }\n    }\n}\n```", "```go\n// BenchmarkSum assesses `Sum` function. ![1](assets/1.png)\n// NOTE(bwplotka): Test it with a maximum of 4 CPU cores, given we don't allocate\n// more in our production containers.\n//\n// Recommended run options:\n/*\nexport ver=v1 && go test \\\n    -run '^$' -bench '^BenchmarkSum$' \\\n    -benchtime 10s -count 5 -cpu 4 -benchmem \\\n    -memprofile=${ver}.mem.pprof -cpuprofile=${ver}.cpu.pprof \\\n  | tee ${ver}.txt ![2](assets/2.png) */\nfunc BenchmarkSum(b *testing.B) {\n   // Create 7.55 MB file with 2 million lines.\n   fn := filepath.Join(b.TempDir(), \"/test.2M.txt\")\n   testutil.Ok(b, createTestInput(fn, 2e6)) ![3](assets/3.png)\n\n   b.ResetTimer()\n   for i := 0; i < b.N; i++ {\n      _, err := Sum(fn)\n      testutil.Ok(b, err) ![4](assets/4.png)\n   }\n}\n```", "```go\nfunc lazyCreateTestInput(tb testing.TB, numLines int) string {\n    tb.Helper() ![1](assets/1.png)\n\n    fn := fmt.Sprintf(\"testdata/test.%v.txt\", numLines)\n    if _, err := os.Stat(fn); errors.Is(err, os.ErrNotExist) { ![2](assets/2.png)\n        testutil.Ok(tb, createTestInput(fn, numLines))\n    } else {\n        testutil.Ok(tb, err)\n    }\n    return fn\n}\n\nfunc BenchmarkSum(b *testing.B) {\n    // Create a 7.55 MB file with 2 million lines if it does not exist.\n    fn := lazyCreateTestInput(tb, 2e6)\n\n    b.ResetTimer()\n    for i := 0; i < b.N; i++ {\n        _, err := Sum(fn)\n        testutil.Ok(b, err)\n   }\n}\n```", "```go\nfunc BenchmarkSum(b *testing.B) {\n    for _, tcase := range []struct { ![1](assets/1.png)\n       numLines int\n    }{\n        {numLines: 0},\n        {numLines: 1e2},\n        {numLines: 1e4},\n        {numLines: 1e6},\n        {numLines: 2e6},\n    } {\n        b.Run(fmt.Sprintf(\"lines-%d\", tcase.numLines), func(b *testing.B) { ![2](assets/2.png)\n            b.ReportAllocs() ![3](assets/3.png)\n\n            fn := lazyCreateTestInput(tb, tcase.numLines)\n\n            b.ResetTimer()\n            for i := 0; i < b.N; i++ { ![4](assets/4.png)\n                _, err := Sum(fn)\n                testutil.Ok(b, err)\n            }\n        })\n    }\n}\n```", "```go\nname                 time/op\nSum/lines-0-4        2.79µs ± 1%\nSum/lines-100-4      8.10µs ± 5%\nSum/lines-10000-4     407µs ± 6%\nSum/lines-1000000-4  40.5ms ± 1%\nSum/lines-2000000-4  78.4ms ± 3%\n\nname                 alloc/op\nSum/lines-0-4          872B ± 0%\nSum/lines-100-4      3.82kB ± 0%\nSum/lines-10000-4     315kB ± 0%\nSum/lines-1000000-4  30.4MB ± 0%\nSum/lines-2000000-4  60.8MB ± 0%\n\nname                 allocs/op\nSum/lines-0-4          6.00 ± 0%\nSum/lines-100-4        86.0 ± 0%\nSum/lines-10000-4     8.01k ± 0%\nSum/lines-1000000-4    800k ± 0%\nSum/lines-2000000-4   1.60M ± 0%\n```", "```go\nconst m1 = 0x5555555555555555\nconst m2 = 0x3333333333333333\nconst m4 = 0x0f0f0f0f0f0f0f0f\nconst h01 = 0x0101010101010101\n\nfunc popcnt(x uint64) uint64 {\n   x -= (x >> 1) & m1\n   x = (x & m2) + ((x >> 2) & m2)\n   x = (x + (x >> 4)) & m4\n   return (x * h01) >> 56\n}\n\nfunc BenchmarkPopcnt(b *testing.B) {\n   for i := 0; i < b.N; i++ {\n      popcnt(math.MaxUint64) ![1](assets/1.png)\n   }\n}\n```", "```go\ngoos: linux\ngoarch: amd64\npkg: github.com/efficientgo/examples/pkg/comp-opt-away\ncpu: Intel(R) Core(TM) i7-9850H CPU @ 2.60GHz\nBenchmarkPopcnt\nBenchmarkPopcnt-12     1000000000          0.2344 ns/op ![1](assets/1.png) PASS\n```", "```go\nvar Input uint64 = math.MaxUint64 ![1](assets/1.png)\nvar Sink uint64 ![2](assets/2.png)\n\nfunc BenchmarkPopcnt(b *testing.B) {\n    var s uint64\n\n    b.ResetTimer()\n    for i := 0; i < b.N; i++ {\n       s = popcnt(Input) ![3](assets/3.png)\n    }\n    Sink = s\n}\n```", "```go\nimport (\n    \"testing\"\n\n    \"github.com/efficientgo/e2e\"\n    e2edb \"github.com/efficientgo/e2e/db\"\n    e2einteractive \"github.com/efficientgo/e2e/interactive\"\n    e2emonitoring \"github.com/efficientgo/e2e/monitoring\"\n    \"github.com/efficientgo/core/testutil\"\n    \"github.com/thanos-io/objstore/providers/s3\"\n)\n\nfunc TestLabeler_LabelObject(t *testing.T) {\n    e, err := e2e.NewDockerEnvironment(\"labeler\") ![1](assets/1.png)\n    testutil.Ok(t, err)\n    t.Cleanup(e.Close)\n\n    mon, err := e2emonitoring.Start(e) ![2](assets/2.png)\n    testutil.Ok(t, err)\n    testutil.Ok(t, mon.OpenUserInterfaceInBrowser()) ![3](assets/3.png)\n\n    minio := e2edb.NewMinio(e, \"object-storage\", \"test\") ![4](assets/4.png)\n    testutil.Ok(t, e2e.StartAndWaitReady(minio))\n\n    labeler := e2e.NewInstrumentedRunnable(e, \"labeler\"). ![5](assets/5.png)\n        WithPorts(map[string]int{\"http\": 8080}, \"http\").\n        Init(e2e.StartOptions{\n            Image: \"labeler:test\", ![6](assets/6.png)\n            LimitCPUs: 4.0,\n            Command: e2e.NewCommand(\n                \"/labeler\",\n                \"-listen-address=:8080\",\n                \"-objstore.config=\"+marshal(t, client.BucketConfig{\n                    Type: client.S3,\n                    Config: s3.Config{\n                        Bucket:    \"test\",\n                        AccessKey: e2edb.MinioAccessKey,\n                        SecretKey: e2edb.MinioSecretKey,\n                        Endpoint:  minio.InternalEndpoint(e2edb.AccessPortName),\n                        Insecure:  true,\n                    },\n                }),\n            ),\n        })\n    testutil.Ok(t, e2e.StartAndWaitReady(labeler))\n```", "```go\n    testutil.Ok(t, uploadTestInput(minio, \"object1.txt\", 2e6)) ![1](assets/1.png)\n\n    k6 := e.Runnable(\"k6\").Init(e2e.StartOptions{\n        Command: e2e.NewCommandRunUntilStop(),\n        Image: \"grafana/k6:0.39.0\",\n    })\n    testutil.Ok(t, e2e.StartAndWaitReady(k6))\n\n    url := fmt.Sprintf(\n        \"http://%s/label_object?object_id=object1.txt\",\n        labeler.InternalEndpoint(\"http\"),\n    )\n    testutil.Ok(t, k6.Exec(e2e.NewCommand(\n        \"/bin/sh\", \"-c\", `cat << EOF | k6 run -u 1 -d 5m - ![2](assets/2.png) import http from 'k6/http'; ![3](assets/3.png) import { check, sleep } from 'k6';\n\nexport default function () {\n    const res = http.get('`+url`');\n    check(res, { ![4](assets/4.png) 'is status 200': (r) => r.status === 200,\n        'response': (r) =>\n            r.body.includes(\n    '{\"object_id\":\"object1.txt\",\"sum\":6221600000,\"checksum\":\"SUUr'\n            ),\n    });\n    sleep(0.5)\n}\nEOF`)))\n\n    testutil.Ok(t, `e2einteractive.RunUntilEndpointHit()`) ![5](assets/5.png)\n}\n```", "```go\nrunning (5m00.0s), 1/1 VUs, 476 complete and 0 interrupted iterations\ndefault   [ 100% ] 1 VUs  5m00.0s/5m0s\nrunning (5m00.4s), 0/1 VUs, 477 complete and 0 interrupted iterations\ndefault ✓ [ 100% ] 1 VUs  5m0s\n✓ is status 200\n✓ response\nchecks....................: 100.00% ✓ 954      ✗ 0 ![1](assets/1.png)\ndata_received.............: 108 kB  359 B/s\ndata_sent.................: 57 kB   191 B/s\nhttp_req_blocked..........: avg=9.05µs  min=2.48µs  med=8.5µs    max=553.13µs\n    p(90)=11.69µs p(95)=14.68µs\nhttp_req_connecting.......: avg=393ns   min=0s      med=0s       max=187.71µs\nhttp_req_duration.........: avg=128.9ms min=92.53ms med=126.05ms max=229.35ms ![2](assets/2.png)\n    p(90)=160.43ms p(95)=186.77ms ![2](assets/2.png)\n{ expected_response:true }: avg=128.9ms min=92.53ms med=126.05ms max=229.35ms\n    p(90)=160.43ms p(95)=186.77ms\nhttp_req_failed...........: 0.00%   ✓ 0        ✗ 477\nhttp_req_receiving........: avg=60.17µs min=30.98µs med=46.48µs  max=348.96µs\n    p(90)=95.05µs  p(95)=124.73µs\nhttp_req_sending..........: avg=35.12µs min=11.34µs med=36.72µs  max=139.1µs\n    p(90)=59.99µs  p(95)=67.34µs\nhttp_req_waiting..........: avg=128.81ms min=92.45ms med=125.97ms max=229.22ms\n    p(90)=160.24ms p(95)=186.7ms\nhttp_reqs.................: 477     1.587802/s ![3](assets/3.png)\niteration_duration........: avg=629.75ms min=593.8ms med=626.51ms max=730.08ms\n    p(90)=661.23ms p(95)=687.81ms\niterations................: 477     1.587802/s ![3](assets/3.png)\nvus.......................: 1       min=1      max=1\nvus_max...................: 1       min=1      max=1\n```"]