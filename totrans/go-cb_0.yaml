- en: Chapter 1\. Error Handling Recipes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章 错误处理技巧
- en: 1.0 Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.0 引言
- en: Alexander Pope wrote in his *An Essay on Criticism* — “to err is human”. And
    since software is written by humans (for now), software errs as well. And just
    like human errors, it’s all about how gracefully we can recover from those errors.
    That’s what error handling is all about — how do we recover when our program gets
    into a situation we did not expect or cater for in its normal flow.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 亚历山大·蒲柏在他的*论批评的散文*中写道：“出错是人性的”。由于软件是由人类编写的（目前是这样），软件也会出错。就像人类错误一样，重要的是我们如何优雅地从这些错误中恢复。这就是错误处理的关键所在——当程序陷入我们未预料或未考虑其正常流程的情况时，我们如何恢复。
- en: As programmers we often treat error handling as tedious work and an after-thought.
    That’s generally an error by itself. In fact, just like how we should treat testing,
    error handling should be top of mind and recovering from the error should be part
    of good software design. In Go, error handling is treated pretty seriously, though
    a bit unconventionally. Go has the `errors` package in the standard library that
    provides many functions to manipulate errors but most of error handling in Go
    is built into the language or is part of the idiomatic way of programming in Go.
    In this chapter we’ll talk about some of the basic ideas in error handling in
    Go.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作为程序员，我们经常把错误处理当作繁琐的工作和事后思考。这本身通常就是一个错误。事实上，就像我们应该对待测试一样，错误处理应该是首要考虑的事情，从错误中恢复应该是良好软件设计的一部分。在Go语言中，错误处理被认真对待，尽管有点不传统。Go语言在标准库中有`errors`包，提供了许多处理错误的函数，但大部分错误处理都内置在语言中或者是Go语言编程习惯的一部分。在本章中，我们将讨论Go语言中错误处理的一些基本思想。
- en: Errors are not exceptions
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误不是异常
- en: In many programming languages like Python and Java, error handling is done through
    exceptions. An exception is an object that represents an error and whenever something
    goes wrong, you can throw an exception. The calling function usually have a `try`
    and `catch` (or `try` and `except` in Python and so on) that handles anything
    that goes wrong.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多编程语言中，如Python和Java，通过异常来处理错误。异常是表示错误的对象，无论何时出错，都可以抛出异常。调用函数通常有`try`和`catch`（或者在Python中是`try`和`except`等），用于处理任何出现的问题。
- en: Go does this slightly differently (or completely differently, depending on how
    you look at it). Go doesn’t have exception handling. Instead of exceptions, it
    has errors. An `error` is a built-in type that represents an unexpected condition.
    Instead of throwing an exception you will create an error and returning it to
    the calling function. You might think, isn’t this like saying the *Odyssey* wasn’t
    written by Homer but by another Greek named Homer who also lived 2,800 years ago?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Go在这方面略有不同（或者完全不同，这取决于你的看法）。Go没有异常处理。而是使用错误。`error`是一种内置类型，表示意外情况。不会抛出异常，而是创建一个错误并将其返回给调用函数。也许你会想，这不是说*奥德赛*不是荷马写的，而是另一个名叫荷马的希腊人，他也生活在2800年前吗？
- en: Well, not exactly. Exceptions are not returned by the function at all, in fact
    you don’t know if any exceptions will be returned at all or what kind of exceptions
    (well sometimes you do but it’s a different story). You have to round it up using
    `try` and `catch`. It is only thrown when there is a problem (that’s why it’s
    called an exception), and you can wrap around a number of statements with the
    same `try` and `catch`. On the other hand, errors are deliberately returned by
    the function to be inspected by the calling function and dealt with individually.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，并不完全是这样。实际上，异常根本不会被函数返回，事实上，你根本不知道会不会返回任何异常，或者是什么样的异常（有时候你知道，但那是另一回事）。你必须使用`try`和`catch`来捕捉异常。只有在出现问题时才会抛出异常（这就是为什么称其为异常），你可以用相同的`try`和`catch`包裹多条语句。另一方面，错误是有意返回给调用函数的，以便逐个检查并进行处理。
- en: As a result, those who are more familiar with exceptions find error handling
    in Go particularly tedious. Rather using a wide net to catch exception in a series
    of statements, you have to inspect the returning errors every time and deal with
    it separately. Of course, you can also choose to ignore the errors altogether,
    though that idiomatically, you’re expected to take errors seriously and deal with
    it each time you get one. The only exception to this is probably when you don’t
    care about the returning results at all.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，那些对异常处理更熟悉的人发现在Go语言中处理错误尤其乏味。与在一系列语句中捕获异常不同，你必须每次检查返回的错误并单独处理它。当然，你也可以选择完全忽略这些错误，虽然按惯例，你应该认真对待每次出现的错误。唯一的例外可能是当你根本不关心返回的结果时。
- en: 1.1 Handling errors
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.1 处理错误
- en: Problem
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to handle an unexpected condition in your code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望在你的代码中处理一个意外情况。
- en: Solution
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: If you’re writing a function, return an `error` along with the return value
    (if any). If you’re calling a function, inspect the error returned, if it is not
    nil, handle the error accordingly.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在编写一个函数，除了返回值（如果有的话），还需返回一个`error`。如果你正在调用一个函数，检查返回的错误，如果不是`nil`，则相应地处理错误。
- en: Discussion
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The two ways you’ll be dealing with errors are if you are writing a function
    or if you’re calling a function.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 处理错误的两种方式是如果你正在编写一个函数或者如果你正在调用一个函数。
- en: Writing a function
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写一个函数
- en: Go represents errors with the `error` built-in error type, which is actually
    an interface. The rule of thumb when writing functions is that if there is any
    way the function will fail, you need to return an error, along with whatever return
    value your function returns. This is possible because Go allows multiple return
    values. By convention, error is the last return value, for example this function
    below that allows you to guess a number.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Go使用内置的`error`接口类型来表示错误，这实际上是一个接口。在编写函数时的经验法则是，如果函数可能失败，你需要返回一个错误，以及函数的其他返回值。这是可能的，因为Go允许多返回值。按照约定，错误应该是最后一个返回值，例如下面的这个允许你猜测一个数字的函数。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The input to the function should be less than 100, and the function should return
    you a true or false indicating if the guess is correct or not. Obviously if the
    input number is greater than 100 you want to flag out an error, which is what
    we do here by creating a new error using the `errors.New` function.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的输入应该小于100，并且该函数应返回一个指示猜测是否正确的true或false。显然，如果输入数字大于100，你希望引发一个错误，这就是我们通过使用`errors.New`函数来创建新错误的方式。
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is not the only way to create a new error though, another popular way of
    creating a new error is in the popular `fmt` package using the `Errorf` function.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 不过创建新错误的方式并不仅限于此，另一种流行的创建新错误的方式是在流行的`fmt`包中使用`Errorf`函数。
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The big difference between the two in this example is trivial, but `fmt.Errorf`
    allows you to format the string, like the `Printf`, `Sprintf` `Sscanf` and so
    on functions in the `fmt` package. There’s a bit more to this in `fmt.Errorf`
    though, because it can actually allow you to wrap an error around another error,
    something we’ll discuss in recipe 3.4.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中两者之间的主要区别微不足道，但`fmt.Errorf`允许你格式化字符串，就像`fmt`包中的`Printf`、`Sprintf`、`Sscanf`等函数一样。不过`fmt.Errorf`还有更多功能，因为它实际上允许你在另一个错误周围包装一个错误，这是我们将在第3.4节讨论的内容。
- en: Calling a function
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用一个函数
- en: The other rule of thumb, which comes along with the philosophy of error handling
    in Go, is “don’t ignore errors”. The standard way to handle errors in Go is quite
    straightforward — you deal with it just like any other return value. The example
    below is taken from chapter 1, recipe 1.5.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个经验法则，与Go中的错误处理哲学一起出现的是“不要忽略错误”。在Go中处理错误的标准方式非常简单——你处理它就像处理任何其他返回值一样。下面的例子摘自第1章，第1.5节。
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The function `strconv.ParseInt` returns two values, the first is the converted
    integer, and the second is the error. You should inspect the error and if the
    error is nil, all is well and you can continue with the program flow. If it’s
    not nil, then you should handle it. In the example above, I called `panic` with
    the error, which we’ll get to later in the chapter, but you can handle it whichever
    way you want, including ignoring it. You can of course, also deliberately choose
    to ignore them like this.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`strconv.ParseInt`返回两个值，第一个是转换后的整数，第二个是错误。你应该检查错误，如果错误为 nil，说明一切正常，可以继续程序流程。如果不是
    nil，那么你应该处理它。在上面的例子中，我用错误调用了`panic`，我们稍后会在本章中详细讨论这个问题，但你可以根据需要处理它，包括忽略它。当然，你也可以像这样有意选择忽略它们。
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here we’re assigning the returned error to the underscore `_` which means we’re
    ignoring it. In either case, it becomes clear that you are deliberately ignoring
    returned errors, which Go cannot stop you but a linter or your IDE or if you’re
    in a team, a code review can quickly surface.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将返回的错误赋值给下划线 `_`，这意味着我们正在忽略它。无论哪种情况，都很明显你是在有意忽略返回的错误，Go 无法阻止你，但是代码审查或者你的
    IDE 可以快速发现这些问题，尤其是在团队中。
- en: Why is error handling done this way in Go?
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么 Go 会以这种方式处理错误？
- en: You might wonder why Go does it this way, instead of how using exceptions like
    many other languages. Exceptions seem easier to handle because you can group statements
    together. Go’s way of forcing you to handle errors with each function call can
    be tedious to deal with.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道为什么 Go 会这样做，而不像许多其他语言那样使用异常。异常似乎更容易处理，因为你可以把语句组合在一起。Go 强制你在每个函数调用时处理错误的方式可能让人觉得很繁琐。
- en: However because of this exceptions can also be easily missed unless you have
    a `try` and `catch`. If you’re wrapping a bunch of statements with `try` and `catch`
    it’s easy to miss handling specific errors and it can also be confusing if you
    bunch too many statements together.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于这种方式，异常也很容易被忽略，除非你有`try`和`catch`。如果你用`try`和`catch`包装一堆语句，很容易忽略处理特定的错误，并且如果把太多语句放在一起，可能会导致混淆。
- en: The other benefit of doing it this way is that the returned error is a value
    that you can use just like any other value in your normal flow. While you can
    also process exceptions, they are constructs in the `try` and `catch` loop which
    is not in your normal flow. This seems like a trivial point, but it’s important
    because this makes handling errors an integral part of writing your code instead
    of making it optional.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这种做法的另一个好处是返回的错误是一个值，你可以像处理其他任何值一样使用它。虽然你也可以处理异常，但它们是`try`和`catch`循环中的构造，不在你的正常流程中。这看起来可能是一个细枝末节，但它很重要，因为这使得错误处理成为编写代码的一个必要部分，而不是可选的。
- en: 1.2 Simplifying repetitive error handling
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.2 简化重复的错误处理
- en: Problem
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to reduce the number of lines of repetitive error handling code.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你想减少重复错误处理代码的行数。
- en: Solution
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use helper functions to reduce the number of lines of repetitive error handling
    code.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用辅助函数来减少重复错误处理代码的行数。
- en: Discussion
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: One of the most frequent complaints about Go’s error handling, especially from
    newcomers, is that it’s tedious to have to do repetitive checks. Let’s take for
    example this piece of code that opens up a JSON file to read and unmarshal to
    a struct.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Go 语言中关于错误处理最常见的抱怨之一，特别是对新手而言，就是不得不进行重复检查感到很繁琐。让我们以打开一个 JSON 文件并将其解析到一个结构体的代码片段为例。
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can see that there are 3 sets of error handling, one when we call `http.Get`
    to get the API response into a `http.Response`, then when we call `io.ReadAll`
    to get the JSON text from the `http.Response` and finally to unmarshal the JSON
    text into the `Person` struct. Each of these calls are potential points of failure
    so we need to handle errors that result from those failures.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，有三组错误处理，一组是当我们调用`http.Get`来获取 API 响应并将其存入`http.Response`时，另一组是当我们调用`io.ReadAll`从`http.Response`中获取
    JSON 文本时，最后一组是将 JSON 文本解析到`Person`结构体中。这些调用都有可能失败，所以我们需要处理由这些失败导致的错误。
- en: However these error handling routines are pretty similar to each other and in
    fact repetitive. How can we resolve this? There are a number of ways but the most
    straightforward is probably using helper functions.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些错误处理例程非常相似且实际上是重复的。我们如何解决这个问题？有几种方法，但最直接的可能是使用辅助函数。
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The helper function here is the `check` function that takes in an error and
    a string. Besides logging the string, you can also put all the common error handling
    stuff that you might want to do. Instead of a string you can also take in a function
    to be executed if an error is encountered.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的辅助函数是 `check` 函数，它接受一个错误和一个字符串。 除了记录字符串外，你还可以放置所有可能想做的通用错误处理工作。 你还可以接受一个在遇到错误时执行的函数而不是一个字符串。
- en: Of course this is only one possible type of helper function, let’s look at another
    one. This time we’re going to use a pattern that is found in another package in
    the standard library. In the `text/template` package you can find a helper function
    called `template.Must` that wraps around functions that returns `(*Template, error)`.
    If the function returns a non-nil error, then `Must` panics. We can similarly
    create something like this to wrap around other function calls.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这只是一种可能的辅助函数类型，让我们看看另一种。 这次我们将使用标准库中另一个包中发现的模式。 在 `text/template` 包中，你可以找到一个名为
    `template.Must` 的辅助函数，它包装了返回 `(*Template, error)` 的函数。 如果该函数返回非 nil 错误，则 `Must`
    会 panic。 我们可以类似地创建一个类似的东西来包装其他函数调用。
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Because it takes any single parameter (using `interface{}`) and returns a single
    value (also using `interface{}`) we can use this for any function that returns
    a single value along with an error. For example, we can convert our earlier `unmarshal`
    function to something like this.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它接受任何单个参数（使用 `interface{}`）并返回单个值（也使用 `interface{}`），所以我们可以将其用于返回单个值和错误的任何函数。
    例如，我们可以将我们之前的 `unmarshal` 函数转换为类似于这样的函数。
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The code is more succinct but at the same time it also makes the code more unreadable
    so this kind of helper functions should be used sparingly.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 代码更加简洁，但同时也使代码更难读取，因此应谨慎使用这种辅助函数。
- en: 1.3 Creating customized errors
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.3 创建自定义错误
- en: Problem
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to create our own custom errors in order to communicate more information
    of the error encountered.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要创建我们自己的定制错误以便传达遇到的错误的更多信息。
- en: Solution
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Create a new string-based error or implement the `error` interface by creating
    a struct that has an `Error` method that returns a string.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的基于字符串的错误，或者通过创建一个具有返回字符串的 `Error` 方法的结构体来实现 `error` 接口。
- en: Discussion
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Using a string-based error
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用基于字符串的错误
- en: The simplest way to implement a customized error is to create a new string-based
    error. You can use either the `errors.New` function, which simply creates an error
    with a simple string, or using `fmt.Errorf` that allows you to use formatting.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 实现一个自定义错误的最简单方法是创建一个基于字符串的新错误。 你可以使用 `errors.New` 函数，它只是创建一个带有简单字符串的错误，或者使用
    `fmt.Errorf` 允许你使用格式化。
- en: The `errors.New` function is very straightforward.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`errors.New` 函数非常简单直接。'
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `fmt.Errorf` function, like many of the functions in the `fmt` function,
    allows for formatting within the string.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`fmt.Errorf` 函数，就像 `fmt` 函数中的许多函数一样，允许在字符串内进行格式化。'
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Implementing the error interface
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现错误接口
- en: The `builtin` package contains all the definitions of the built-in types, interfaces
    and functions. One of the interfaces is the `error` interface.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`builtin` 包包含所有内置类型、接口和函数的定义。 其中一个接口是 `error` 接口。'
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, any struct that has a method named `Error` that returns a string
    is an error. So if you want to define your own custom error to return an custom
    error message, just implement your own struct and add an `Error` method. For example
    let’s say you are writing a program used for communications and you want to create
    your own error to represent an error during communications.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，任何具有返回字符串的 `Error` 方法的结构体都是错误。 因此，如果你想要定义自己的自定义错误以返回自定义错误消息，只需实现自己的结构体并添加一个
    `Error` 方法。 例如，假设你正在编写一个用于通信的程序，并且想要创建自己的错误来表示通信期间的错误。
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Of course, you normally wouldn’t just want to override `Error` only, you can
    add fields and other methods to your custom error to carry more information.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你通常不会只想覆盖 `Error`，你可以向自定义错误添加字段和其他方法以携带更多信息。
- en: Let’s say you want to provide information about where in a line of code the
    error came from. You can create a custom error to contain the information.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要提供关于错误出现在代码行的位置信息。 你可以创建一个自定义错误来包含这些信息。
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When you get such an error you can typecast it using the comma, ok idiom (because
    if you typecast it and it’s not that type, it will panic) and extract the additional
    data for your processing.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当你遇到这样的错误时，你可以使用逗号，ok 惯用法进行类型转换（因为如果你类型转换它并且它不是那种类型，它将 panic），并提取额外的数据进行处理。
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 1.4 Wrapping error with other errors
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.4 使用其他错误包裹错误
- en: Problem
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to provide additional information and context to an error you receive
    before returning it as another error.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望在返回错误之前为接收到的错误提供额外的信息和上下文。
- en: Solution
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Wrap the error you receive with another error you create before returning it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在返回前将收到的错误用自定义错误再次包裹。
- en: Discussion
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Sometimes you will get and error but instead of just returning that, you want
    to provide additional context to it before returning the error. For example if
    you get a network connection error you might want to know where in the code that
    happened and what you were doing when that happened.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您会收到一个错误，但不只是返回它，而是在返回错误之前为其提供额外的上下文。例如，如果您遇到网络连接错误，您可能想知道发生错误的代码位置以及发生错误时正在做什么。
- en: Of course you can simply extract the information, create a new customized error
    with the additional information and return that. Alternatively, you can also wrap
    the error with another error and return it, passing thr error up the call stack
    while adding additional information and context to it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您可以简单地提取信息，使用附加信息创建新的自定义错误并返回。或者，您也可以将错误包装在另一个错误中返回，通过调用堆栈传递错误并向其添加额外的信息和上下文。
- en: There are a couple of ways of wrapping errors. The easiest is simply to use
    `fmt.Errorf` again, and provide an error as part of the parameter.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 包装错误有几种方法。最简单的方法就是再次使用`fmt.Errorf`，并将错误作为参数之一提供。
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `%w` verb allows us to place an error within the format string. In the example
    above, `err2` wraps `err1`. But how do we extract `err1` out of `err2`? The `errors`
    package has a function `Unwrap` that does exactly this.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`%w`占位符允许我们将错误放置在格式化字符串中。在上面的例子中，`err2`包裹了`err1`。但是我们如何从`err2`中提取`err1`？`errors`包中有一个名为`Unwrap`的函数可以做到这一点。'
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This will give us back `err1`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就可以得到`err1`。
- en: Another way of wrapping an error with another one is to create a customized
    error struct like this.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种包装错误的方法是创建一个自定义的错误结构体，像这样。
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Remember, to make it an error, the struct should have an `Error` method. To
    allow struct to be unwrapped, we need to implement an `Unwrap` function for it.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，要使其成为错误，结构体应该有一个`Error`方法。为了允许结构体被展开，我们需要为其实现一个`Unwrap`函数。
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 1.5 Inspecting errors
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.5 检查错误
- en: Problem
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to check for specific errors or specific types of errors.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要检查特定的错误或特定类型的错误。
- en: Solution
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the `errors.Is` and `errors.As` functions. The `errors.Is` function compares
    an error to a value and the `errors.As` function checks if an error is of a specific
    type.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`errors.Is`和`errors.As`函数。`errors.Is`函数将错误与一个值进行比较，而`errors.As`函数则检查错误是否属于特定类型。
- en: Discussion
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Using `errors.Is`
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`errors.Is`
- en: The `errors.Is` function is essentially an equality check. Let’s say in your
    codebase you define a set of customized errors, for example `ApiErr` which happens
    when a connection to an API encounters an error.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`errors.Is`函数本质上是一个相等性检查。假设在您的代码库中定义了一组自定义错误，例如当与API连接时发生错误时会出现`ApiErr`。'
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Elsewhere in your code, you have a function that returns this error.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的其他位置，您有一个函数返回此错误。
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You can use `errors.Is` to check if the error returned is really `ApiErr`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`errors.Is`来检查返回的错误是否真的是`ApiErr`。
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can also verify if `ApiErr` is somewhere along the chain of wrapped errors.
    Let’s take the example of a `connect` function that returns a `ConnectionError`
    that wraps around `ApiErr`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以验证`ApiErr`是否在包裹错误的链中的某个位置。让我们以一个返回`ConnectionError`并包装`ApiErr`的`connect`函数为例。
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This code still works because `ConnectionError` wraps around `ApiErr`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码仍然有效，因为`ConnectionError`包裹了`ApiErr`。
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Using `errors.As`
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`errors.As`
- en: The `errors.As` function allows us to check for a specific type of error. Let’s
    continue with the example above but this time round we want to check if the error
    is of the type `ConnectionError`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`errors.As`函数允许我们检查特定类型的错误。让我们继续使用上面的例子，但这次我们要检查错误是否为`ConnectionError`类型。'
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We can use `errors.As` to check if the returned error is really a `ConnectionError`
    by passing it the returned error and a variable of type `*ConnectionError`, named
    `connErr`. If it turns out to be so, `errors.As` will then assign the returned
    error into `connErr` and you can process the error at the same time.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`errors.As`来检查返回的错误是否真的是`ConnectionError`，通过传递返回的错误和类型为`*ConnectionError`的变量`connErr`。如果是，`errors.As`将把返回的错误赋给`connErr`，同时您可以处理错误。
- en: 1.6 Handling errors with panic
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.6 使用 panic 处理错误
- en: Problem
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to report an error that causes your program to halt and is unable to
    continue.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望报告导致程序停止并且无法继续的错误。
- en: Solution
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the built-in `panic` function to stop the program.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用内置的`panic`函数来停止程序。
- en: Discussion
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Sometimes your program will encounter an error that makes it unable to continue.
    In this case you would want stop the program. Go provides a built-in function
    called `panic` that takes in a single parameter of any type and stops the normal
    execution of the current goroutine.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您的程序会遇到使其无法继续的错误。在这种情况下，您将希望停止程序。Go提供了一个名为`panic`的内置函数，它接受任何类型的单个参数，并停止当前goroutine的正常执行。
- en: When a function calls panic, the normal execution of the function stops immediately
    and any deferred actions (anything that you call that starts with `defer`) are
    executed before the function returns to its caller.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当函数调用`panic`时，函数的正常执行立即停止，并且在函数返回给其调用者之前执行任何延迟操作（任何以`defer`开头的内容）。
- en: The calling function will also panic and stops normal execution and execute
    deferred actions as well. This bubbles up until the entire program exits with
    a non-zero exit code.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 调用函数也会发生panic并停止正常执行，并且执行延迟操作。这会一直上升，直到整个程序以非零退出代码退出。
- en: Let’s take a closer look at this. We create a normal flow of functions where
    `main` calls `A`, `A` calls `B` and `B` calls `C`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看一下这个问题。我们创建了一个函数的正常流程，其中`main`调用`A`，`A`调用`B`，`B`调用`C`。
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The execution results in this, which is the expected and normal flow.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 执行结果如下，这是预期的正常流程。
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: What happens if we call `panic` in `C` between the two `fmt.Println` statements,
    like this?
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在`C`中两个`fmt.Println`语句之间调用`panic`，会发生什么？
- en: '[PRE27]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: When we `C` calls `panic` in the middle of the execution, `C` stops immediately
    and executes the deferred code within its scope. After that it bubbles up to the
    caller `B` which also stops immediately and executes the deferred code within
    its scope and returns to its caller, `A`. The same happens to `A` and it bubbles
    up the `main` function which executes the deferred code within its scope. Since
    that’s the end of the chain, it will print out the `panic` parameter.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在执行过程中`C`调用`panic`时，`C`立即停止并执行其范围内的延迟代码。之后它上升到调用者`B`，`B`也立即停止并执行其范围内的延迟代码，并返回给其调用者`A`。同样的情况发生在`A`身上，它上升到`main`函数，该函数执行其范围内的延迟代码。由于这是链的末端，它将打印出`panic`的参数。
- en: If you run this code on the terminal, this is what you should see.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在终端上运行此代码，您将看到以下内容。
- en: '[PRE28]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As you can see from the results, the rest of the code in all the functions never
    get executed, but all the deferred code gets executed before panic exits with
    a parameter.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从结果中看到的那样，所有函数中的其余代码都不会被执行，但是所有延迟代码在panic退出时都会执行。
- en: 1.7 Recovering from panic
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.7 从panic中恢复
- en: Problem
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: One of your goroutines have an error and cannot continue, and a panic is called
    but you don’t want to stop the rest of the program.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您的一个goroutine出现错误并且无法继续，调用了panic，但您不希望停止程序的其余部分。
- en: Solution
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the built-in `recover` function to stop the panic. This only works in deferred
    functions.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 使用内置的`recover`函数来阻止`panic`。这仅在延迟函数中有效。
- en: Discussion
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: In the previous recipe we see how `panic` stops the normal execution of code,
    runs the deferred code and bubbles up until the program terminates. Sometimes
    we want to stop `panic` from terminating the program. In this case we can use
    the built-in `recover` function to stop `panic` and continue the execution of
    the program.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个示例中，我们看到`panic`如何停止代码的正常执行，运行延迟代码并上升直到程序终止。有时我们希望阻止`panic`终止程序。在这种情况下，我们可以使用内置的`recover`函数来阻止`panic`并继续程序的执行。
- en: But why would we want that? There could be a few reasons. You could be using
    a package that panics whenever it encounters something it cannot recover from.
    However that doesn’t mean you want your program to terminate(maybe it’s ok for
    you even if that part of the code is not able to continue). Or you could also
    simply want to stop the execution of a goroutine without killing off the main
    program, for example if your web application is running, you don’t want a panicked
    handler function to shut down the whole server.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 但是为什么我们要这样做呢？可能有几个原因。您可能正在使用一个在遇到无法恢复的情况时引发panic的包。但这并不意味着您希望程序终止（即使该部分代码无法继续）。或者您可能只是想停止goroutine的执行，而不希望杀死主程序，例如，如果您的Web应用正在运行，您不希望发生panic的处理程序关闭整个服务器。
- en: Whichever case that is, `recover` can only work if you use it within a `defer`.
    This is because when a function calls `panic` everything else stops working, except
    for code that’s deferred.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是哪种情况，只有在`defer`内部使用`recover`才有效。这是因为当函数调用`panic`时，除了延迟执行的代码外，其他所有代码都将停止工作。
- en: Let’s use the example from the previous recipe.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用前一个示例中的示例。
- en: '[PRE29]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We add a new function named `dontPanic`. In this function we call the built-in
    function `recover`. If this function is called while the program is bubbling up
    a `panic`, it will return the parameter passed to `panic` and stops `panic` from
    continuing. Under normal circumstances, `recover` simply returns a nil and the
    normal deferred code is run.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个名为`dontPanic`的新函数。在此函数中，我们调用内置函数`recover`。如果在程序冒泡`panic`时调用此函数，则会返回传递给`panic`的参数，并阻止`panic`继续。在正常情况下，`recover`只返回nil，并且正常的延迟代码会运行。
- en: The execution is as what we expect, which is the normal flow. Calling `recover`
    returns nil and so the normal deferred code runs.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 执行如预期的正常流程。调用`recover`返回nil，因此正常的延迟代码会运行。
- en: '[PRE30]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Now let’s add a `panic` into `C`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在`C`中添加一个`panic`。
- en: '[PRE31]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Let’s run it again and see what happens.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次运行它，看看会发生什么。
- en: '[PRE32]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: When `panic` is called in `C`, the deferred code in `C` kicks in, without running
    the rest of the code in `C`, and bubbles up to `B`. `B` stops running the rest
    of the code and starts running the deferred code, which calls `dontPanic`. `dontPanic`
    calls `recover` which returns the parameter passed to the `panic` called in `C`
    and the recovery code is run.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在`C`中调用`panic`时，`C`中的延迟代码会触发，而不会运行`C`中其余的代码，并冒泡到`B`。 `B`停止运行其余的代码并开始运行延迟代码，其中调用`dontPanic`。
    `dontPanic`调用`recover`，返回传递给`C`中调用`panic`的参数，并运行恢复代码。
- en: The normal execution of `B` doesn’t happen but when `B` returns to `A` all is
    well and the normal execution flow of the code continues.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`B`的正常执行不会发生，但当`B`返回到`A`时一切正常，代码的正常执行流程继续进行。'
- en: 1.8 Handling interrupts
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.8 处理中断
- en: Problem
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: Your program receives an interrupt signal from the operating system (for example,
    if the user presses `ctrl-c`) and you want to clean-up and exit gracefully.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 程序从操作系统接收到中断信号（例如，如果用户按下`ctrl-c`），您希望进行清理并优雅地退出。
- en: Solution
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the goroutine to monitor the interrupt using the `os/signal` package. Place
    your clean-up code in the goroutine.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 使用goroutine使用`os/signal`包监控中断。将清理代码放在goroutine中。
- en: Discussion
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Signals are messages sent to running programs to trigger certain behaviors within
    the program. Signals are asynchronous and can be sent by the operating system
    or other running programs. When a signal is sent, the operating system interrupts
    the running program to deliver the signal. If the process has a signal handler
    for the signal, that handler will be executed, otherwise a default handler will
    be executed.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 信号是发送给运行中程序的消息，以触发程序内部的某些行为。信号是异步的，可以由操作系统或其他运行中的程序发送。当发送信号时，操作系统中断运行的程序以传递信号。如果进程具有信号处理程序，则将执行该处理程序；否则将执行默认处理程序。
- en: On the command line, certain key combinations like `ctrl-c` triggers a signal
    (in this case, `ctrl-c` sends the `SIGINT` signal) to the program running in the
    foreground. The `SIGINT` signal, or *signal interrupt* is a signal that interrupts
    the running program and causes it to terminate.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行上，某些键组合（例如`ctrl-c`）会触发信号（在本例中，`ctrl-c`发送`SIGINT`信号）到前台运行的程序。`SIGINT`信号或*信号中断*是一种中断运行中程序并导致其终止的信号。
- en: You can capture such signals in Go using the `os/signal` package.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`os/signal`包在Go中捕获此类信号。
- en: Let’s take a look at how we can do this.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何做到这一点。
- en: '[PRE33]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: First, we create a channel `ch` to send the signals. Then we use the `signal.Notify`
    function to relay incoming signals to `ch`. The first parameter of `signal.Notify`
    is the channel, and the second parameter is variadic, which means we can pass
    in none or more parameters. In this case we pass in the various signals we want
    to capture. In the example code above, we want to relay `os.Interrupt` which is
    a `syscall.SIGINT` or `ctrl-c`. If no parameters are passed in, all signals will
    be relayed to the channel.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个通道`ch`来发送信号。然后我们使用`signal.Notify`函数将传入的信号转发到`ch`。`signal.Notify`的第一个参数是通道，第二个参数是可变参数，这意味着我们可以传入零个或多个参数。在这种情况下，我们传入我们想要捕获的各种信号。在上面的示例代码中，我们想要转发`os.Interrupt`，这是一个`syscall.SIGINT`或`ctrl-c`。如果不传入任何参数，则所有信号将被转发到通道。
- en: After we have set things up, we spin up a goroutine where we wait for the signal
    to come in by receiving from `ch`. This causes the goroutine to block until a
    signal is send on it. Once a signal comes in, we continue the goroutine, executing
    whichever clean-up routine we want, before exiting gracefully from the program.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好之后，我们会启动一个 goroutine，在那里我们通过从 `ch` 接收信号来等待信号的到来。这会导致 goroutine 阻塞，直到收到信号。一旦收到信号，我们继续执行该
    goroutine，执行我们想要的任何清理例程，然后从程序中优雅地退出。
