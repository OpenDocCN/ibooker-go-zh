["```go\nvar x [3]int\n```", "```go\nvar x = [3]int{10, 20, 30}\n```", "```go\nvar x = [12]int{1, 5: 4, 6, 10: 100, 15}\n```", "```go\nvar x = [...]int{10, 20, 30}\n```", "```go\nvar x = [...]int{1, 2, 3}\nvar y = [3]int{1, 2, 3}\nfmt.Println(x == y) // prints true\n```", "```go\nvar x [2][3]int\n```", "```go\nx[0] = 10\nfmt.Println(x[2])\n```", "```go\nfmt.Println(len(x))\n```", "```go\nvar x = []int{10, 20, 30}\n```", "```go\nvar x = []int{1, 5: 4, 6, 10: 100, 15}\n```", "```go\nvar x [][]int\n```", "```go\nx[0] = 10\nfmt.Println(x[2])\n```", "```go\nvar x []int\n```", "```go\nfmt.Println(x == nil) // prints true\n```", "```go\nx := []int{1, 2, 3, 4, 5}\ny := []int{1, 2, 3, 4, 5}\nz := []int{1, 2, 3, 4, 5, 6}\ns := []string{\"a\", \"b\", \"c\"}\nfmt.Println(slices.Equal(x, y)) // prints true\nfmt.Println(slices.Equal(x, z)) // prints false\nfmt.Println(slices.Equal(x, s)) // does not compile\n```", "```go\nvar x []int\nx = append(x, 10) // assign result to the variable that's passed in\n```", "```go\nvar x = []int{1, 2, 3}\nx = append(x, 4)\n```", "```go\nx = append(x, 5, 6, 7)\n```", "```go\ny := []int{20, 30, 40}\nx = append(x, y...)\n```", "```go\nvar x []int\nfmt.Println(x, len(x), cap(x))\nx = append(x, 10)\nfmt.Println(x, len(x), cap(x))\nx = append(x, 20)\nfmt.Println(x, len(x), cap(x))\nx = append(x, 30)\nfmt.Println(x, len(x), cap(x))\nx = append(x, 40)\nfmt.Println(x, len(x), cap(x))\nx = append(x, 50)\nfmt.Println(x, len(x), cap(x))\n```", "```go\n[] 0 0\n[10] 1 1\n[10 20] 2 2\n[10 20 30] 3 4\n[10 20 30 40] 4 4\n[10 20 30 40 50] 5 8\n```", "```go\nx := make([]int, 5)\n```", "```go\nx := make([]int, 5)\nx = append(x, 10)\n```", "```go\nx := make([]int, 5, 10)\n```", "```go\nx := make([]int, 0, 10)\n```", "```go\nx := make([]int, 0, 10)\nx = append(x, 5,6,7,8)\n```", "```go\ns := []string{\"first\", \"second\", \"third\"}\nfmt.Println(s, len(s))\nclear(s)\nfmt.Println(s, len(s))\n```", "```go\n[first second third] 3\n[  ] 3\n```", "```go\nvar data []int\n```", "```go\nvar x = []int{}\n```", "```go\ndata := []int{2, 4, 6, 8} // numbers we appreciate\n```", "```go\nx := []string{\"a\", \"b\", \"c\", \"d\"}\ny := x[:2]\nz := x[1:]\nd := x[1:3]\ne := x[:]\nfmt.Println(\"x:\", x)\nfmt.Println(\"y:\", y)\nfmt.Println(\"z:\", z)\nfmt.Println(\"d:\", d)\nfmt.Println(\"e:\", e)\n```", "```go\nx: [a b c d]\ny: [a b]\nz: [b c d]\nd: [b c]\ne: [a b c d]\n```", "```go\nx := []string{\"a\", \"b\", \"c\", \"d\"}\ny := x[:2]\nz := x[1:]\nx[1] = \"y\"\ny[0] = \"x\"\nz[1] = \"z\"\nfmt.Println(\"x:\", x)\nfmt.Println(\"y:\", y)\nfmt.Println(\"z:\", z)\n```", "```go\nx: [x y z d]\ny: [x y]\nz: [y z d]\n```", "```go\nx := []string{\"a\", \"b\", \"c\", \"d\"}\ny := x[:2]\nfmt.Println(cap(x), cap(y))\ny = append(y, \"z\")\nfmt.Println(\"x:\", x)\nfmt.Println(\"y:\", y)\n```", "```go\n4 4\nx: [a b z d]\ny: [a b z]\n```", "```go\nx := make([]string, 0, 5)\nx = append(x, \"a\", \"b\", \"c\", \"d\")\ny := x[:2]\nz := x[2:]\nfmt.Println(cap(x), cap(y), cap(z))\ny = append(y, \"i\", \"j\", \"k\")\nx = append(x, \"x\")\nz = append(z, \"y\")\nfmt.Println(\"x:\", x)\nfmt.Println(\"y:\", y)\nfmt.Println(\"z:\", z)\n```", "```go\nx := make([]string, 0, 5)\nx = append(x, \"a\", \"b\", \"c\", \"d\")\ny := x[:2:2]\nz := x[2:4:4]\n```", "```go\nx := []int{1, 2, 3, 4}\ny := make([]int, 4)\nnum := copy(y, x)\nfmt.Println(y, num)\n```", "```go\n[1 2 3 4] 4\n```", "```go\nx := []int{1, 2, 3, 4}\ny := make([]int, 2)\nnum := copy(y, x)\n```", "```go\nx := []int{1, 2, 3, 4}\ny := make([]int, 2)\ncopy(y, x[2:])\n```", "```go\nx := []int{1, 2, 3, 4}\nnum := copy(x[:3], x[1:])\nfmt.Println(x, num)\n```", "```go\nx := []int{1, 2, 3, 4}\nd := [4]int{5, 6, 7, 8}\ny := make([]int, 2)\ncopy(y, d[:])\nfmt.Println(y)\ncopy(d[:], x)\nfmt.Println(d)\n```", "```go\n[5 6]\n[1 2 3 4]\n```", "```go\nxArray := [4]int{5, 6, 7, 8}\nxSlice := xArray[:]\n```", "```go\nx := [4]int{5, 6, 7, 8}\ny := x[:2]\nz := x[2:]\n```", "```go\nx := [4]int{5, 6, 7, 8}\ny := x[:2]\nz := x[2:]\nx[0] = 10\nfmt.Println(\"x:\", x)\nfmt.Println(\"y:\", y)\nfmt.Println(\"z:\", z)\n```", "```go\nx: [10 6 7 8]\ny: [10 6]\nz: [7 8]\n```", "```go\nxSlice := []int{1, 2, 3, 4}\nxArray := [4]int(xSlice)\nsmallArray := [2]int(xSlice)\nxSlice[0] = 10\nfmt.Println(xSlice)\nfmt.Println(xArray)\nfmt.Println(smallArray)\n```", "```go\n[10 2 3 4]\n[1 2 3 4]\n[1 2]\n```", "```go\npanicArray := [5]int(xSlice)\nfmt.Println(panicArray)\n```", "```go\npanic: runtime error: cannot convert slice with length 4 to array\n     or pointer to array with length 5\n```", "```go\nxSlice := []int{1,2,3,4}\nxArrayPointer := (*[4]int)(xSlice)\n```", "```go\nxSlice[0] = 10\nxArrayPointer[1] = 20\nfmt.Println(xSlice) // prints [10 20 3 4]\nfmt.Println(xArrayPointer) // prints &[10 20 3 4]\n```", "```go\nvar s string = \"Hello there\"\nvar b byte = s[6]\n```", "```go\nvar s string = \"Hello there\"\nvar s2 string = s[4:7]\nvar s3 string = s[:5]\nvar s4 string = s[6:]\n```", "```go\nvar s string = \"Hello \"\nvar s2 string = s[4:7]\nvar s3 string = s[:5]\nvar s4 string = s[6:]\n\n```", "```go\nvar s string = \"Hello \"\nfmt.Println(len(s))\n\n```", "```go\nvar a rune    = 'x'\nvar s string  = string(a)\nvar b byte    = 'y'\nvar s2 string = string(b)\n```", "```go\nvar x int = 65\nvar y = string(x)\nfmt.Println(y)\n```", "```go\nvar s string = \"Hello, \"\nvar bs []byte = []byte(s)\nvar rs []rune = []rune(s)\nfmt.Println(bs)\nfmt.Println(rs)\n\n```", "```go\n[72 101 108 108 111 44 32 240 159 140 158]\n[72 101 108 108 111 44 32 127774]\n```", "```go\nvar nilMap map[string]int\n```", "```go\ntotalWins := map[string]int{}\n```", "```go\nteams := map[string][]string {\n    \"Orcas\": []string{\"Fred\", \"Ralph\", \"Bijou\"},\n    \"Lions\": []string{\"Sarah\", \"Peter\", \"Billie\"},\n    \"Kittens\": []string{\"Waldo\", \"Raul\", \"Ze\"},\n}\n```", "```go\nages := make(map[int][]string, 10)\n```", "```go\ntotalWins := map[string]int{}\ntotalWins[\"Orcas\"] = 1\ntotalWins[\"Lions\"] = 2\nfmt.Println(totalWins[\"Orcas\"])\nfmt.Println(totalWins[\"Kittens\"])\ntotalWins[\"Kittens\"]++\nfmt.Println(totalWins[\"Kittens\"])\ntotalWins[\"Lions\"] = 3\nfmt.Println(totalWins[\"Lions\"])\n```", "```go\n1\n0\n1\n3\n```", "```go\nm := map[string]int{\n    \"hello\": 5,\n    \"world\": 0,\n}\nv, ok := m[\"hello\"]\nfmt.Println(v, ok)\n\nv, ok = m[\"world\"]\nfmt.Println(v, ok)\n\nv, ok = m[\"goodbye\"]\nfmt.Println(v, ok)\n```", "```go\nm := map[string]int{\n    \"hello\": 5,\n    \"world\": 10,\n}\ndelete(m, \"hello\")\n```", "```go\nm := map[string]int{\n    \"hello\": 5,\n    \"world\": 10,\n}\nfmt.Println(m, len(m))\nclear(m)\nfmt.Println(m, len(m))\n```", "```go\nmap[hello:5 world:10] 2\nmap[] 0\n```", "```go\nm := map[string]int{\n    \"hello\": 5,\n    \"world\": 10,\n}\nn := map[string]int{\n    \"world\": 10,\n    \"hello\": 5,\n}\nfmt.Println(maps.Equal(m, n)) // prints true\n```", "```go\nintSet := map[int]bool{}\nvals := []int{5, 10, 2, 5, 8, 7, 3, 9, 1, 2, 10}\nfor _, v := range vals {\n    intSet[v] = true\n}\nfmt.Println(len(vals), len(intSet))\nfmt.Println(intSet[5])\nfmt.Println(intSet[500])\nif intSet[100] {\n    fmt.Println(\"100 is in the set\")\n}\n```", "```go\nintSet := map[int]struct{}{}\nvals := []int{5, 10, 2, 5, 8, 7, 3, 9, 1, 2, 10}\nfor _, v := range vals {\n    intSet[v] = struct{}{}\n}\nif _, ok := intSet[5]; ok {\n    fmt.Println(\"5 is in the set\")\n}\n```", "```go\ntype person struct {\n    name string\n    age  int\n    pet  string\n}\n```", "```go\nvar fred person\n```", "```go\nbob := person{}\n```", "```go\njulia := person{\n    \"Julia\",\n    40,\n    \"cat\",\n}\n```", "```go\nbeth := person{\n    age:  30,\n    name: \"Beth\",\n}\n```", "```go\nbob.name = \"Bob\"\nfmt.Println(bob.name)\n```", "```go\nvar person struct {\n    name string\n    age  int\n    pet  string\n}\n\nperson.name = \"bob\"\nperson.age = 50\nperson.pet = \"dog\"\n\npet := struct {\n    name string\n    kind string\n}{\n    name: \"Fido\",\n    kind: \"dog\",\n}\n```", "```go\ntype firstPerson struct {\n    name string\n    age  int\n}\n```", "```go\ntype secondPerson struct {\n    name string\n    age  int\n}\n```", "```go\ntype thirdPerson struct {\n    age  int\n    name string\n}\n```", "```go\ntype fourthPerson struct {\n    firstName string\n    age       int\n}\n```", "```go\ntype fifthPerson struct {\n    name          string\n    age           int\n    favoriteColor string\n}\n```", "```go\ntype firstPerson struct {\n    name string\n    age  int\n}\nf := firstPerson{\n    name: \"Bob\",\n    age:  50,\n}\nvar g struct {\n    name string\n    age  int\n}\n\n// compiles -- can use = and == between identical named and anonymous structs\ng = f\nfmt.Println(f == g)\n```"]